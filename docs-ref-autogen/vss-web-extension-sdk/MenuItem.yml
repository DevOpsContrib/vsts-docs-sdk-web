### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.MenuItem
    name: MenuItem
    fullName: MenuItem
    children:
      - vss-web-extension-sdk.MenuItem.cancelDelayedFunction
      - vss-web-extension-sdk.MenuItem.create
      - vss-web-extension-sdk.MenuItem.createIn
      - vss-web-extension-sdk.MenuItem.delayExecute
      - vss-web-extension-sdk.MenuItem.enhance
      - vss-web-extension-sdk.MenuItem.ensureEnhancement
      - vss-web-extension-sdk.MenuItem.ensureEnhancements
      - vss-web-extension-sdk.MenuItem.execute
      - vss-web-extension-sdk.MenuItem.focus
      - vss-web-extension-sdk.MenuItem.getActionArguments
      - vss-web-extension-sdk.MenuItem.getElement
      - vss-web-extension-sdk.MenuItem.getEnhancementOptions
      - vss-web-extension-sdk.MenuItem.getId
      - vss-web-extension-sdk.MenuItem.getInstance
      - vss-web-extension-sdk.MenuItem.getMenuType
      - vss-web-extension-sdk.MenuItem.getOptionPrefix
      - vss-web-extension-sdk.MenuItem.getOwner
      - vss-web-extension-sdk.MenuItem.getParentMenu
      - vss-web-extension-sdk.MenuItem.getTypeName
      - vss-web-extension-sdk.MenuItem.getTypeName
      - vss-web-extension-sdk.MenuItem.initializeOptions
      - vss-web-extension-sdk.MenuItem.isDisposed
      - vss-web-extension-sdk.MenuItem.isLabel
      - vss-web-extension-sdk.MenuItem.isSelected
      - vss-web-extension-sdk.MenuItem.constructor
      - vss-web-extension-sdk.MenuItem.registerEnhancement
      - vss-web-extension-sdk.MenuItem.registerJQueryWidget
      - vss-web-extension-sdk.MenuItem.removeHighlight
      - vss-web-extension-sdk.MenuItem.removePressedHighlight
      - vss-web-extension-sdk.MenuItem.setAttribute
      - vss-web-extension-sdk.MenuItem.setEnhancementOptions
      - vss-web-extension-sdk.MenuItem.setIsHidden
      - vss-web-extension-sdk.MenuItem.setRole
      - vss-web-extension-sdk.MenuItem.showHoverHighlight
      - vss-web-extension-sdk.MenuItem.showPressedHighlight
      - vss-web-extension-sdk.MenuItem.updateText
      - vss-web-extension-sdk.MenuItem.updateTitle
      - vss-web-extension-sdk.MenuItem._bind
      - vss-web-extension-sdk.MenuItem._enhance
      - vss-web-extension-sdk.MenuItem._ensureInitialized
      - vss-web-extension-sdk.MenuItem._fire
      - vss-web-extension-sdk.MenuItem._fireChange
      - vss-web-extension-sdk.MenuItem._getEventNameSpace
      - vss-web-extension-sdk.MenuItem._getInDomPromise
      - vss-web-extension-sdk.MenuItem._getUniqueId
      - vss-web-extension-sdk.MenuItem._setElement
      - vss-web-extension-sdk.MenuItem._setId
      - vss-web-extension-sdk.MenuItem._unbind
      - vss-web-extension-sdk.MenuItem._updateContributedMenuItems
    langs:
      - typeScript
    type: class
    summary: ''
  - uid: vss-web-extension-sdk.MenuItem.cancelDelayedFunction
    name: 'cancelDelayedFunction(name: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Cancels any pending delayed functions (delayExecute calls) with the
      specified name
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: Name (supplied in the delayExecute call) of the operations to cancel
      content: 'function cancelDelayedFunction(name: string)'
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.MenuItem.create
    name: >-
      create(controlType: function, container: JQuery, controlOptions: TOptions,
      enhancementOptions?: EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: Creates a the control specified by TControl in the given container.
    syntax:
      parameters:
        - id: controlType
          type:
            - function
          description: ''
        - id: container
          type:
            - JQuery
          description: ''
        - id: controlOptions
          type:
            - TOptions
          description: ''
        - id: vss-web-extension-sdk.EnhancementOptions
          type:
            - EnhancementOptions
          description: ''
          optional: true
      content: >-
        function create(controlType: function, container: JQuery,
        controlOptions: TOptions, enhancementOptions?: EnhancementOptions)
      return:
        type:
          - TControl
    type: method
  - uid: vss-web-extension-sdk.MenuItem.createIn
    name: >-
      createIn(type?: any, container?: any, options?: TOptions, koCompatable?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: container
          type:
            - any
          description: ''
          optional: true
        - id: options
          type:
            - TOptions
          description: ''
          optional: true
        - id: koCompatable
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function createIn(type?: any, container?: any, options?: TOptions,
        koCompatable?: boolean)
      return:
        type:
          - vss-web-extension-sdk.Control
    type: method
  - uid: vss-web-extension-sdk.MenuItem.delayExecute
    name: >-
      delayExecute(name?: string, msDelay?: number, cancelPendingOps?: boolean,
      func?: Function)
    children: []
    langs:
      - typeScript
    summary: Executes the provided function after the specified amount of time
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: >-
            (Optional) Name for this operation. Allows subsequent calls to
            cancel this action.
          optional: true
        - id: msDelay
          type:
            - number
          description: Delay in milliseconds to wait before executing the Function
          optional: true
        - id: cancelPendingOps
          type:
            - boolean
          description: >-
            If true, cancel any pending requests with this name. If false, and
            there are outstanding requests with this name already in progress,
            then do nothing.
          optional: true
        - id: func
          type:
            - Function
          description: |
            Method to execute after the delay
          optional: true
      content: >-
        function delayExecute(name?: string, msDelay?: number,
        cancelPendingOps?: boolean, func?: Function)
    type: method
  - uid: vss-web-extension-sdk.MenuItem.enhance
    name: >-
      enhance(type: function, element: function, options?: function,
      enhancementOptions?: EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - function
          description: ''
        - id: element
          type:
            - function
          description: ''
        - id: options
          type:
            - function
          description: ''
          optional: true
        - id: vss-web-extension-sdk.EnhancementOptions
          type:
            - EnhancementOptions
          description: ''
          optional: true
      content: >-
        function enhance(type: function, element: function, options?: function,
        enhancementOptions?: EnhancementOptions)
      return:
        type:
          - vss-web-extension-sdk.Enhancement
    type: method
  - uid: vss-web-extension-sdk.MenuItem.ensureEnhancement
    name: 'ensureEnhancement(type?: any, context?: any, errorCallback?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: context
          type:
            - any
          description: ''
          optional: true
        - id: errorCallback
          type:
            - any
          description: ''
          optional: true
      content: >-
        function ensureEnhancement(type?: any, context?: any, errorCallback?:
        any)
      return:
        type:
          - vss-web-extension-sdk.Enhancement
    type: method
  - uid: vss-web-extension-sdk.MenuItem.ensureEnhancements
    name: 'ensureEnhancements(type?: any, context?: any, errorCallback?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: context
          type:
            - any
          description: ''
          optional: true
        - id: errorCallback
          type:
            - any
          description: ''
          optional: true
      content: >-
        function ensureEnhancements(type?: any, context?: any, errorCallback?:
        any)
      return:
        type:
          - null
    type: method
  - uid: vss-web-extension-sdk.MenuItem.execute
    name: 'execute(options?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: options
          type:
            - function
          description: |+

          optional: true
      content: 'function execute(options?: function)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.MenuItem.focus
    name: focus()
    children: []
    langs:
      - typeScript
    summary: Set Focus to the control
    syntax:
      parameters: []
      content: function focus()
    type: method
  - uid: vss-web-extension-sdk.MenuItem.getActionArguments
    name: getActionArguments()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getActionArguments()
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.MenuItem.getElement
    name: getElement()
    children: []
    langs:
      - typeScript
    summary: Gets the element associated with this control.
    syntax:
      parameters: []
      content: function getElement()
      return:
        type:
          - JQuery
    type: method
  - uid: vss-web-extension-sdk.MenuItem.getEnhancementOptions
    name: 'getEnhancementOptions(type: any, element: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
        - id: element
          type:
            - any
          description: |+

      content: 'function getEnhancementOptions(type: any, element: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.MenuItem.getId
    name: getId()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getId()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.MenuItem.getInstance
    name: 'getInstance(type?: any, element?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: element
          type:
            - any
          description: ''
          optional: true
      content: 'function getInstance(type?: any, element?: any)'
      return:
        type:
          - vss-web-extension-sdk.Enhancement
    type: method
  - uid: vss-web-extension-sdk.MenuItem.getMenuType
    name: getMenuType()
    children: []
    langs:
      - typeScript
    summary: Returns the menu type. The values are outlines in the MenuType enumeration
    syntax:
      parameters: []
      content: function getMenuType()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.MenuItem.getOptionPrefix
    name: 'getOptionPrefix(type: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
      content: 'function getOptionPrefix(type: any)'
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.MenuItem.getOwner
    name: getOwner()
    children: []
    langs:
      - typeScript
    summary: Get the root menu of this object. (Not the immediate parent)
    syntax:
      parameters: []
      content: function getOwner()
      return:
        type:
          - vss-web-extension-sdk.MenuOwner
    type: method
  - uid: vss-web-extension-sdk.MenuItem.getParentMenu
    name: getParentMenu()
    children: []
    langs:
      - typeScript
    summary: Get the parent menu of this menu item.
    syntax:
      parameters: []
      content: function getParentMenu()
      return:
        type:
          - vss-web-extension-sdk.Menu
    type: method
  - uid: vss-web-extension-sdk.MenuItem.getTypeName
    name: getTypeName()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getTypeName()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.MenuItem.getTypeName
    name: 'getTypeName(type?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
      content: 'function getTypeName(type?: any)'
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.MenuItem.initializeOptions
    name: 'initializeOptions(options?: MenuItemOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: vss-web-extension-sdk.MenuItemOptions
          type:
            - MenuItemOptions
          description: |+

          optional: true
      content: 'function initializeOptions(options?: MenuItemOptions)'
    type: method
  - uid: vss-web-extension-sdk.MenuItem.isDisposed
    name: isDisposed()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function isDisposed()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.MenuItem.isLabel
    name: isLabel()
    children: []
    langs:
      - typeScript
    summary: >-
      Returns if this menu item is a label.  Labels are menu items that aren't
      actions, like separators, but contain content, such as text.
          NOTE: Currently, Labels are implemented using separators.  However, there are plans to revisit this.
    syntax:
      parameters: []
      content: function isLabel()
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.MenuItem.isSelected
    name: isSelected()
    children: []
    langs:
      - typeScript
    summary: |-
      Returns the selected state of this menu item (not to be confused with the
      select() method's notion of state)
    syntax:
      parameters: []
      content: function isSelected()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.MenuItem.constructor
    name: 'MenuItem(options?: MenuItemOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: vss-web-extension-sdk.MenuItemOptions
          type:
            - MenuItemOptions
          description: |+

          optional: true
      content: 'new MenuItem(options?: MenuItemOptions)'
      return:
        type:
          - vss-web-extension-sdk.MenuItem
    type: constructor
  - uid: vss-web-extension-sdk.MenuItem.registerEnhancement
    name: >-
      registerEnhancement(type?: function, selector?: string, options?:
      TOptions, errorCallback?: IErrorCallback, enhancementOptions?:
      EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - function
          description: ''
          optional: true
        - id: selector
          type:
            - string
          description: ''
          optional: true
        - id: options
          type:
            - TOptions
          description: ''
          optional: true
        - id: vss-web-extension-sdk.IErrorCallback
          type:
            - IErrorCallback
          description: |+

          optional: true
        - id: vss-web-extension-sdk.EnhancementOptions
          type:
            - EnhancementOptions
          description: ''
          optional: true
      content: >-
        function registerEnhancement(type?: function, selector?: string,
        options?: TOptions, errorCallback?: IErrorCallback, enhancementOptions?:
        EnhancementOptions)
    type: method
  - uid: vss-web-extension-sdk.MenuItem.registerJQueryWidget
    name: >-
      registerJQueryWidget(type?: any, widgetName?: any, widgetOptions?:
      TOptions, enhancementOptions?: EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: widgetName
          type:
            - any
          description: ''
          optional: true
        - id: widgetOptions
          type:
            - TOptions
          description: |+

          optional: true
        - id: vss-web-extension-sdk.EnhancementOptions
          type:
            - EnhancementOptions
          description: ''
          optional: true
      content: >-
        function registerJQueryWidget(type?: any, widgetName?: any,
        widgetOptions?: TOptions, enhancementOptions?: EnhancementOptions)
    type: method
  - uid: vss-web-extension-sdk.MenuItem.removeHighlight
    name: removeHighlight()
    children: []
    langs:
      - typeScript
    summary: Called to remove all highlighting on the button
    syntax:
      parameters: []
      content: function removeHighlight()
    type: method
  - uid: vss-web-extension-sdk.MenuItem.removePressedHighlight
    name: removePressedHighlight()
    children: []
    langs:
      - typeScript
    summary: Called to make the button appear to be 'pressed'
    syntax:
      parameters: []
      content: function removePressedHighlight()
    type: method
  - uid: vss-web-extension-sdk.MenuItem.setAttribute
    name: 'setAttribute(attribute: string, value: function, element?: JQuery)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets the attribute for the current control using the specified attribute
      name, value on the specified element.

      If no element specified, default element is used.
    syntax:
      parameters:
        - id: attribute
          type:
            - string
          description: Attribute name to set value.
        - id: value
          type:
            - function
          description: Attribute value to set.
        - id: element
          type:
            - JQuery
          description: |
            Element to apply the attribute (default is root element).
          optional: true
      content: >-
        function setAttribute(attribute: string, value: function, element?:
        JQuery)
    type: method
  - uid: vss-web-extension-sdk.MenuItem.setEnhancementOptions
    name: 'setEnhancementOptions(enhancementOptions: EnhancementOptions)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets options related to the creation of this control or enhancement of an
      element as this control.

      Note: Options are merged.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.EnhancementOptions
          type:
            - EnhancementOptions
          description: ''
      content: 'function setEnhancementOptions(enhancementOptions: EnhancementOptions)'
    type: method
  - uid: vss-web-extension-sdk.MenuItem.setIsHidden
    name: 'setIsHidden(value: boolean)'
    children: []
    langs:
      - typeScript
    summary: >-
      Even if this is set to false, the menu item may be hidden for other
      reasons. See isHidden().
    syntax:
      parameters:
        - id: value
          type:
            - boolean
          description: |+

      content: 'function setIsHidden(value: boolean)'
    type: method
  - uid: vss-web-extension-sdk.MenuItem.setRole
    name: 'setRole(role: string, element?: JQuery)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets the role for the current control using the specified role value on
      the specified element.

      If no element specified, default element is used.
    syntax:
      parameters:
        - id: role
          type:
            - string
          description: Role to assign.
        - id: element
          type:
            - JQuery
          description: |
            Element to apply the role (default is root element).
          optional: true
      content: 'function setRole(role: string, element?: JQuery)'
    type: method
  - uid: vss-web-extension-sdk.MenuItem.showHoverHighlight
    name: showHoverHighlight()
    children: []
    langs:
      - typeScript
    summary: Called to show the hover highlight the button
    syntax:
      parameters: []
      content: function showHoverHighlight()
    type: method
  - uid: vss-web-extension-sdk.MenuItem.showPressedHighlight
    name: showPressedHighlight()
    children: []
    langs:
      - typeScript
    summary: Called to make the button appear to be 'pressed'
    syntax:
      parameters: []
      content: function showPressedHighlight()
    type: method
  - uid: vss-web-extension-sdk.MenuItem.updateText
    name: 'updateText(text: string)'
    children: []
    langs:
      - typeScript
    summary: |-
      Updates the text of a menu item using either the specified text or
      the function provided in the options
    syntax:
      parameters:
        - id: text
          type:
            - string
          description: |
            New text to be displayed
      content: 'function updateText(text: string)'
    type: method
  - uid: vss-web-extension-sdk.MenuItem.updateTitle
    name: 'updateTitle(title: string)'
    children: []
    langs:
      - typeScript
    summary: |-
      Updates the title of a menu item using either the specified text or
      the function provided in the options
    syntax:
      parameters:
        - id: title
          type:
            - string
          description: ''
      content: 'function updateTitle(title: string)'
    type: method
  - uid: vss-web-extension-sdk.MenuItem._bind
    name: '_bind(element?: any, eventType?: any, handler?: any, track?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - any
          description: ''
          optional: true
        - id: eventType
          type:
            - any
          description: ''
          optional: true
        - id: handler
          type:
            - any
          description: ''
          optional: true
        - id: track
          type:
            - any
          description: |+

          optional: true
      content: >-
        function _bind(element?: any, eventType?: any, handler?: any, track?:
        any)
      return:
        type:
          - vss-web-extension-sdk.Enhancement
    type: method
  - uid: vss-web-extension-sdk.MenuItem._enhance
    name: '_enhance(element: JQuery)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - JQuery
          description: |+

      content: 'function _enhance(element: JQuery)'
    type: method
  - uid: vss-web-extension-sdk.MenuItem._ensureInitialized
    name: _ensureInitialized()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function _ensureInitialized()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.MenuItem._fire
    name: '_fire(element?: any, eventType?: any, args?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - any
          description: ''
          optional: true
        - id: eventType
          type:
            - any
          description: ''
          optional: true
        - id: args
          type:
            - any
          description: |+

          optional: true
      content: 'function _fire(element?: any, eventType?: any, args?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.MenuItem._fireChange
    name: '_fireChange(sender?: any)'
    children: []
    langs:
      - typeScript
    summary: Fires the change event for the control immediately
    syntax:
      parameters:
        - id: sender
          type:
            - any
          description: |
            Source element of the event
          optional: true
      content: 'function _fireChange(sender?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.MenuItem._getEventNameSpace
    name: _getEventNameSpace()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function _getEventNameSpace()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.MenuItem._getInDomPromise
    name: _getInDomPromise()
    children: []
    langs:
      - typeScript
    summary: |-
      Get a promise that is resolved once the containing element for this
      control has been added to the DOM hierarchy.
    syntax:
      parameters: []
      content: function _getInDomPromise()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.MenuItem._getUniqueId
    name: _getUniqueId()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function _getUniqueId()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.MenuItem._setElement
    name: '_setElement(element: JQuery)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - JQuery
          description: |+

      content: 'function _setElement(element: JQuery)'
    type: method
  - uid: vss-web-extension-sdk.MenuItem._setId
    name: '_setId(id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: id
          type:
            - string
          description: |+

      content: 'function _setId(id: string)'
    type: method
  - uid: vss-web-extension-sdk.MenuItem._unbind
    name: '_unbind(element?: any, eventType?: any, handler?: any, track?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - any
          description: ''
          optional: true
        - id: eventType
          type:
            - any
          description: ''
          optional: true
        - id: handler
          type:
            - any
          description: ''
          optional: true
        - id: track
          type:
            - any
          description: |+

          optional: true
      content: >-
        function _unbind(element?: any, eventType?: any, handler?: any, track?:
        any)
      return:
        type:
          - vss-web-extension-sdk.Enhancement
    type: method
  - uid: vss-web-extension-sdk.MenuItem._updateContributedMenuItems
    name: '_updateContributedMenuItems(updatedItems: function)'
    children: []
    langs:
      - typeScript
    summary: Update contributed menu items that have already been added to the menu.
    syntax:
      parameters:
        - id: updatedItems
          type:
            - function
          description: ''
      content: 'function _updateContributedMenuItems(updatedItems: function)'
    type: method
