### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem
    name: MenuItem
    fullName: MenuItem
    children:
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.collapse
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.deselect
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.enhancementTypeName
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.escaped
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.execute
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.executeAction
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.focusPin
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getAction
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getAriaRole
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getCommandId
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getCommandState
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getIndex
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getParentMenu
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getScopedCommandId
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getSubMenu
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.hasAction
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.hasSubMenu
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.hideSiblings
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.hideSubMenu
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.initialize
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.initializeOptions
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isDecorated
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isDefault
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isEnabled
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isFocusable
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isHidden
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isLabel
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isPinnable
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isPinned
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isSelected
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isSeparator
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isToggled
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.constructor
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.removeFocus
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.removeHighlight
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.removePressedHighlight
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.select
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.setFocus
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.setIndex
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.setIsHidden
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.showHoverHighlight
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.showPressedHighlight
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.showSubMenu
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.toggleIsPinned
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.tryShowSubMenu
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.update
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.updateItems
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.updateText
      - vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.updateTitle
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: >-
        @vss-web-extension-sdk.VSS.Controls.Menus.MenuBase<@vss-web-extension-sdk.VSS.Controls.Menus.MenuItemOptions>
    source:
      path: vss.d.ts
      startLine: 13807
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Controls/Menus
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.collapse
    name: 'collapse(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function collapse(options?: any)'
      parameters:
        - id: options
          type:
            - any
          description: ''
          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.deselect
    name: deselect()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function deselect()
      parameters: []
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.enhancementTypeName
    name: enhancementTypeName
    fullName: enhancementTypeName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: static string enhancementTypeName
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.escaped
    name: escaped()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function escaped()
      parameters: []
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.execute
    name: 'execute(options?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function execute(options?: function)'
      parameters:
        - id: options
          type:
            - function
          description: |+

          optional: true
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.executeAction
    name: 'executeAction(args?: any, e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function executeAction(args?: any, e?: JQueryEventObject)'
      parameters:
        - id: args
          type:
            - any
          description: ''
          optional: true
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.focusPin
    name: 'focusPin(value?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function focusPin(value?: boolean)'
      parameters:
        - id: value
          type:
            - boolean
          description: ''
          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getAction
    name: getAction()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getAction()
      parameters: []
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getAriaRole
    name: getAriaRole()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getAriaRole()
      parameters: []
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getCommandId
    name: getCommandId()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getCommandId()
      parameters: []
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getCommandState
    name: 'getCommandState(commandId?: string, context?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getCommandState(commandId?: string, context?: any)'
      parameters:
        - id: commandId
          type:
            - string
          description: ''
          optional: true
        - id: context
          type:
            - any
          description: ''
          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getIndex
    name: getIndex()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getIndex()
      parameters: []
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getParentMenu
    name: getParentMenu()
    children: []
    langs:
      - typeScript
    summary: Get the parent menu of this menu item.
    syntax:
      content: function getParentMenu()
      parameters: []
      return:
        type:
          - >-
            @vss-web-extension-sdk.VSS.Controls.Menus.Menu<@vss-web-extension-sdk.VSS.Controls.Menus.MenuOptions>
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getScopedCommandId
    name: 'getScopedCommandId(id: string, scope: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function getScopedCommandId(id: string, scope: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
        - id: scope
          type:
            - string
          description: ''
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.getSubMenu
    name: 'getSubMenu(create?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getSubMenu(create?: boolean)'
      parameters:
        - id: create
          type:
            - boolean
          description: ''
          optional: true
      return:
        type:
          - >-
            @vss-web-extension-sdk.VSS.Controls.Menus.Menu<@vss-web-extension-sdk.VSS.Controls.Menus.MenuOptions>
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.hasAction
    name: hasAction()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function hasAction()
      parameters: []
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.hasSubMenu
    name: hasSubMenu()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function hasSubMenu()
      parameters: []
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.hideSiblings
    name: 'hideSiblings(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function hideSiblings(options?: any)'
      parameters:
        - id: options
          type:
            - any
          description: ''
          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.hideSubMenu
    name: 'hideSubMenu(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function hideSubMenu(options?: any)'
      parameters:
        - id: options
          type:
            - any
          description: ''
          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.initialize
    name: initialize()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function initialize()
      parameters: []
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.initializeOptions
    name: 'initializeOptions(options?: MenuItemOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function initializeOptions(options?: MenuItemOptions)'
      parameters:
        - id: options
          type:
            - '@vss-web-extension-sdk.VSS.Controls.Menus.MenuItemOptions'
          description: |+

          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isDecorated
    name: isDecorated()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isDecorated()
      parameters: []
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isDefault
    name: isDefault()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isDefault()
      parameters: []
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isEnabled
    name: isEnabled()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isEnabled()
      parameters: []
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isFocusable
    name: isFocusable()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isFocusable()
      parameters: []
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isHidden
    name: isHidden()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isHidden()
      parameters: []
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isLabel
    name: isLabel()
    children: []
    langs:
      - typeScript
    summary: >-
      Returns if this menu item is a label.  Labels are menu items that aren't
      actions, like separators, but contain content, such as text.
          NOTE: Currently, Labels are implemented using separators.  However, there are plans to revisit this.
    syntax:
      content: function isLabel()
      parameters: []
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isPinnable
    name: isPinnable()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isPinnable()
      parameters: []
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isPinned
    name: isPinned()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isPinned()
      parameters: []
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isSelected
    name: isSelected()
    children: []
    langs:
      - typeScript
    summary: |-
      Returns the selected state of this menu item (not to be confused with the
      select() method's notion of state)
    syntax:
      content: function isSelected()
      parameters: []
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isSeparator
    name: isSeparator()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isSeparator()
      parameters: []
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.isToggled
    name: isToggled()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isToggled()
      parameters: []
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.constructor
    name: 'MenuItem(options?: MenuItemOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new MenuItem(options?: MenuItemOptions)'
      parameters:
        - id: options
          type:
            - '@vss-web-extension-sdk.VSS.Controls.Menus.MenuItemOptions'
          description: |+

          optional: true
    type: constructor
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.removeFocus
    name: removeFocus()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function removeFocus()
      parameters: []
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.removeHighlight
    name: removeHighlight()
    children: []
    langs:
      - typeScript
    summary: Called to remove all highlighting on the button
    syntax:
      content: function removeHighlight()
      parameters: []
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.removePressedHighlight
    name: removePressedHighlight()
    children: []
    langs:
      - typeScript
    summary: Called to make the button appear to be 'pressed'
    syntax:
      content: function removePressedHighlight()
      parameters: []
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.select
    name: 'select(ignoreFocus?: boolean, setKeyboardFocus?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function select(ignoreFocus?: boolean, setKeyboardFocus?: boolean)'
      parameters:
        - id: ignoreFocus
          type:
            - boolean
          description: ''
          optional: true
        - id: setKeyboardFocus
          type:
            - boolean
          description: ''
          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.setFocus
    name: 'setFocus(setKeyboardFocus?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setFocus(setKeyboardFocus?: boolean)'
      parameters:
        - id: setKeyboardFocus
          type:
            - boolean
          description: ''
          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.setIndex
    name: 'setIndex(value: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setIndex(value: number)'
      parameters:
        - id: value
          type:
            - number
          description: ''
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.setIsHidden
    name: 'setIsHidden(value: boolean)'
    children: []
    langs:
      - typeScript
    summary: >-
      Set to true to hide this menu item.

      Even if this is set to false, the menu item may be hidden for other
      reasons. See isHidden().
    syntax:
      content: 'function setIsHidden(value: boolean)'
      parameters:
        - id: value
          type:
            - boolean
          description: |+

    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.showHoverHighlight
    name: showHoverHighlight()
    children: []
    langs:
      - typeScript
    summary: Called to show the hover highlight the button
    syntax:
      content: function showHoverHighlight()
      parameters: []
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.showPressedHighlight
    name: showPressedHighlight()
    children: []
    langs:
      - typeScript
    summary: Called to make the button appear to be 'pressed'
    syntax:
      content: function showPressedHighlight()
      parameters: []
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.showSubMenu
    name: 'showSubMenu(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function showSubMenu(options?: any)'
      parameters:
        - id: options
          type:
            - any
          description: ''
          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.toggleIsPinned
    name: 'toggleIsPinned(isPinned?: boolean, options?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function toggleIsPinned(isPinned?: boolean, options?: function)'
      parameters:
        - id: isPinned
          type:
            - boolean
          description: ''
          optional: true
        - id: options
          type:
            - function
          description: ''
          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.tryShowSubMenu
    name: 'tryShowSubMenu(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function tryShowSubMenu(options?: any)'
      parameters:
        - id: options
          type:
            - any
          description: ''
          optional: true
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.update
    name: 'update(item: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(item: any)'
      parameters:
        - id: item
          type:
            - any
          description: ''
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.updateItems
    name: 'updateItems(items: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateItems(items: any)'
      parameters:
        - id: items
          type:
            - any
          description: ''
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.updateText
    name: 'updateText(text: string)'
    children: []
    langs:
      - typeScript
    summary: |-
      Updates the text of a menu item using either the specified text or
      the function provided in the options
    syntax:
      content: 'function updateText(text: string)'
      parameters:
        - id: text
          type:
            - string
          description: |
            New text to be displayed
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Menus.MenuItem.updateTitle
    name: 'updateTitle(title: string)'
    children: []
    langs:
      - typeScript
    summary: |-
      Updates the title of a menu item using either the specified text or
      the function provided in the options
    syntax:
      content: 'function updateTitle(title: string)'
      parameters:
        - id: title
          type:
            - string
          description: ''
    type: method
