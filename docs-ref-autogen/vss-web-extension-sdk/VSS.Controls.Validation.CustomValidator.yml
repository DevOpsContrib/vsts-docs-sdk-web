### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator
    name: CustomValidator
    fullName: CustomValidator
    children:
      - >-
        vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator.constructor
      - vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator.getMessage
      - >-
        vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator.initializeOptions
      - vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator.isValid
      - >-
        vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator.optionsPrefix
      - >-
        vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator.setValidate
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      - '@vss-web-extension-sdk.VSS.Controls.Validation.BaseValidator<TOptions>'
    package: vss-web-extension-sdk
    module: VSS/Controls/Validation
  - uid: vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator.constructor
    name: 'CustomValidator(options?: TOptions)'
    children: []
    langs:
      - typeScript
    summary: >-
      A validator which checks the text in the input by passing it to a
      function,
          which then returns true if the input is valid, and false if it is invalid.
    syntax:
      parameters:
        - id: options
          type:
            - TOptions
          description: |+
            Options to apply to the validator:
                message: A message logged by the validation summary if the input is invalid / string
                testEmptyString: A boolean which indicates whether or not to test the empty string / boolean
                validate: The function to validate the input against

          optional: true
      content: 'new CustomValidator(options?: TOptions)'
    type: constructor
  - uid: vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator.getMessage
    name: getMessage()
    children: []
    langs:
      - typeScript
    summary: >-
      Gets the message that would be logged in the validation summary if the
      input were to be invalid
    syntax:
      parameters: []
      content: function getMessage()
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator.initializeOptions
    name: 'initializeOptions(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: options
          type:
            - any
          description: |+

          optional: true
      content: 'function initializeOptions(options?: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator.isValid
    name: isValid()
    children: []
    langs:
      - typeScript
    summary: Tests if the current input satisfies the function
    syntax:
      parameters: []
      content: function isValid()
      return:
        type:
          - boolean
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator.optionsPrefix
    name: optionsPrefix
    fullName: optionsPrefix
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Validation.CustomValidator.setValidate
    name: 'setValidate(newValidateFunction: any)'
    children: []
    langs:
      - typeScript
    summary: Set the function the validator tests
    syntax:
      parameters:
        - id: newValidateFunction
          type:
            - any
          description: ''
      content: 'function setValidate(newValidateFunction: any)'
    type: method
