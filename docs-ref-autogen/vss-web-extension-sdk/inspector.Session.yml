### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.inspector.Session
    name: Session
    fullName: Session
    children:
      - vss-web-extension-sdk.inspector.Session.addListener
      - vss-web-extension-sdk.inspector.Session.connect
      - vss-web-extension-sdk.inspector.Session.disconnect
      - vss-web-extension-sdk.inspector.Session.emit
      - vss-web-extension-sdk.inspector.Session.on
      - vss-web-extension-sdk.inspector.Session.once
      - vss-web-extension-sdk.inspector.Session.post
      - vss-web-extension-sdk.inspector.Session.prependListener
      - vss-web-extension-sdk.inspector.Session.prependOnceListener
      - vss-web-extension-sdk.inspector.Session.constructor
    langs:
      - typeScript
    type: class
    summary: >-
      The inspector.Session is used for dispatching messages to the V8 inspector
      back-end and receiving message responses and notifications.
    extends:
      - '@vss-web-extension-sdk.events.internal.EventEmitter'
    package: vss-web-extension-sdk
    module: inspector
  - uid: vss-web-extension-sdk.inspector.Session.addListener
    name: 'addListener(event: string, listener: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - function
          description: ''
      content: 'function addListener(event: string, listener: function)'
      return:
        type:
          - this
    type: method
  - uid: vss-web-extension-sdk.inspector.Session.connect
    name: connect()
    children: []
    langs:
      - typeScript
    summary: >-
      Connects a session to the inspector back-end. An exception will be thrown
      if there is already a connected session established either through the API
      or by a front-end connected to the Inspector WebSocket port.
    syntax:
      parameters: []
      content: function connect()
    type: method
  - uid: vss-web-extension-sdk.inspector.Session.disconnect
    name: disconnect()
    children: []
    langs:
      - typeScript
    summary: >-
      Immediately close the session. All pending message callbacks will be
      called with an error. session.connect() will need to be called to be able
      to send messages again. Reconnected session will lose all inspector state,
      such as enabled agents or configured breakpoints.
    syntax:
      parameters: []
      content: function disconnect()
    type: method
  - uid: vss-web-extension-sdk.inspector.Session.emit
    name: 'emit(event: string, args: any[])'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: args
          type:
            - 'any[]'
          description: ''
      content: 'function emit(event: string, args: any[])'
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.inspector.Session.on
    name: 'on(event: string, listener: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - function
          description: ''
      content: 'function on(event: string, listener: function)'
      return:
        type:
          - this
    type: method
  - uid: vss-web-extension-sdk.inspector.Session.once
    name: 'once(event: string, listener: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - function
          description: ''
      content: 'function once(event: string, listener: function)'
      return:
        type:
          - this
    type: method
  - uid: vss-web-extension-sdk.inspector.Session.post
    name: 'post(method: string, params?: __type, callback?: function)'
    children: []
    langs:
      - typeScript
    summary: >-
      Posts a message to the inspector back-end. callback will be notified when
      a response is received. callback is a function that accepts two optional
      arguments - error and message-specific result.
    syntax:
      parameters:
        - id: method
          type:
            - string
          description: ''
        - id: params
          type:
            - __type
          description: ''
          optional: true
        - id: callback
          type:
            - function
          description: ''
          optional: true
      content: 'function post(method: string, params?: __type, callback?: function)'
    type: method
  - uid: vss-web-extension-sdk.inspector.Session.prependListener
    name: 'prependListener(event: string, listener: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - function
          description: ''
      content: 'function prependListener(event: string, listener: function)'
      return:
        type:
          - this
    type: method
  - uid: vss-web-extension-sdk.inspector.Session.prependOnceListener
    name: 'prependOnceListener(event: string, listener: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - function
          description: ''
      content: 'function prependOnceListener(event: string, listener: function)'
      return:
        type:
          - this
    type: method
  - uid: vss-web-extension-sdk.inspector.Session.constructor
    name: Session()
    children: []
    langs:
      - typeScript
    summary: >-
      Create a new instance of the inspector.Session class. The inspector
      session needs to be connected through session.connect() before the
      messages can be dispatched to the inspector backend.
    syntax:
      parameters: []
      content: new Session()
    type: constructor
