### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.IPromise
    name: IPromise
    fullName: IPromise<T>
    children:
      - vss-web-extension-sdk.IPromise.then
      - vss-web-extension-sdk.IPromise.then_1
      - vss-web-extension-sdk.IPromise.then_2
      - vss-web-extension-sdk.IPromise.then_3
    langs:
      - typeScript
    type: interface
    summary: >-
      A promise represents the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its then method,

      which registers callbacks to receive either a promiseâ€™s eventual value or
      the reason why the promise cannot be fulfilled.
    source:
      path: vss.d.ts
      startLine: 108
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: Global
  - uid: vss-web-extension-sdk.IPromise.then
    name: then
    children: []
    langs:
      - typeScript
    summary: >-
      Then method which accepts a fulfill delegate which returns a promise or
      nothing and a reject delegate which returns a promise or nothing. Then
      returns a new promise.
    syntax:
      content: >-
        function then<U>(onFulfill: (value: T) => IPromise, onReject?: (reason:
        any) => IPromise)
      parameters:
        - id: onFulfill
          type:
            - '(value: T) => IPromise'
          description: ''
        - id: onReject
          type:
            - '(reason: any) => IPromise'
          description: ''
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<U>'
    type: method
  - uid: vss-web-extension-sdk.IPromise.then_1
    name: then
    children: []
    langs:
      - typeScript
    summary: >-
      Then method which accepts a fulfill delegate which returns a promise or
      nothing and a reject delegate which returns a promise or nothing. Then
      returns a new promise.
    syntax:
      content: >-
        function then<U>(onFulfill: (value: T) => IPromise, onReject?: (reason:
        any) => U)
      parameters:
        - id: onFulfill
          type:
            - '(value: T) => IPromise'
          description: ''
        - id: onReject
          type:
            - '(reason: any) => U'
          description: ''
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<U>'
    type: method
  - uid: vss-web-extension-sdk.IPromise.then_2
    name: then
    children: []
    langs:
      - typeScript
    summary: >-
      Then method which accepts a fulfill delegate which returns a promise or
      nothing and a reject delegate which returns a promise or nothing. Then
      returns a new promise.
    syntax:
      content: >-
        function then<U>(onFulfill: (value: T) => U, onReject?: (reason: any) =>
        IPromise)
      parameters:
        - id: onFulfill
          type:
            - '(value: T) => U'
          description: ''
        - id: onReject
          type:
            - '(reason: any) => IPromise'
          description: ''
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<U>'
    type: method
  - uid: vss-web-extension-sdk.IPromise.then_3
    name: then
    children: []
    langs:
      - typeScript
    summary: >-
      Then method which accepts a fulfill delegate which returns a promise or
      nothing and a reject delegate which returns a promise or nothing. Then
      returns a new promise.
    syntax:
      content: >-
        function then<U>(onFulfill: (value: T) => U, onReject?: (reason: any) =>
        U)
      parameters:
        - id: onFulfill
          type:
            - '(value: T) => U'
          description: ''
        - id: onReject
          type:
            - '(reason: any) => U'
          description: ''
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<U>'
    type: method
