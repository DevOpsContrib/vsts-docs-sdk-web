### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4
    name: CommonMethods2To4
    fullName: CommonMethods2To4
    children:
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.constructor
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.createPullRequest
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.createPullRequestReviewer
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.createPullRequestReviewers
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.createPush
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.createRepository
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.deletePullRequestReviewer
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.deleteRepository
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBlob
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBlobContent
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBlobsZip
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBlobZip
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBranch
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBranches
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBranchStatsBatch
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getChanges
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getCommit
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getCommitDiffs
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getCommits
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getCommitsBatch
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getItem
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getItemContent
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getItems
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getItemsBatch
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getItemText
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getItemZip
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPullRequest
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPullRequestReviewer
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPullRequestReviewers
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPullRequests
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPullRequestsByProject
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPullRequestWorkItems
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPush
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPushCommits
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPushes
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getRefs
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getRepositories
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getRepository
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getTree
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getTreeZip
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.serviceInstanceId
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.updatePullRequest
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.updateRef
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.updateRefs
      - >-
        vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.updateRepository
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      - '@vss-web-extension-sdk.VSS.WebApi.RestClient.VssHttpClient'
    package: vss-web-extension-sdk
    module: TFS/VersionControl/GitRestClient
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.constructor
    name: >-
      CommonMethods2To4(rootRequestPath: string, options?:
      IVssHttpClientOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rootRequestPath
          type:
            - string
          description: ''
        - id: options
          type:
            - '@vss-web-extension-sdk.VSS.WebApi.RestClient.IVssHttpClientOptions'
          description: ''
          optional: true
      content: >-
        new CommonMethods2To4(rootRequestPath: string, options?:
        IVssHttpClientOptions)
    type: constructor
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.createPullRequest
    name: >-
      createPullRequest(gitPullRequestToCreate: GitPullRequest, repositoryId:
      string, project?: string, linkBranchWorkItems?: boolean,
      linkCommitWorkItems?: boolean, supportsIterations?: boolean)
    children: []
    langs:
      - typeScript
    summary: Create a git pull request
    syntax:
      parameters:
        - id: gitPullRequestToCreate
          type:
            - '@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPullRequest'
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: linkBranchWorkItems
          type:
            - boolean
          description: ''
          optional: true
        - id: linkCommitWorkItems
          type:
            - boolean
          description: ''
          optional: true
        - id: supportsIterations
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function createPullRequest(gitPullRequestToCreate: GitPullRequest,
        repositoryId: string, project?: string, linkBranchWorkItems?: boolean,
        linkCommitWorkItems?: boolean, supportsIterations?: boolean)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPullRequest>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.createPullRequestReviewer
    name: >-
      createPullRequestReviewer(reviewer: IdentityRefWithVote, repositoryId:
      string, pullRequestId: number, reviewerId: string, project?: string)
    children: []
    langs:
      - typeScript
    summary: Adds a reviewer to a git pull request
    syntax:
      parameters:
        - id: reviewer
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.IdentityRefWithVote
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: reviewerId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createPullRequestReviewer(reviewer: IdentityRefWithVote,
        repositoryId: string, pullRequestId: number, reviewerId: string,
        project?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.IdentityRefWithVote>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.createPullRequestReviewers
    name: >-
      createPullRequestReviewers(reviewers: IdentityRef[], repositoryId: string,
      pullRequestId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: Adds reviewers to a git pull request
    syntax:
      parameters:
        - id: reviewers
          type:
            - '@vss-web-extension-sdk.VSS.WebApi.Contracts.IdentityRef[]'
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createPullRequestReviewers(reviewers: IdentityRef[],
        repositoryId: string, pullRequestId: number, project?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.IdentityRefWithVote[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.createPush
    name: 'createPush(push: GitPush, repositoryId: string, project?: string)'
    children: []
    langs:
      - typeScript
    summary: Push changes to the repository.
    syntax:
      parameters:
        - id: push
          type:
            - '@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPush'
          description: ''
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            a project-scoped route must be used.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createPush(push: GitPush, repositoryId: string, project?:
        string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPush>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.createRepository
    name: 'createRepository(gitRepositoryToCreate: GitRepository, project?: string)'
    children: []
    langs:
      - typeScript
    summary: Create a git repository
    syntax:
      parameters:
        - id: gitRepositoryToCreate
          type:
            - '@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitRepository'
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createRepository(gitRepositoryToCreate: GitRepository,
        project?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitRepository>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.deletePullRequestReviewer
    name: >-
      deletePullRequestReviewer(repositoryId: string, pullRequestId: number,
      reviewerId: string, project?: string)
    children: []
    langs:
      - typeScript
    summary: Removes a reviewer from a git pull request
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: reviewerId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function deletePullRequestReviewer(repositoryId: string, pullRequestId:
        number, reviewerId: string, project?: string)
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<void>'
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.deleteRepository
    name: 'deleteRepository(repositoryId: string, project?: string)'
    children: []
    langs:
      - typeScript
    summary: Delete a git repository
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: 'function deleteRepository(repositoryId: string, project?: string)'
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<void>'
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBlob
    name: >-
      getBlob(repositoryId: string, sha1: string, project?: string, download?:
      boolean, fileName?: string)
    children: []
    langs:
      - typeScript
    summary: Gets a single blob.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: sha1
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: fileName
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getBlob(repositoryId: string, sha1: string, project?: string,
        download?: boolean, fileName?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitBlobRef>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBlobContent
    name: >-
      getBlobContent(repositoryId: string, sha1: string, project?: string,
      download?: boolean, fileName?: string)
    children: []
    langs:
      - typeScript
    summary: Gets a single blob.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: sha1
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: fileName
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getBlobContent(repositoryId: string, sha1: string, project?:
        string, download?: boolean, fileName?: string)
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<ArrayBuffer>'
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBlobsZip
    name: >-
      getBlobsZip(blobIds: string[], repositoryId: string, project?: string,
      filename?: string)
    children: []
    langs:
      - typeScript
    summary: Gets one or more blobs in a zip file download.
    syntax:
      parameters:
        - id: blobIds
          type:
            - 'string[]'
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: filename
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getBlobsZip(blobIds: string[], repositoryId: string, project?:
        string, filename?: string)
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<ArrayBuffer>'
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBlobZip
    name: >-
      getBlobZip(repositoryId: string, sha1: string, project?: string,
      download?: boolean, fileName?: string)
    children: []
    langs:
      - typeScript
    summary: Gets a single blob.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: sha1
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: fileName
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getBlobZip(repositoryId: string, sha1: string, project?:
        string, download?: boolean, fileName?: string)
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<ArrayBuffer>'
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBranch
    name: >-
      getBranch(repositoryId: string, name: string, project?: string,
      baseVersionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: Retrieve statistics about a single branch.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: Friendly name or guid of repository
        - id: name
          type:
            - string
          description: Name of the branch
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: baseVersionDescriptor
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getBranch(repositoryId: string, name: string, project?: string,
        baseVersionDescriptor?: GitVersionDescriptor)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitBranchStats>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBranches
    name: >-
      getBranches(repositoryId: string, project?: string,
      baseVersionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: Retrieve statistics about all branches within a repository.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: Friendly name or guid of repository
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: baseVersionDescriptor
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getBranches(repositoryId: string, project?: string,
        baseVersionDescriptor?: GitVersionDescriptor)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitBranchStats[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getBranchStatsBatch
    name: >-
      getBranchStatsBatch(searchCriteria: GitQueryBranchStatsCriteria,
      repositoryId: string, project?: string)
    children: []
    langs:
      - typeScript
    summary: Retrieve statistics for multiple commits
    syntax:
      parameters:
        - id: searchCriteria
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitQueryBranchStatsCriteria
          description: ''
        - id: repositoryId
          type:
            - string
          description: Friendly name or guid of repository
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getBranchStatsBatch(searchCriteria:
        GitQueryBranchStatsCriteria, repositoryId: string, project?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitBranchStats[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getChanges
    name: >-
      getChanges(commitId: string, repositoryId: string, project?: string, top?:
      number, skip?: number)
    children: []
    langs:
      - typeScript
    summary: Retrieve changes for a particular commit.
    syntax:
      parameters:
        - id: commitId
          type:
            - string
          description: The id of the commit.
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: top
          type:
            - number
          description: The maximum number of changes to return.
          optional: true
        - id: skip
          type:
            - number
          description: The number of changes to skip.
          optional: true
      content: >-
        function getChanges(commitId: string, repositoryId: string, project?:
        string, top?: number, skip?: number)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitCommitChanges>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getCommit
    name: >-
      getCommit(commitId: string, repositoryId: string, project?: string,
      changeCount?: number)
    children: []
    langs:
      - typeScript
    summary: Retrieve a particular commit.
    syntax:
      parameters:
        - id: commitId
          type:
            - string
          description: The id of the commit.
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: changeCount
          type:
            - number
          description: The number of changes to include in the result.
          optional: true
      content: >-
        function getCommit(commitId: string, repositoryId: string, project?:
        string, changeCount?: number)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitCommit>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getCommitDiffs
    name: >-
      getCommitDiffs(repositoryId: string, project?: string, diffCommonCommit?:
      boolean, top?: number, skip?: number, baseVersionDescriptor?:
      GitBaseVersionDescriptor, targetVersionDescriptor?:
      GitTargetVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: Get differences in committed items between two commits.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: Friendly name or guid of repository
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: diffCommonCommit
          type:
            - boolean
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: Maximum number of changes to return
          optional: true
        - id: skip
          type:
            - number
          description: Number of changes to skip
          optional: true
        - id: baseVersionDescriptor
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitBaseVersionDescriptor
          description: ''
          optional: true
        - id: targetVersionDescriptor
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitTargetVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getCommitDiffs(repositoryId: string, project?: string,
        diffCommonCommit?: boolean, top?: number, skip?: number,
        baseVersionDescriptor?: GitBaseVersionDescriptor,
        targetVersionDescriptor?: GitTargetVersionDescriptor)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitCommitDiffs>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getCommits
    name: >-
      getCommits(repositoryId: string, searchCriteria: GitQueryCommitsCriteria,
      project?: string, skip?: number, top?: number)
    children: []
    langs:
      - typeScript
    summary: Retrieve git commits for a project
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: searchCriteria
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitQueryCommitsCriteria
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
      content: >-
        function getCommits(repositoryId: string, searchCriteria:
        GitQueryCommitsCriteria, project?: string, skip?: number, top?: number)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitCommitRef[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getCommitsBatch
    name: >-
      getCommitsBatch(searchCriteria: GitQueryCommitsCriteria, repositoryId:
      string, project?: string, skip?: number, top?: number, includeStatuses?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: Retrieve git commits for a project
    syntax:
      parameters:
        - id: searchCriteria
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitQueryCommitsCriteria
          description: Search options
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: includeStatuses
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getCommitsBatch(searchCriteria: GitQueryCommitsCriteria,
        repositoryId: string, project?: string, skip?: number, top?: number,
        includeStatuses?: boolean)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitCommitRef[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getItem
    name: >-
      getItem(repositoryId: string, path: string, project?: string, scopePath?:
      string, recursionLevel?: VersionControlRecursionType,
      includeContentMetadata?: boolean, latestProcessedChange?: boolean,
      download?: boolean, versionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content
      which is always returned as a download.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: ''
          optional: true
        - id: recursionLevel
          type:
            - VersionControlRecursionType
          description: ''
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: ''
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: ''
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: versionDescriptor
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getItem(repositoryId: string, path: string, project?: string,
        scopePath?: string, recursionLevel?: VersionControlRecursionType,
        includeContentMetadata?: boolean, latestProcessedChange?: boolean,
        download?: boolean, versionDescriptor?: GitVersionDescriptor)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitItem>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getItemContent
    name: >-
      getItemContent(repositoryId: string, path: string, project?: string,
      scopePath?: string, recursionLevel?: VersionControlRecursionType,
      includeContentMetadata?: boolean, latestProcessedChange?: boolean,
      download?: boolean, versionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content
      which is always returned as a download.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: ''
          optional: true
        - id: recursionLevel
          type:
            - VersionControlRecursionType
          description: ''
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: ''
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: ''
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: versionDescriptor
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getItemContent(repositoryId: string, path: string, project?:
        string, scopePath?: string, recursionLevel?:
        VersionControlRecursionType, includeContentMetadata?: boolean,
        latestProcessedChange?: boolean, download?: boolean, versionDescriptor?:
        GitVersionDescriptor)
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<ArrayBuffer>'
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getItems
    name: >-
      getItems(repositoryId: string, project?: string, scopePath?: string,
      recursionLevel?: VersionControlRecursionType, includeContentMetadata?:
      boolean, latestProcessedChange?: boolean, download?: boolean,
      includeLinks?: boolean, versionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a collection of items. The download
      parameter is to indicate whether the content should be available as a
      download or just sent as a stream in the response. Doesn't apply to zipped
      content which is always returned as a download.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: ''
          optional: true
        - id: recursionLevel
          type:
            - VersionControlRecursionType
          description: ''
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: ''
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: ''
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: ''
          optional: true
        - id: versionDescriptor
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getItems(repositoryId: string, project?: string, scopePath?:
        string, recursionLevel?: VersionControlRecursionType,
        includeContentMetadata?: boolean, latestProcessedChange?: boolean,
        download?: boolean, includeLinks?: boolean, versionDescriptor?:
        GitVersionDescriptor)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitItem[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getItemsBatch
    name: >-
      getItemsBatch(requestData: GitItemRequestData, repositoryId: string,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: >-
      Post for retrieving a creating a batch out of a set of items in a repo /
      project given a list of paths or a long path
    syntax:
      parameters:
        - id: requestData
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitItemRequestData
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getItemsBatch(requestData: GitItemRequestData, repositoryId:
        string, project?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitItem[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getItemText
    name: >-
      getItemText(repositoryId: string, path: string, project?: string,
      scopePath?: string, recursionLevel?: VersionControlRecursionType,
      includeContentMetadata?: boolean, latestProcessedChange?: boolean,
      download?: boolean, versionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content
      which is always returned as a download.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: ''
          optional: true
        - id: recursionLevel
          type:
            - VersionControlRecursionType
          description: ''
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: ''
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: ''
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: versionDescriptor
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getItemText(repositoryId: string, path: string, project?:
        string, scopePath?: string, recursionLevel?:
        VersionControlRecursionType, includeContentMetadata?: boolean,
        latestProcessedChange?: boolean, download?: boolean, versionDescriptor?:
        GitVersionDescriptor)
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<string>'
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getItemZip
    name: >-
      getItemZip(repositoryId: string, path: string, project?: string,
      scopePath?: string, recursionLevel?: VersionControlRecursionType,
      includeContentMetadata?: boolean, latestProcessedChange?: boolean,
      download?: boolean, versionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content
      which is always returned as a download.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: ''
          optional: true
        - id: recursionLevel
          type:
            - VersionControlRecursionType
          description: ''
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: ''
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: ''
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: versionDescriptor
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getItemZip(repositoryId: string, path: string, project?:
        string, scopePath?: string, recursionLevel?:
        VersionControlRecursionType, includeContentMetadata?: boolean,
        latestProcessedChange?: boolean, download?: boolean, versionDescriptor?:
        GitVersionDescriptor)
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<ArrayBuffer>'
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPullRequest
    name: >-
      getPullRequest(repositoryId: string, pullRequestId: number, project?:
      string, maxCommentLength?: number, skip?: number, top?: number,
      includeCommits?: boolean, includeWorkItemRefs?: boolean)
    children: []
    langs:
      - typeScript
    summary: Retrieve a pull request
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: maxCommentLength
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: includeCommits
          type:
            - boolean
          description: ''
          optional: true
        - id: includeWorkItemRefs
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getPullRequest(repositoryId: string, pullRequestId: number,
        project?: string, maxCommentLength?: number, skip?: number, top?:
        number, includeCommits?: boolean, includeWorkItemRefs?: boolean)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPullRequest>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPullRequestReviewer
    name: >-
      getPullRequestReviewer(repositoryId: string, pullRequestId: number,
      reviewerId: string, project?: string)
    children: []
    langs:
      - typeScript
    summary: Retrieve a reviewer from a pull request
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: reviewerId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestReviewer(repositoryId: string, pullRequestId:
        number, reviewerId: string, project?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.IdentityRefWithVote>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPullRequestReviewers
    name: >-
      getPullRequestReviewers(repositoryId: string, pullRequestId: number,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: Retrieve a pull request reviewers
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestReviewers(repositoryId: string, pullRequestId:
        number, project?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.IdentityRefWithVote[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPullRequests
    name: >-
      getPullRequests(repositoryId: string, searchCriteria:
      GitPullRequestSearchCriteria, project?: string, maxCommentLength?: number,
      skip?: number, top?: number)
    children: []
    langs:
      - typeScript
    summary: Query for pull requests
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: searchCriteria
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPullRequestSearchCriteria
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: maxCommentLength
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
      content: >-
        function getPullRequests(repositoryId: string, searchCriteria:
        GitPullRequestSearchCriteria, project?: string, maxCommentLength?:
        number, skip?: number, top?: number)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPullRequest[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPullRequestsByProject
    name: >-
      getPullRequestsByProject(project: string, searchCriteria:
      GitPullRequestSearchCriteria, maxCommentLength?: number, skip?: number,
      top?: number)
    children: []
    langs:
      - typeScript
    summary: Query pull requests by project
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: searchCriteria
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPullRequestSearchCriteria
          description: ''
        - id: maxCommentLength
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
      content: >-
        function getPullRequestsByProject(project: string, searchCriteria:
        GitPullRequestSearchCriteria, maxCommentLength?: number, skip?: number,
        top?: number)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPullRequest[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPullRequestWorkItems
    name: >-
      getPullRequestWorkItems(repositoryId: string, pullRequestId: number,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: Retrieve a pull request work items
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestWorkItems(repositoryId: string, pullRequestId:
        number, project?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.AssociatedWorkItem[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPush
    name: >-
      getPush(repositoryId: string, pushId: number, project?: string,
      includeCommits?: number, includeRefUpdates?: boolean)
    children: []
    langs:
      - typeScript
    summary: Retrieve a particular push.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: pushId
          type:
            - number
          description: The id of the push.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeCommits
          type:
            - number
          description: The number of commits to include in the result.
          optional: true
        - id: includeRefUpdates
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getPush(repositoryId: string, pushId: number, project?: string,
        includeCommits?: number, includeRefUpdates?: boolean)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPush>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPushCommits
    name: >-
      getPushCommits(repositoryId: string, pushId: number, project?: string,
      top?: number, skip?: number, includeLinks?: boolean)
    children: []
    langs:
      - typeScript
    summary: Retrieve a list of commits associated with a particular push.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: pushId
          type:
            - number
          description: The id of the push.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: top
          type:
            - number
          description: The maximum number of commits to return ("get the top x commits").
          optional: true
        - id: skip
          type:
            - number
          description: The number of commits to skip.
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getPushCommits(repositoryId: string, pushId: number, project?:
        string, top?: number, skip?: number, includeLinks?: boolean)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitCommitRef[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getPushes
    name: >-
      getPushes(repositoryId: string, project?: string, skip?: number, top?:
      number, searchCriteria?: GitPushSearchCriteria)
    children: []
    langs:
      - typeScript
    summary: Retrieves pushes associated with the specified repository.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: searchCriteria
          type:
            - >-
              @vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPushSearchCriteria
          description: ''
          optional: true
      content: >-
        function getPushes(repositoryId: string, project?: string, skip?:
        number, top?: number, searchCriteria?: GitPushSearchCriteria)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPush[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getRefs
    name: >-
      getRefs(repositoryId: string, project?: string, filter?: string,
      includeLinks?: boolean, includeStatuses?: boolean, includeMyBranches?:
      boolean, latestStatusesOnly?: boolean, peelTags?: boolean)
    children: []
    langs:
      - typeScript
    summary: Queries the provided repository for its refs and returns them.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: filter
          type:
            - string
          description: '[optional] A filter to apply to the refs.'
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: >-
            [optional] Specifies if referenceLinks should be included in the
            result. default is false.
          optional: true
        - id: includeStatuses
          type:
            - boolean
          description: >-
            [optional] Includes the first 1000 statuses of the commits the refs
            are pointing at as well. default is false.
          optional: true
        - id: includeMyBranches
          type:
            - boolean
          description: >-
            [optional] Includes only branches that the user owns, the branches
            the user favorites, and the default branch. Cannot be combined with
            the filter parameter.
          optional: true
        - id: latestStatusesOnly
          type:
            - boolean
          description: ''
          optional: true
        - id: peelTags
          type:
            - boolean
          description: >-
            [optional] Annotated tags will populate the PeeledObjectId property.
            default is false.
          optional: true
      content: >-
        function getRefs(repositoryId: string, project?: string, filter?:
        string, includeLinks?: boolean, includeStatuses?: boolean,
        includeMyBranches?: boolean, latestStatusesOnly?: boolean, peelTags?:
        boolean)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitRef[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getRepositories
    name: >-
      getRepositories(project?: string, includeLinks?: boolean, includeAllUrls?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: Retrieve git repositories.
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: ''
          optional: true
        - id: includeAllUrls
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getRepositories(project?: string, includeLinks?: boolean,
        includeAllUrls?: boolean)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitRepository[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getRepository
    name: 'getRepository(repositoryId: string, project?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: 'function getRepository(repositoryId: string, project?: string)'
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitRepository>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getTree
    name: >-
      getTree(repositoryId: string, sha1: string, project?: string, projectId?:
      string, recursive?: boolean, fileName?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: sha1
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: ''
          optional: true
        - id: recursive
          type:
            - boolean
          description: ''
          optional: true
        - id: fileName
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getTree(repositoryId: string, sha1: string, project?: string,
        projectId?: string, recursive?: boolean, fileName?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitTreeRef>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.getTreeZip
    name: >-
      getTreeZip(repositoryId: string, sha1: string, project?: string,
      projectId?: string, recursive?: boolean, fileName?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: sha1
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: ''
          optional: true
        - id: recursive
          type:
            - boolean
          description: ''
          optional: true
        - id: fileName
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getTreeZip(repositoryId: string, sha1: string, project?:
        string, projectId?: string, recursive?: boolean, fileName?: string)
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<ArrayBuffer>'
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.serviceInstanceId
    name: serviceInstanceId
    fullName: serviceInstanceId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.updatePullRequest
    name: >-
      updatePullRequest(gitPullRequestToUpdate: GitPullRequest, repositoryId:
      string, pullRequestId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: Updates a pull request
    syntax:
      parameters:
        - id: gitPullRequestToUpdate
          type:
            - '@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPullRequest'
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function updatePullRequest(gitPullRequestToUpdate: GitPullRequest,
        repositoryId: string, pullRequestId: number, project?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitPullRequest>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.updateRef
    name: >-
      updateRef(newRefInfo: GitRefUpdate, repositoryId: string, filter: string,
      project?: string, projectId?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: newRefInfo
          type:
            - '@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitRefUpdate'
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: filter
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: ''
          optional: true
      content: >-
        function updateRef(newRefInfo: GitRefUpdate, repositoryId: string,
        filter: string, project?: string, projectId?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitRef>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.updateRefs
    name: >-
      updateRefs(refUpdates: GitRefUpdate[], repositoryId: string, project?:
      string, projectId?: string)
    children: []
    langs:
      - typeScript
    summary: Creates or updates refs with the given information
    syntax:
      parameters:
        - id: refUpdates
          type:
            - '@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitRefUpdate[]'
          description: List of ref updates to attempt to perform
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: The id of the project.
          optional: true
      content: >-
        function updateRefs(refUpdates: GitRefUpdate[], repositoryId: string,
        project?: string, projectId?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitRefUpdateResult[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.TFS.VersionControl.GitRestClient.CommonMethods2To4.updateRepository
    name: >-
      updateRepository(newRepositoryInfo: GitRepository, repositoryId: string,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: >-
      Updates the Git repository with the single populated change in the
      specified repository information.
    syntax:
      parameters:
        - id: newRepositoryInfo
          type:
            - '@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitRepository'
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function updateRepository(newRepositoryInfo: GitRepository,
        repositoryId: string, project?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.TFS.VersionControl.Contracts.GitRepository>
    type: method
