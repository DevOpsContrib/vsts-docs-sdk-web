### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Diag.Debug
    name: Debug
    fullName: Debug
    children:
      - vss-web-extension-sdk.VSS.Diag.Debug.assert
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsArray
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsBool
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsDate
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsFunction
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsInteger
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsJQueryObject
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsNotNull
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsNotUndefined
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsNumber
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsObject
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsString
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsStringNotEmpty
      - vss-web-extension-sdk.VSS.Diag.Debug.assertIsType
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsArray
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsBool
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsDate
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsFunction
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsInteger
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsJQueryObject
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsNotNull
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsNotUndefined
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsNumber
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsObject
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsString
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsStringNotEmpty
      - vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsType
      - vss-web-extension-sdk.VSS.Diag.Debug.fail
      - vss-web-extension-sdk.VSS.Diag.Debug.getTypeName
      - vss-web-extension-sdk.VSS.Diag.Debug.logInfo
      - vss-web-extension-sdk.VSS.Diag.Debug.logVerbose
      - vss-web-extension-sdk.VSS.Diag.Debug.setDisplayCallers
    langs:
      - typeScript
    type: class
    summary: >-
      Any function calls to any members of this class will be stripped out in
      minified version, see WebPlatform.targets file AjaxMin task call with
      -debug switch.

      NOTE: You must use Diag or VSS_Diag as alias for the import statment for
      it to work.

      e.g. import Diag = require("VSS/Diag")

      This will be useful as follows

      1) We will not have overhead of extra function calls in release version
      specially in the functions that are called many-many times (e.g. event
      handlers/processors)

      2) The size of minified version will not be bloated with the size of
      message strings and function names

      3) While debugging will still have flexibility to see the logs depending
      on the Log level
    source:
      path: vss.d.ts
      startLine: 18724
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assert
    name: assert
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Checks for a condition, and if the condition is false, displays a message
      and prompts the user to break into the debuggeription
    syntax:
      content: 'static function assert(condition: boolean, message?: string)'
      parameters:
        - id: condition
          type:
            - boolean
          description: >-
            true to continue to execute code; false to display message and break
            into the debugger
        - id: message
          type:
            - string
          description: |
            (Optional) The message to display. The default is an empty string
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsArray
    name: assertIsArray
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is an array.
    syntax:
      content: >-
        static function assertIsArray(value: any, message?: string,
        requireNotEmpty?: boolean)
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is an array.
        - id: message
          type:
            - string
          description: (Optional) The message to display. The default is an empty string
          optional: true
        - id: requireNotEmpty
          type:
            - boolean
          description: >
            (Optional) If true the array will be checked to ensure it is not
            empty.
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsBool
    name: assertIsBool
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a boolean.
    syntax:
      content: 'static function assertIsBool(value: boolean, message?: string)'
      parameters:
        - id: value
          type:
            - boolean
          description: Value to ensure is a boolean.
        - id: message
          type:
            - string
          description: |
            (Optional) The message to display. The default is an empty string
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsDate
    name: assertIsDate
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a date.
    syntax:
      content: 'static function assertIsDate(value: any, message?: string)'
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is a date.
        - id: message
          type:
            - string
          description: |
            (Optional) The message to display. The default is an empty string
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsFunction
    name: assertIsFunction
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a function.
    syntax:
      content: 'static function assertIsFunction(value: any, message?: string)'
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is a function.
        - id: message
          type:
            - string
          description: |
            (Optional) The message to display. The default is an empty string
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsInteger
    name: assertIsInteger
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is an integer.
    syntax:
      content: 'static function assertIsInteger(value: number, message?: string)'
      parameters:
        - id: value
          type:
            - number
          description: Value to ensure is an integer.
        - id: message
          type:
            - string
          description: |
            (Optional) The message to display. The default is an empty string
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsJQueryObject
    name: assertIsJQueryObject
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a jQuery object.
    syntax:
      content: 'static function assertIsJQueryObject(value: any, message?: string)'
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is a jQuery object.
        - id: message
          type:
            - string
          description: |
            (Optional) The message to display. The default is an empty string
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsNotNull
    name: assertIsNotNull
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is not null or undefined.
    syntax:
      content: 'static function assertIsNotNull(value: any, message?: string)'
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is not null or undefined.
        - id: message
          type:
            - string
          description: |
            (Optional) The message to display. The default is an empty string
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsNotUndefined
    name: assertIsNotUndefined
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is not undefined.
    syntax:
      content: 'static function assertIsNotUndefined(value: any, message?: string)'
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is not undefined.
        - id: message
          type:
            - string
          description: |
            (Optional) The message to display. The default is an empty string
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsNumber
    name: assertIsNumber
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a number.
    syntax:
      content: 'static function assertIsNumber(value: number, message?: string)'
      parameters:
        - id: value
          type:
            - number
          description: Value to ensure is a number.
        - id: message
          type:
            - string
          description: |
            (Optional) The message to display. The default is an empty string
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsObject
    name: assertIsObject
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is an object and not null.
    syntax:
      content: 'static function assertIsObject(value: any, message?: string)'
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is an object.
        - id: message
          type:
            - string
          description: |
            (Optional) The message to display. The default is an empty string
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsString
    name: assertIsString
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a string.
    syntax:
      content: 'static function assertIsString(value: string, message?: string)'
      parameters:
        - id: value
          type:
            - string
          description: Value to ensure is a string.
        - id: message
          type:
            - string
          description: |
            (Optional) The message to display. The default is an empty string
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsStringNotEmpty
    name: assertIsStringNotEmpty
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a string and not empty.
    syntax:
      content: 'static function assertIsStringNotEmpty(value: string, message?: string)'
      parameters:
        - id: value
          type:
            - string
          description: Value to ensure is a string and not empty.
        - id: message
          type:
            - string
          description: |
            (Optional) The message to display. The default is an empty string
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertIsType
    name: assertIsType
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is an instance of the expected type.
    syntax:
      content: >-
        static function assertIsType(value: any, type: any, message: string,
        optional?: boolean)
      parameters:
        - id: value
          type:
            - any
          description: The value to test for the correct type
        - id: type
          type:
            - any
          description: >-
            Either the constructor function for a type,

            or a string matching the return value of the typeof operator. This
            specified the type

            to test for.
        - id: message
          type:
            - string
          description: The messge to display on Debug.failure.
        - id: optional
          type:
            - boolean
          description: |
            Flag to determine whether null and undefined are accepted as values.
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsArray
    name: assertParamIsArray
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is an array.
    syntax:
      content: >-
        static function assertParamIsArray(value: any, paramName?: string,
        requireNotEmpty?: boolean)
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is an array.
        - id: paramName
          type:
            - string
          description: (Optional) Name of the parameter that this value is associated with.
          optional: true
        - id: requireNotEmpty
          type:
            - boolean
          description: >
            (Optional) If true the array will be checked to ensure it is not
            empty.
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsBool
    name: assertParamIsBool
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a boolean.
    syntax:
      content: 'static function assertParamIsBool(value: boolean, paramName: string)'
      parameters:
        - id: value
          type:
            - boolean
          description: Value to ensure is a boolean.
        - id: paramName
          type:
            - string
          description: |
            Name of the parameter that this value is associated with.
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsDate
    name: assertParamIsDate
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a date.
    syntax:
      content: 'static function assertParamIsDate(value: any, paramName: string)'
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is a date.
        - id: paramName
          type:
            - string
          description: |
            Name of the parameter that this value is associated with.
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsFunction
    name: assertParamIsFunction
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a function.
    syntax:
      content: 'static function assertParamIsFunction(value: any, paramName: string)'
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is a function.
        - id: paramName
          type:
            - string
          description: |
            Name of the parameter that this value is associated with.
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsInteger
    name: assertParamIsInteger
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is an integer.
    syntax:
      content: 'static function assertParamIsInteger(value: number, paramName: string)'
      parameters:
        - id: value
          type:
            - number
          description: Value to ensure is an integer.
        - id: paramName
          type:
            - string
          description: |
            Name of the parameter that this value is associated with.
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsJQueryObject
    name: assertParamIsJQueryObject
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a jQuery object.
    syntax:
      content: 'static function assertParamIsJQueryObject(value: any, paramName: string)'
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is a jQuery object.
        - id: paramName
          type:
            - string
          description: |
            Name of the parameter that this value is associated with.
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsNotNull
    name: assertParamIsNotNull
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is not null or undefined.
    syntax:
      content: 'static function assertParamIsNotNull(value: any, paramName: string)'
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is not null or undefined.
        - id: paramName
          type:
            - string
          description: |
            Name of the parameter that this value is associated with.
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsNotUndefined
    name: assertParamIsNotUndefined
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is undefined.
    syntax:
      content: 'static function assertParamIsNotUndefined(value: any, paramName: string)'
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is not undefined.
        - id: paramName
          type:
            - string
          description: |
            Name of the parameter that this value is associated with.
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsNumber
    name: assertParamIsNumber
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a number.
    syntax:
      content: 'static function assertParamIsNumber(value: number, paramName: string)'
      parameters:
        - id: value
          type:
            - number
          description: Value to ensure is a number.
        - id: paramName
          type:
            - string
          description: |
            Name of the parameter that this value is associated with.
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsObject
    name: assertParamIsObject
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is an object and not null.
    syntax:
      content: >-
        static function assertParamIsObject(value: any, paramName: string,
        optional?: boolean)
      parameters:
        - id: value
          type:
            - any
          description: Value to ensure is an object.
        - id: paramName
          type:
            - string
          description: Name of the parameter that this value is associated with.
        - id: optional
          type:
            - boolean
          description: |
            If true then the assert will accept falsy values
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsString
    name: assertParamIsString
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a string.
    syntax:
      content: 'static function assertParamIsString(value: string, paramName: string)'
      parameters:
        - id: value
          type:
            - string
          description: Value to ensure is a string.
        - id: paramName
          type:
            - string
          description: |
            Name of the parameter that this value is associated with.
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsStringNotEmpty
    name: assertParamIsStringNotEmpty
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the value is a string and not empty.
    syntax:
      content: >-
        static function assertParamIsStringNotEmpty(value: string, paramName:
        string)
      parameters:
        - id: value
          type:
            - string
          description: Value to ensure is a string and not empty.
        - id: paramName
          type:
            - string
          description: |
            Name of the parameter that this value is associated with.
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.assertParamIsType
    name: assertParamIsType
    children: []
    type: method
    langs:
      - typeScript
    summary: Assert that the parameter is an instance of the expected type.
    syntax:
      content: >-
        static function assertParamIsType(value: any, type: any, paramName:
        string, optional?: boolean)
      parameters:
        - id: value
          type:
            - any
          description: The value to test for the correct type
        - id: type
          type:
            - any
          description: >-
            Either the constructor function for a type,

            or a string matching the return value of the typeof operator. This
            specified the type

            to test for.
        - id: paramName
          type:
            - string
          description: The name of the parameter.
        - id: optional
          type:
            - boolean
          description: |
            Flag to determine whether null and undefined are accepted as values.
          optional: true
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.fail
    name: fail
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Displays a message in the debugger's output window and breaks into the
      debugger
    syntax:
      content: 'static function fail(message: string)'
      parameters:
        - id: message
          type:
            - string
          description: |
            Message to display in the debugger's output window
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.getTypeName
    name: getTypeName
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the display name for a type.
    syntax:
      content: 'static function getTypeName(type: any)'
      parameters:
        - id: type
          type:
            - any
          description: >-
            The string value (from the typeof operator) or a constructor
            function.
      return:
        type:
          - string
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.logInfo
    name: logInfo
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function logInfo(message: string)'
      parameters:
        - id: message
          type:
            - string
          description: ''
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.logVerbose
    name: logVerbose
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function logVerbose(message: string)'
      parameters:
        - id: message
          type:
            - string
          description: ''
    module: VSS/Diag
  - uid: vss-web-extension-sdk.VSS.Diag.Debug.setDisplayCallers
    name: setDisplayCallers
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets whether or not to display callers in the stack on assert failures.
    syntax:
      content: 'static function setDisplayCallers(showCallers: boolean)'
      parameters:
        - id: showCallers
          type:
            - boolean
          description: |
            If true, display callers in the stack of assert failures.
    module: VSS/Diag
