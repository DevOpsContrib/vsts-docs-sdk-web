### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.EditableGrid
    name: EditableGrid
    fullName: EditableGrid
    children:
      - vss-web-extension-sdk.EditableGrid.beginFormatTable
      - vss-web-extension-sdk.EditableGrid.cancelDelayedFunction
      - vss-web-extension-sdk.EditableGrid.collapseAll
      - vss-web-extension-sdk.EditableGrid.collapseByLevel
      - vss-web-extension-sdk.EditableGrid.create
      - vss-web-extension-sdk.EditableGrid.createIn
      - vss-web-extension-sdk.EditableGrid.delayExecute
      - vss-web-extension-sdk.EditableGrid.disableEvent
      - vss-web-extension-sdk.EditableGrid.constructor
      - vss-web-extension-sdk.EditableGrid.enableEvent
      - vss-web-extension-sdk.EditableGrid.enhance
      - vss-web-extension-sdk.EditableGrid.ensureDataIndexExpanded
      - vss-web-extension-sdk.EditableGrid.ensureEnhancement
      - vss-web-extension-sdk.EditableGrid.ensureEnhancements
      - vss-web-extension-sdk.EditableGrid.expandAll
      - vss-web-extension-sdk.EditableGrid.expandByLevel
      - vss-web-extension-sdk.EditableGrid.focus
      - vss-web-extension-sdk.EditableGrid.getColumns
      - vss-web-extension-sdk.EditableGrid.getColumnValue
      - vss-web-extension-sdk.EditableGrid.getContextMenuRowInfo
      - vss-web-extension-sdk.EditableGrid.getDraggingRowInfo
      - vss-web-extension-sdk.EditableGrid.getElement
      - vss-web-extension-sdk.EditableGrid.getEnhancementOptions
      - vss-web-extension-sdk.EditableGrid.getExpandStates
      - vss-web-extension-sdk.EditableGrid.getFocusElement
      - vss-web-extension-sdk.EditableGrid.getId
      - vss-web-extension-sdk.EditableGrid.getInstance
      - vss-web-extension-sdk.EditableGrid.getLastRowDataIndex
      - vss-web-extension-sdk.EditableGrid.getOptionPrefix
      - vss-web-extension-sdk.EditableGrid.getRowData
      - vss-web-extension-sdk.EditableGrid.getRowInfo
      - vss-web-extension-sdk.EditableGrid.getSelectedDataIndex
      - vss-web-extension-sdk.EditableGrid.getSelectedDataIndices
      - vss-web-extension-sdk.EditableGrid.getSelectedRowIndex
      - vss-web-extension-sdk.EditableGrid.getSelectedRowIntoView
      - vss-web-extension-sdk.EditableGrid.getSelectionCount
      - vss-web-extension-sdk.EditableGrid.getSortOrder
      - vss-web-extension-sdk.EditableGrid.getTypeName
      - vss-web-extension-sdk.EditableGrid.getTypeName
      - vss-web-extension-sdk.EditableGrid.initializeOptions
      - vss-web-extension-sdk.EditableGrid.isDisposed
      - vss-web-extension-sdk.EditableGrid.onDeleteKey
      - vss-web-extension-sdk.EditableGrid.onEnterKey
      - vss-web-extension-sdk.EditableGrid.onGutterClick
      - vss-web-extension-sdk.EditableGrid.onOpenRowDetail
      - vss-web-extension-sdk.EditableGrid.onRowClick
      - vss-web-extension-sdk.EditableGrid.onRowDoubleClick
      - vss-web-extension-sdk.EditableGrid.onRowMouseDown
      - vss-web-extension-sdk.EditableGrid.onRowMouseUp
      - vss-web-extension-sdk.EditableGrid.onSort
      - vss-web-extension-sdk.EditableGrid.registerEnhancement
      - vss-web-extension-sdk.EditableGrid.registerJQueryWidget
      - vss-web-extension-sdk.EditableGrid.setAttribute
      - vss-web-extension-sdk.EditableGrid.setColumnOptions
      - vss-web-extension-sdk.EditableGrid.setDataSource
      - vss-web-extension-sdk.EditableGrid.setEnhancementOptions
      - vss-web-extension-sdk.EditableGrid.setRole
      - vss-web-extension-sdk.EditableGrid.setSelectedDataIndex
      - vss-web-extension-sdk.EditableGrid.setupDragDrop
      - vss-web-extension-sdk.EditableGrid.tryToggle
      - vss-web-extension-sdk.EditableGrid.updateRow
      - vss-web-extension-sdk.EditableGrid._addSelection
      - vss-web-extension-sdk.EditableGrid._beginEnsureSelectionIsAvailable
      - vss-web-extension-sdk.EditableGrid._bind
      - vss-web-extension-sdk.EditableGrid._clearSelection
      - vss-web-extension-sdk.EditableGrid._createContextMenu
      - vss-web-extension-sdk.EditableGrid._createContextPopupMenuControl
      - vss-web-extension-sdk.EditableGrid._drawHeaderCellValue
      - vss-web-extension-sdk.EditableGrid._enhance
      - vss-web-extension-sdk.EditableGrid._ensureInitialized
      - vss-web-extension-sdk.EditableGrid._fire
      - vss-web-extension-sdk.EditableGrid._fireChange
      - vss-web-extension-sdk.EditableGrid._getContextMenuItems
      - vss-web-extension-sdk.EditableGrid._getDragOverRows
      - vss-web-extension-sdk.EditableGrid._getEventNameSpace
      - vss-web-extension-sdk.EditableGrid._getInDomPromise
      - vss-web-extension-sdk.EditableGrid._getRowInfoFromEvent
      - vss-web-extension-sdk.EditableGrid._getRowIntoView
      - vss-web-extension-sdk.EditableGrid._getUniqueId
      - vss-web-extension-sdk.EditableGrid._onBlur
      - vss-web-extension-sdk.EditableGrid._onColumnMove
      - vss-web-extension-sdk.EditableGrid._onColumnResize
      - vss-web-extension-sdk.EditableGrid._onFocus
      - vss-web-extension-sdk.EditableGrid._onHeaderClick
      - vss-web-extension-sdk.EditableGrid._onHeaderDblClick
      - vss-web-extension-sdk.EditableGrid._onKeyUp
      - vss-web-extension-sdk.EditableGrid._onRowMouseUp
      - vss-web-extension-sdk.EditableGrid._onSelectStart
      - vss-web-extension-sdk.EditableGrid._redraw
      - vss-web-extension-sdk.EditableGrid._resetRowAcceptStatus
      - vss-web-extension-sdk.EditableGrid._rowDropTryActivate
      - vss-web-extension-sdk.EditableGrid._selectRow
      - vss-web-extension-sdk.EditableGrid._setElement
      - vss-web-extension-sdk.EditableGrid._setId
      - vss-web-extension-sdk.EditableGrid._sortBy
      - vss-web-extension-sdk.EditableGrid._trySorting
      - vss-web-extension-sdk.EditableGrid._unbind
      - vss-web-extension-sdk.EditableGrid._updateRowSize
    langs:
      - typeScript
    type: class
    summary: ''
  - uid: vss-web-extension-sdk.EditableGrid.beginFormatTable
    name: >-
      beginFormatTable(operationCompleteCallback: IResultCallback,
      errorCallback?: IErrorCallback, formatterType?: function, options?: any)
    children: []
    langs:
      - typeScript
    summary: Generates a table of the selected items in the grid.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IResultCallback
          type:
            - IResultCallback
          description: |-
            A callback function invoked when the
            current selection is available to the client for processing.
        - id: vss-web-extension-sdk.IErrorCallback
          type:
            - IErrorCallback
          description: |+

          optional: true
        - id: formatterType
          type:
            - function
          description: ''
          optional: true
        - id: options
          type:
            - any
          description: ''
          optional: true
      content: >-
        function beginFormatTable(operationCompleteCallback: IResultCallback,
        errorCallback?: IErrorCallback, formatterType?: function, options?: any)
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.cancelDelayedFunction
    name: 'cancelDelayedFunction(name: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Cancels any pending delayed functions (delayExecute calls) with the
      specified name
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: Name (supplied in the delayExecute call) of the operations to cancel
      content: 'function cancelDelayedFunction(name: string)'
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.collapseAll
    name: collapseAll()
    children: []
    langs:
      - typeScript
    summary: Collapses all rows of the grid (if source data is hierarchical).
    syntax:
      parameters: []
      content: function collapseAll()
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.collapseByLevel
    name: 'collapseByLevel(level: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Collapses all rows at or below specified level (if source data is
      hierarchical).
    syntax:
      parameters:
        - id: level
          type:
            - number
          description: Level to collapse.
      content: 'function collapseByLevel(level: number)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.create
    name: >-
      create(controlType: function, container: JQuery, controlOptions: TOptions,
      enhancementOptions?: EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: Creates a the control specified by TControl in the given container.
    syntax:
      parameters:
        - id: controlType
          type:
            - function
          description: ''
        - id: container
          type:
            - JQuery
          description: ''
        - id: controlOptions
          type:
            - TOptions
          description: ''
        - id: vss-web-extension-sdk.EnhancementOptions
          type:
            - EnhancementOptions
          description: ''
          optional: true
      content: >-
        function create(controlType: function, container: JQuery,
        controlOptions: TOptions, enhancementOptions?: EnhancementOptions)
      return:
        type:
          - TControl
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.createIn
    name: >-
      createIn(type?: any, container?: any, options?: TOptions, koCompatable?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: container
          type:
            - any
          description: ''
          optional: true
        - id: options
          type:
            - TOptions
          description: ''
          optional: true
        - id: koCompatable
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function createIn(type?: any, container?: any, options?: TOptions,
        koCompatable?: boolean)
      return:
        type:
          - vss-web-extension-sdk.Control
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.delayExecute
    name: >-
      delayExecute(name?: string, msDelay?: number, cancelPendingOps?: boolean,
      func?: Function)
    children: []
    langs:
      - typeScript
    summary: Executes the provided function after the specified amount of time
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: >-
            (Optional) Name for this operation. Allows subsequent calls to
            cancel this action.
          optional: true
        - id: msDelay
          type:
            - number
          description: Delay in milliseconds to wait before executing the Function
          optional: true
        - id: cancelPendingOps
          type:
            - boolean
          description: >-
            If true, cancel any pending requests with this name. If false, and
            there are outstanding requests with this name already in progress,
            then do nothing.
          optional: true
        - id: func
          type:
            - Function
          description: |
            Method to execute after the delay
          optional: true
      content: >-
        function delayExecute(name?: string, msDelay?: number,
        cancelPendingOps?: boolean, func?: Function)
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.disableEvent
    name: 'disableEvent(eventName: string)'
    children: []
    langs:
      - typeScript
    summary: Disables raising the custom event with the provided event name.
    syntax:
      parameters:
        - id: eventName
          type:
            - string
          description: |
            Name of the event to disable.
      content: 'function disableEvent(eventName: string)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.constructor
    name: 'EditableGrid(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: options
          type:
            - any
          description: ''
          optional: true
      content: 'new EditableGrid(options?: any)'
      return:
        type:
          - vss-web-extension-sdk.EditableGrid
    type: constructor
  - uid: vss-web-extension-sdk.EditableGrid.enableEvent
    name: 'enableEvent(eventName: string)'
    children: []
    langs:
      - typeScript
    summary: Enables raising the custom event with the provided event name.
    syntax:
      parameters:
        - id: eventName
          type:
            - string
          description: |
            Name of the event to enable.
      content: 'function enableEvent(eventName: string)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.enhance
    name: >-
      enhance(type: function, element: function, options?: function,
      enhancementOptions?: EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - function
          description: ''
        - id: element
          type:
            - function
          description: ''
        - id: options
          type:
            - function
          description: ''
          optional: true
        - id: vss-web-extension-sdk.EnhancementOptions
          type:
            - EnhancementOptions
          description: ''
          optional: true
      content: >-
        function enhance(type: function, element: function, options?: function,
        enhancementOptions?: EnhancementOptions)
      return:
        type:
          - vss-web-extension-sdk.Enhancement
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.ensureDataIndexExpanded
    name: 'ensureDataIndexExpanded(dataIndex: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Ensures that an item (identified by a data index) has an associated row by

      expanding any enclosing collapsed rows. Returns the rowIndex of the
      associated row.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The data index of the item to ensure is expanded
      content: 'function ensureDataIndexExpanded(dataIndex: number)'
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.ensureEnhancement
    name: 'ensureEnhancement(type?: any, context?: any, errorCallback?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: context
          type:
            - any
          description: ''
          optional: true
        - id: errorCallback
          type:
            - any
          description: ''
          optional: true
      content: >-
        function ensureEnhancement(type?: any, context?: any, errorCallback?:
        any)
      return:
        type:
          - vss-web-extension-sdk.Enhancement
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.ensureEnhancements
    name: 'ensureEnhancements(type?: any, context?: any, errorCallback?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: context
          type:
            - any
          description: ''
          optional: true
        - id: errorCallback
          type:
            - any
          description: ''
          optional: true
      content: >-
        function ensureEnhancements(type?: any, context?: any, errorCallback?:
        any)
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.expandAll
    name: expandAll()
    children: []
    langs:
      - typeScript
    summary: Expands all rows of the grid (if source data is hierarchical).
    syntax:
      parameters: []
      content: function expandAll()
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.expandByLevel
    name: 'expandByLevel(level: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Expands all rows at or below specified level (if source data is
      hierarchical).
    syntax:
      parameters:
        - id: level
          type:
            - number
          description: Level to expand.
      content: 'function expandByLevel(level: number)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.focus
    name: 'focus(timeout?: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: timeout
          type:
            - number
          description: |+

          optional: true
      content: 'function focus(timeout?: number)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getColumns
    name: getColumns()
    children: []
    langs:
      - typeScript
    summary: Gets the columns currently being displayed in the grid.
    syntax:
      parameters: []
      content: function getColumns()
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getColumnValue
    name: >-
      getColumnValue(dataIndex: number, columnIndex: function, columnOrder?:
      number)
    children: []
    langs:
      - typeScript
    summary: |-
      Gets the value for a column. The default use of the return value is to
      convert it to a string and set it as the cell's text value.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The index for the row data in the data source
        - id: columnIndex
          type:
            - function
          description: The index of the column's data in the row's data array
        - id: columnOrder
          type:
            - number
          description: >-
            The index of the column in the grid's column array. This is the
            current visible order of the column
          optional: true
      content: >-
        function getColumnValue(dataIndex: number, columnIndex: function,
        columnOrder?: number)
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getContextMenuRowInfo
    name: getContextMenuRowInfo()
    children: []
    langs:
      - typeScript
    summary: 'If no context menu is open, returns null.'
    syntax:
      parameters: []
      content: function getContextMenuRowInfo()
      return:
        type:
          - vss-web-extension-sdk.IGridRowInfo
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getDraggingRowInfo
    name: getDraggingRowInfo()
    children: []
    langs:
      - typeScript
    summary: Gets the row information for the item currently being dragged.
    syntax:
      parameters: []
      content: function getDraggingRowInfo()
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getElement
    name: getElement()
    children: []
    langs:
      - typeScript
    summary: Gets the element associated with this control.
    syntax:
      parameters: []
      content: function getElement()
      return:
        type:
          - JQuery
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getEnhancementOptions
    name: 'getEnhancementOptions(type: any, element: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
        - id: element
          type:
            - any
          description: |+

      content: 'function getEnhancementOptions(type: any, element: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getExpandStates
    name: getExpandStates()
    children: []
    langs:
      - typeScript
    summary: Gets the collection of expand states for the grid.
    syntax:
      parameters: []
      content: function getExpandStates()
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getFocusElement
    name: getFocusElement()
    children: []
    langs:
      - typeScript
    summary: >-
      This is the actual element that receives focus and that all the event
      bindings, like 'keydown', are bound to.
    syntax:
      parameters: []
      content: function getFocusElement()
      return:
        type:
          - JQuery
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getId
    name: getId()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getId()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getInstance
    name: 'getInstance(type?: any, element?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: element
          type:
            - any
          description: ''
          optional: true
      content: 'function getInstance(type?: any, element?: any)'
      return:
        type:
          - vss-web-extension-sdk.Enhancement
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getLastRowDataIndex
    name: getLastRowDataIndex()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getLastRowDataIndex()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getOptionPrefix
    name: 'getOptionPrefix(type: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
      content: 'function getOptionPrefix(type: any)'
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getRowData
    name: 'getRowData(dataIndex: number)'
    children: []
    langs:
      - typeScript
    summary: Gets the data being used to display the row at the provided data index.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The data index for the record to retrieve.
      content: 'function getRowData(dataIndex: number)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getRowInfo
    name: 'getRowInfo(dataIndex: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Returns a rowInfo object containing rowIndex, dataIndex and a jQuery
      wrapper for the actual row.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The data index for the record to retrieve.
      content: 'function getRowInfo(dataIndex: number)'
      return:
        type:
          - vss-web-extension-sdk.IGridRowInfo
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getSelectedDataIndex
    name: getSelectedDataIndex()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSelectedDataIndex()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getSelectedDataIndices
    name: getSelectedDataIndices()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSelectedDataIndices()
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getSelectedRowIndex
    name: getSelectedRowIndex()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSelectedRowIndex()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getSelectedRowIntoView
    name: 'getSelectedRowIntoView(force?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: force
          type:
            - boolean
          description: |+

          optional: true
      content: 'function getSelectedRowIntoView(force?: boolean)'
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getSelectionCount
    name: getSelectionCount()
    children: []
    langs:
      - typeScript
    summary: Gets the number of selected items.
    syntax:
      parameters: []
      content: function getSelectionCount()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getSortOrder
    name: getSortOrder()
    children: []
    langs:
      - typeScript
    summary: Gets the current sort order being used in the grid.
    syntax:
      parameters: []
      content: function getSortOrder()
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getTypeName
    name: getTypeName()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getTypeName()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.getTypeName
    name: 'getTypeName(type?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
      content: 'function getTypeName(type?: any)'
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.initializeOptions
    name: 'initializeOptions(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: options
          type:
            - any
          description: |+

          optional: true
      content: 'function initializeOptions(options?: any)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.isDisposed
    name: isDisposed()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function isDisposed()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.onDeleteKey
    name: 'onDeleteKey(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onDeleteKey(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.onEnterKey
    name: 'onEnterKey(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onEnterKey(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.onGutterClick
    name: 'onGutterClick(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onGutterClick(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.onOpenRowDetail
    name: 'onOpenRowDetail(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onOpenRowDetail(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.onRowClick
    name: 'onRowClick(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onRowClick(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.onRowDoubleClick
    name: 'onRowDoubleClick(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onRowDoubleClick(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.onRowMouseDown
    name: 'onRowMouseDown(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onRowMouseDown(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.onRowMouseUp
    name: 'onRowMouseUp(eventArgs: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - JQueryEventObject
          description: ''
      content: 'function onRowMouseUp(eventArgs: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.onSort
    name: 'onSort(sortOrder: any, sortColumns?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: sortOrder
          type:
            - any
          description: ''
        - id: sortColumns
          type:
            - any
          description: ''
          optional: true
      content: 'function onSort(sortOrder: any, sortColumns?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.registerEnhancement
    name: >-
      registerEnhancement(type?: function, selector?: string, options?:
      TOptions, errorCallback?: IErrorCallback, enhancementOptions?:
      EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - function
          description: ''
          optional: true
        - id: selector
          type:
            - string
          description: ''
          optional: true
        - id: options
          type:
            - TOptions
          description: ''
          optional: true
        - id: vss-web-extension-sdk.IErrorCallback
          type:
            - IErrorCallback
          description: |+

          optional: true
        - id: vss-web-extension-sdk.EnhancementOptions
          type:
            - EnhancementOptions
          description: ''
          optional: true
      content: >-
        function registerEnhancement(type?: function, selector?: string,
        options?: TOptions, errorCallback?: IErrorCallback, enhancementOptions?:
        EnhancementOptions)
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.registerJQueryWidget
    name: >-
      registerJQueryWidget(type?: any, widgetName?: any, widgetOptions?:
      TOptions, enhancementOptions?: EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: widgetName
          type:
            - any
          description: ''
          optional: true
        - id: widgetOptions
          type:
            - TOptions
          description: |+

          optional: true
        - id: vss-web-extension-sdk.EnhancementOptions
          type:
            - EnhancementOptions
          description: ''
          optional: true
      content: >-
        function registerJQueryWidget(type?: any, widgetName?: any,
        widgetOptions?: TOptions, enhancementOptions?: EnhancementOptions)
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.setAttribute
    name: 'setAttribute(attribute: string, value: function, element?: JQuery)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets the attribute for the current control using the specified attribute
      name, value on the specified element.

      If no element specified, default element is used.
    syntax:
      parameters:
        - id: attribute
          type:
            - string
          description: Attribute name to set value.
        - id: value
          type:
            - function
          description: Attribute value to set.
        - id: element
          type:
            - JQuery
          description: |
            Element to apply the attribute (default is root element).
          optional: true
      content: >-
        function setAttribute(attribute: string, value: function, element?:
        JQuery)
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.setColumnOptions
    name: 'setColumnOptions(columnName: string, options?: IGridColumn)'
    children: []
    langs:
      - typeScript
    summary: >-
      Set new column info for the column associated with the specified column
      name.
    syntax:
      parameters:
        - id: columnName
          type:
            - string
          description: Name of the column to change the options.
        - id: vss-web-extension-sdk.IGridColumn
          type:
            - IGridColumn
          description: New column options.
          optional: true
      content: 'function setColumnOptions(columnName: string, options?: IGridColumn)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.setDataSource
    name: 'setDataSource(source: IGridSource)'
    children: []
    langs:
      - typeScript
    summary: Sets the source of the grid using GridSource object.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IGridSource
          type:
            - IGridSource
          description: GridSource object to set the grid source.
      content: 'function setDataSource(source: IGridSource)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.setEnhancementOptions
    name: 'setEnhancementOptions(enhancementOptions: EnhancementOptions)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets options related to the creation of this control or enhancement of an
      element as this control.

      Note: Options are merged.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.EnhancementOptions
          type:
            - EnhancementOptions
          description: ''
      content: 'function setEnhancementOptions(enhancementOptions: EnhancementOptions)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.setRole
    name: 'setRole(role: string, element?: JQuery)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets the role for the current control using the specified role value on
      the specified element.

      If no element specified, default element is used.
    syntax:
      parameters:
        - id: role
          type:
            - string
          description: Role to assign.
        - id: element
          type:
            - JQuery
          description: |
            Element to apply the role (default is root element).
          optional: true
      content: 'function setRole(role: string, element?: JQuery)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.setSelectedDataIndex
    name: 'setSelectedDataIndex(dataIndex: number, expandNodes?: boolean)'
    children: []
    langs:
      - typeScript
    summary: |-
      Sets the selected item in the grid by the data index.
      Optionally ensure that the item is not hidden by collapsed rows.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The data index of item to show
        - id: expandNodes
          type:
            - boolean
          description: |
            If true, all containing collapsed nodes will be expanded
          optional: true
      content: 'function setSelectedDataIndex(dataIndex: number, expandNodes?: boolean)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.setupDragDrop
    name: 'setupDragDrop(draggableOptions: any, droppableOptions: any)'
    children: []
    langs:
      - typeScript
    summary: Setup the provided draggable and droppable options
    syntax:
      parameters:
        - id: draggableOptions
          type:
            - any
          description: ''
        - id: droppableOptions
          type:
            - any
          description: ''
      content: 'function setupDragDrop(draggableOptions: any, droppableOptions: any)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.tryToggle
    name: 'tryToggle(expand: boolean, applyToAllRows: boolean, targetIndex?: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Expand or collapse node(s), and set selection focus at a given target
      index or at the current selected index as default behavior.
    syntax:
      parameters:
        - id: expand
          type:
            - boolean
          description: 'If true, expands the node, otherwise collapsed.'
        - id: applyToAllRows
          type:
            - boolean
          description: >-
            True to expand or collapse all nodes, false to expand or collapse
            the node at a given target index, or at the current selected index
            as default behavior.
        - id: targetIndex
          type:
            - number
          description: 'The node index to be expanded or collapsed, and get selection focus.'
          optional: true
      content: >-
        function tryToggle(expand: boolean, applyToAllRows: boolean,
        targetIndex?: number)
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.EditableGrid.updateRow
    name: >-
      updateRow(rowIndex: number, dataIndex?: number, columnsToUpdate?:
      function)
    children: []
    langs:
      - typeScript
    summary: Updates the row identified by the given rowIndex.
    syntax:
      parameters:
        - id: rowIndex
          type:
            - number
          description: Index of row to be updated
        - id: dataIndex
          type:
            - number
          description: DataIndex of row to be updated
          optional: true
        - id: columnsToUpdate
          type:
            - function
          description: |
            HashSet of column indices. If given,
            only columns in this set will be updated.
          optional: true
      content: >-
        function updateRow(rowIndex: number, dataIndex?: number,
        columnsToUpdate?: function)
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._addSelection
    name: '_addSelection(rowIndex: number, dataIndex?: number, options?: any)'
    children: []
    langs:
      - typeScript
    summary: Highlights the row at the specified rowIndex
    syntax:
      parameters:
        - id: rowIndex
          type:
            - number
          description: >-
            Index of the row in the visible source (taking the expand/collapse
            states into account)
        - id: dataIndex
          type:
            - number
          description: Index of the row in the overall source
          optional: true
        - id: options
          type:
            - any
          description: |
            Specifies options such as:
                - keepSelectionStart: Keepd the rowIndex as the basis for range selection
                - doNotFireEvent: Prevents firing events
                - toggle: Toggles the row in the selection
          optional: true
      content: >-
        function _addSelection(rowIndex: number, dataIndex?: number, options?:
        any)
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._beginEnsureSelectionIsAvailable
    name: >-
      _beginEnsureSelectionIsAvailable(itemsAvailableCallback?: IResultCallback,
      errorCallback?: IErrorCallback)
    children: []
    langs:
      - typeScript
    summary: >-
      Ensures that all data objects in the selection have been downloaded and
      are available to process.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IResultCallback
          type:
            - IResultCallback
          description: ''
          optional: true
        - id: vss-web-extension-sdk.IErrorCallback
          type:
            - IErrorCallback
          description: |+

          optional: true
      content: >-
        function _beginEnsureSelectionIsAvailable(itemsAvailableCallback?:
        IResultCallback, errorCallback?: IErrorCallback)
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._bind
    name: '_bind(element?: any, eventType?: any, handler?: any, track?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - any
          description: ''
          optional: true
        - id: eventType
          type:
            - any
          description: ''
          optional: true
        - id: handler
          type:
            - any
          description: ''
          optional: true
        - id: track
          type:
            - any
          description: |+

          optional: true
      content: >-
        function _bind(element?: any, eventType?: any, handler?: any, track?:
        any)
      return:
        type:
          - vss-web-extension-sdk.Enhancement
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._clearSelection
    name: _clearSelection()
    children: []
    langs:
      - typeScript
    summary: >-
      Clear the selected rows & selection count, but maintain the selected
      index.
    syntax:
      parameters: []
      content: function _clearSelection()
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._createContextMenu
    name: '_createContextMenu(rowInfo: any, menuOptions: any)'
    children: []
    langs:
      - typeScript
    summary: >-
      Creates the context menu options. This function is intended to be
      overriden by derived objects.
    syntax:
      parameters:
        - id: rowInfo
          type:
            - any
          description: The information about the row with context
        - id: menuOptions
          type:
            - any
          description: The menu information. See _createContextPopupMenuControl
      content: 'function _createContextMenu(rowInfo: any, menuOptions: any)'
      return:
        type:
          - vss-web-extension-sdk.PopupMenu
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._createContextPopupMenuControl
    name: '_createContextPopupMenuControl(menuOptions: any)'
    children: []
    langs:
      - typeScript
    summary: >-
      Creates the PopupMenu control that houses the context menu items for the
      Grid. Note: this is intentionally
          abstracted from _createContextMenu to allow directly calling it from deep derivations and avoiding inheritance
          base propagation.
    syntax:
      parameters:
        - id: menuOptions
          type:
            - any
          description: |

                The menu information:
                {
                    contextInfo: { item, rowInfo}
                    items: the list of menu items
                }
      content: 'function _createContextPopupMenuControl(menuOptions: any)'
      return:
        type:
          - vss-web-extension-sdk.PopupMenu
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._drawHeaderCellValue
    name: '_drawHeaderCellValue(column: any)'
    children: []
    langs:
      - typeScript
    summary: >-
      Custom Drawn Column Header:

      If you want a custom drawn column header, then the preferred method is to
      set a "getHeaderCellContents" property

      on the column to a function that takes the same parameters as this
      function and returns a jQuery

      object that represents the contents.
    syntax:
      parameters:
        - id: column
          type:
            - any
          description: Information about the header column that is being rendered.
      content: 'function _drawHeaderCellValue(column: any)'
      return:
        type:
          - JQuery
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._enhance
    name: '_enhance(element: JQuery)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - JQuery
          description: |+

      content: 'function _enhance(element: JQuery)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._ensureInitialized
    name: _ensureInitialized()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function _ensureInitialized()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._fire
    name: '_fire(element?: any, eventType?: any, args?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - any
          description: ''
          optional: true
        - id: eventType
          type:
            - any
          description: ''
          optional: true
        - id: args
          type:
            - any
          description: |+

          optional: true
      content: 'function _fire(element?: any, eventType?: any, args?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._fireChange
    name: '_fireChange(sender?: any)'
    children: []
    langs:
      - typeScript
    summary: Fires the change event for the control immediately
    syntax:
      parameters:
        - id: sender
          type:
            - any
          description: |
            Source element of the event
          optional: true
      content: 'function _fireChange(sender?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._getContextMenuItems
    name: _getContextMenuItems()
    children: []
    langs:
      - typeScript
    summary: gets context menu items list
    syntax:
      parameters: []
      content: function _getContextMenuItems()
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._getDragOverRows
    name: _getDragOverRows()
    children: []
    langs:
      - typeScript
    summary: Get the rows that currently have a draggable item "over" them
    syntax:
      parameters: []
      content: function _getDragOverRows()
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._getEventNameSpace
    name: _getEventNameSpace()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function _getEventNameSpace()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._getInDomPromise
    name: _getInDomPromise()
    children: []
    langs:
      - typeScript
    summary: |-
      Get a promise that is resolved once the containing element for this
      control has been added to the DOM hierarchy.
    syntax:
      parameters: []
      content: function _getInDomPromise()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._getRowInfoFromEvent
    name: '_getRowInfoFromEvent(e?: JQueryEventObject, selector?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
        - id: selector
          type:
            - string
          description: |+

          optional: true
      content: 'function _getRowInfoFromEvent(e?: JQueryEventObject, selector?: string)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._getRowIntoView
    name: '_getRowIntoView(rowIndex: number, force?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rowIndex
          type:
            - number
          description: ''
        - id: force
          type:
            - boolean
          description: ''
          optional: true
      content: 'function _getRowIntoView(rowIndex: number, force?: boolean)'
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._getUniqueId
    name: _getUniqueId()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function _getUniqueId()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._onBlur
    name: '_onBlur(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onBlur(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._onColumnMove
    name: '_onColumnMove(sourceIndex: any, targetIndex: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: sourceIndex
          type:
            - any
          description: ''
        - id: targetIndex
          type:
            - any
          description: ''
      content: 'function _onColumnMove(sourceIndex: any, targetIndex: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._onColumnResize
    name: '_onColumnResize(column: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: column
          type:
            - any
          description: ''
      content: 'function _onColumnResize(column: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._onFocus
    name: '_onFocus(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onFocus(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._onHeaderClick
    name: '_onHeaderClick(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onHeaderClick(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._onHeaderDblClick
    name: '_onHeaderDblClick(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onHeaderDblClick(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._onKeyUp
    name: '_onKeyUp(e?: JQueryKeyEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryKeyEventObject
          description: ''
          optional: true
      content: 'function _onKeyUp(e?: JQueryKeyEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._onRowMouseUp
    name: '_onRowMouseUp(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: Handles the row mouse up event
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onRowMouseUp(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._onSelectStart
    name: '_onSelectStart(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onSelectStart(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._redraw
    name: '_redraw(includeNonDirtyRows?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: includeNonDirtyRows
          type:
            - boolean
          description: |+

          optional: true
      content: 'function _redraw(includeNonDirtyRows?: boolean)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._resetRowAcceptStatus
    name: _resetRowAcceptStatus()
    children: []
    langs:
      - typeScript
    summary: Clear the cached row acceptance map
    syntax:
      parameters: []
      content: function _resetRowAcceptStatus()
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._rowDropTryActivate
    name: '_rowDropTryActivate(droppingRowInfo: any, e?: any, ui?: any)'
    children: []
    langs:
      - typeScript
    summary: See if the row has accepted and activate if it has.
    syntax:
      parameters:
        - id: droppingRowInfo
          type:
            - any
          description: ''
        - id: e
          type:
            - any
          description: ''
          optional: true
        - id: ui
          type:
            - any
          description: ''
          optional: true
      content: 'function _rowDropTryActivate(droppingRowInfo: any, e?: any, ui?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._selectRow
    name: '_selectRow(rowIndex: number, dataIndex?: number, options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rowIndex
          type:
            - number
          description: ''
        - id: dataIndex
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - any
          description: |+

          optional: true
      content: 'function _selectRow(rowIndex: number, dataIndex?: number, options?: any)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._setElement
    name: '_setElement(element: JQuery)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - JQuery
          description: |+

      content: 'function _setElement(element: JQuery)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._setId
    name: '_setId(id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: id
          type:
            - string
          description: |+

      content: 'function _setId(id: string)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._sortBy
    name: '_sortBy(column?: any, add?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: column
          type:
            - any
          description: ''
          optional: true
        - id: add
          type:
            - boolean
          description: |+

          optional: true
      content: 'function _sortBy(column?: any, add?: boolean)'
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._trySorting
    name: '_trySorting(sortOrder: any, sortColumns?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: sortOrder
          type:
            - any
          description: ''
        - id: sortColumns
          type:
            - any
          description: ''
          optional: true
      content: 'function _trySorting(sortOrder: any, sortColumns?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._unbind
    name: '_unbind(element?: any, eventType?: any, handler?: any, track?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - any
          description: ''
          optional: true
        - id: eventType
          type:
            - any
          description: ''
          optional: true
        - id: handler
          type:
            - any
          description: ''
          optional: true
        - id: track
          type:
            - any
          description: |+

          optional: true
      content: >-
        function _unbind(element?: any, eventType?: any, handler?: any, track?:
        any)
      return:
        type:
          - vss-web-extension-sdk.Enhancement
    type: method
  - uid: vss-web-extension-sdk.EditableGrid._updateRowSize
    name: '_updateRowSize(rowIndex: number, row: any, keepContent?: boolean)'
    children: []
    langs:
      - typeScript
    summary: Updates the container element for the row identified by rowIndex
    syntax:
      parameters:
        - id: rowIndex
          type:
            - number
          description: Index of row to be updated
        - id: row
          type:
            - any
          description: ''
        - id: keepContent
          type:
            - boolean
          description: |-
            If set, the content of the container element (i.e.,
            any column data) will not be removed
          optional: true
      content: >-
        function _updateRowSize(rowIndex: number, row: any, keepContent?:
        boolean)
      return:
        type:
          - any
    type: method
