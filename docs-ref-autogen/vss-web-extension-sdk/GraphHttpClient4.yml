### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.GraphHttpClient4
    name: GraphHttpClient4
    fullName: GraphHttpClient4
    children:
      - vss-web-extension-sdk.GraphHttpClient4.addMembership
      - vss-web-extension-sdk.GraphHttpClient4.authTokenManager
      - vss-web-extension-sdk.GraphHttpClient4.cachepoliciesApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.checkMembershipExistence
      - vss-web-extension-sdk.GraphHttpClient4.createGroup
      - vss-web-extension-sdk.GraphHttpClient4.createUser
      - vss-web-extension-sdk.GraphHttpClient4.deleteGroup
      - vss-web-extension-sdk.GraphHttpClient4.deleteUser
      - vss-web-extension-sdk.GraphHttpClient4.descriptorsApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.findGroupsBySearchFactor
      - vss-web-extension-sdk.GraphHttpClient4.findUsersBySearchFactor
      - vss-web-extension-sdk.GraphHttpClient4.forceOptionsCallForAutoNegotiate
      - vss-web-extension-sdk.GraphHttpClient4.getDescriptor
      - vss-web-extension-sdk.GraphHttpClient4.getGroup
      - vss-web-extension-sdk.GraphHttpClient4.getGroups
      - vss-web-extension-sdk.GraphHttpClient4.getMembership
      - vss-web-extension-sdk.GraphHttpClient4.getMemberships
      - vss-web-extension-sdk.GraphHttpClient4.getMembershipState
      - vss-web-extension-sdk.GraphHttpClient4.getStorageKey
      - vss-web-extension-sdk.GraphHttpClient4.getUser
      - vss-web-extension-sdk.GraphHttpClient4.getUsers
      - >-
        vss-web-extension-sdk.GraphHttpClient4.graphGlobalExtendedPropertyBatchApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.constructor
      - vss-web-extension-sdk.GraphHttpClient4.groupsApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.idsApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.lookupSubjects
      - vss-web-extension-sdk.GraphHttpClient4.memberlookupApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.membersApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.membersApiVersion_42939f1e
      - vss-web-extension-sdk.GraphHttpClient4.membersApiVersion_8b9ecdb2
      - vss-web-extension-sdk.GraphHttpClient4.membershipsApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.membershipsbatchApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.membershipstatesApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.membershipTraversalsApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.removeMembership
      - vss-web-extension-sdk.GraphHttpClient4.scopesApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.shardingstateApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.storagekeysApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.subjectlookupApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.subjectsApiVersion
      - vss-web-extension-sdk.GraphHttpClient4.updateGroup
      - vss-web-extension-sdk.GraphHttpClient4.usersApiVersion
      - vss-web-extension-sdk.GraphHttpClient4._beginGetLocation
      - vss-web-extension-sdk.GraphHttpClient4._beginRequest
      - vss-web-extension-sdk.GraphHttpClient4._beginRequestWithAjaxResult
      - vss-web-extension-sdk.GraphHttpClient4._issueAjaxRequest
      - vss-web-extension-sdk.GraphHttpClient4._rootRequestPath
      - vss-web-extension-sdk.GraphHttpClient4._setInitializationPromise
    langs:
      - typeScript
    type: class
    summary: ''
  - uid: vss-web-extension-sdk.GraphHttpClient4.addMembership
    name: 'addMembership(subjectDescriptor: string, containerDescriptor: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Create a new membership between a container and subject'
    syntax:
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: >-
            A descriptor to a group or user that can be the child subject in the
            relationship.
        - id: containerDescriptor
          type:
            - string
          description: >-
            A descriptor to a group that can be the container in the
            relationship.
      content: >-
        function addMembership(subjectDescriptor: string, containerDescriptor:
        string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.authTokenManager
    name: authTokenManager
    fullName: authTokenManager
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - vss-web-extension-sdk.IAuthTokenManager
  - uid: vss-web-extension-sdk.GraphHttpClient4.cachepoliciesApiVersion
    name: cachepoliciesApiVersion
    fullName: cachepoliciesApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.checkMembershipExistence
    name: >-
      checkMembershipExistence(subjectDescriptor: string, containerDescriptor:
      string)
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Check to see if a membership relationship between a
      container and subject exists
    syntax:
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: The group or user that is a child of the relationship.
        - id: containerDescriptor
          type:
            - string
          description: The group that is the parent in the relationship.
      content: >-
        function checkMembershipExistence(subjectDescriptor: string,
        containerDescriptor: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.createGroup
    name: >-
      createGroup(creationContext: GraphGroupCreationContext, scopeDescriptor?:
      string, groupDescriptors?: function)
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Create a new Team Services group or materialize an existing
      AAD group.  The body of the request must be a derived type of
      GraphGroupCreationContext: - GraphGroupVstsCreationContext - Create a new
      Team Services group that is not backed by an external provider. -
      GraphGroupMailAddressCreationContext - Create a new group using the mail
      address as a reference to an existing group from an external AD or AAD
      backed provider. - GraphGroupOriginIdCreationContext - Create a new group
      using the OriginID as a reference to a group from an external AD or AAD
      backed provider.  Optionally, you can add the newly created group as a
      member of an existing Team Services group and/or specify a custom storage
      key for the group.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GraphGroupCreationContext
          type:
            - GraphGroupCreationContext
          description: >-
            The subset of the full graph group used to uniquely find the graph
            subject in an external provider.
        - id: scopeDescriptor
          type:
            - string
          description: ''
          optional: true
        - id: groupDescriptors
          type:
            - function
          description: >-
            A comma separated list of descriptors referencing groups you want
            the graph group to join
          optional: true
      content: >-
        function createGroup(creationContext: GraphGroupCreationContext,
        scopeDescriptor?: string, groupDescriptors?: function)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.createUser
    name: >-
      createUser(creationContext: GraphUserCreationContext, groupDescriptors?:
      function)
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Materialize an existing AAD or MSA user into the VSTS
      account.  Adding a user to an account is required before the user can be
      added to VSTS groups or assigned an asset.  The body of the request must
      be a derived type of GraphUserCreationContext: -
      GraphUserMailAddressCreationContext - Create a new user using the UPN as a
      reference to an existing user from an external AD or AAD backed provider.
      - GraphUserOriginIdCreationContext - Create a new user using the OriginID
      as a reference to an existing user from an external AD or AAD backed
      provider. - GraphUserPrincipalNameCreationContext - Create a new user
      using the principal name as a reference to an existing user from an
      external AD or AAD backed provider.  If the user to be added corresponds
      to a user that was previously deleted, then that user will be restored. 
      Optionally, you can add the newly created user as a member of an existing
      Team Services group and/or specify a custom storage key for the user.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GraphUserCreationContext
          type:
            - GraphUserCreationContext
          description: >-
            The subset of the full graph user used to uniquely find the graph
            subject in an external provider.
        - id: groupDescriptors
          type:
            - function
          description: >-
            A comma separated list of descriptors of groups you want the graph
            user to join
          optional: true
      content: >-
        function createUser(creationContext: GraphUserCreationContext,
        groupDescriptors?: function)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.deleteGroup
    name: 'deleteGroup(groupDescriptor: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Removes a Team Services group from all of its parent groups.
      The group will still be visible, but membership checks for the group, and
      all descendants which derive membership through it, will return false.”
    syntax:
      parameters:
        - id: groupDescriptor
          type:
            - string
          description: The descriptor of the group to delete.
      content: 'function deleteGroup(groupDescriptor: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.deleteUser
    name: 'deleteUser(userDescriptor: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Disables a user.  Calls to GET .../users/{persistentId} will
      return the user with disabled marked true. Other GET calls, which may
      return multiple users, can control whether or not deleted users should be
      returned using the disabled flag, which defaults to false.
    syntax:
      parameters:
        - id: userDescriptor
          type:
            - string
          description: The descriptor of the user to delete.
      content: 'function deleteUser(userDescriptor: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.descriptorsApiVersion
    name: descriptorsApiVersion
    fullName: descriptorsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.findGroupsBySearchFactor
    name: >-
      findGroupsBySearchFactor(searchFactor: function, searchValue?: string,
      forceDomainQualification?: boolean)
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] This endpoint returns a result for any group that has ever
      been valid in the system, even if the group has since been deleted or has
      had all their memberships deleted. The current validity of the group is
      indicated through its disabled property, which is omitted when false.
    syntax:
      parameters:
        - id: searchFactor
          type:
            - function
          description: The search factor for what it is that you are searching for
        - id: searchValue
          type:
            - string
          description: The value of the search factor
          optional: true
        - id: forceDomainQualification
          type:
            - boolean
          description: >-
            In cases that you are searching for principle name, this parameter
            will specify that system should force the principle name being
            domain qualified
          optional: true
      content: >-
        function findGroupsBySearchFactor(searchFactor: function, searchValue?:
        string, forceDomainQualification?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.findUsersBySearchFactor
    name: >-
      findUsersBySearchFactor(searchFactor: function, searchValue?: string,
      forceDomainQualification?: boolean)
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] This endpoint returns a result for any user that has ever
      been valid in the system, even if the user has since been deleted or has
      had all their memberships deleted. The current validity of the user is
      indicated through its disabled property, which is omitted when false.
    syntax:
      parameters:
        - id: searchFactor
          type:
            - function
          description: The search factor for what it is that you are searching for
        - id: searchValue
          type:
            - string
          description: The value of the search factor
          optional: true
        - id: forceDomainQualification
          type:
            - boolean
          description: >-
            In cases that you are searching for principle name, this parameter
            will specify that system should force the principle name being
            domain qualified
          optional: true
      content: >-
        function findUsersBySearchFactor(searchFactor: function, searchValue?:
        string, forceDomainQualification?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.forceOptionsCallForAutoNegotiate
    name: forceOptionsCallForAutoNegotiate
    fullName: forceOptionsCallForAutoNegotiate
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - boolean
  - uid: vss-web-extension-sdk.GraphHttpClient4.getDescriptor
    name: 'getDescriptor(storageKey: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Resolve a storage key to a descriptor'
    syntax:
      parameters:
        - id: storageKey
          type:
            - string
          description: 'Storage key of the subject (user, group, scope, etc.) to resolve'
      content: 'function getDescriptor(storageKey: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.getGroup
    name: 'getGroup(groupDescriptor: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Get a group by its descriptor.  The group will be returned
      even if it has been deleted from the account or has had all its
      memberships deleted.
    syntax:
      parameters:
        - id: groupDescriptor
          type:
            - string
          description: The descriptor of the desired graph group.
      content: 'function getGroup(groupDescriptor: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.getGroups
    name: >-
      getGroups(scopeDescriptor?: string, subjectTypes?: function,
      continuationToken?: string)
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Gets a list of all groups in the current scope (usually
      organization or account). The optional parameters are used to filter down
      the returned results. Returned results are in no guaranteed order.  Since
      the list of groups may be large, results are returned in pages of 200
      groups.  If there are more results than can be returned in a single page,
      the result set will containt a continuation token for retrieval of the
      next set of results.
    syntax:
      parameters:
        - id: scopeDescriptor
          type:
            - string
          description: Specify a non-default scope to search for groups.
          optional: true
        - id: subjectTypes
          type:
            - function
          description: >-
            A comma separated list of user subject subtypes to reduce the
            retrieved results, e.g.
            Microsoft.IdentityModel.Claims.ClaimsIdentity
          optional: true
        - id: continuationToken
          type:
            - string
          description: >-
            An opaque data blog that allows the next page of data to resume
            immediately after where the previous page ended. The only reliable
            way to know if there is more data left is the presence of a
            continuation token.
          optional: true
      content: >-
        function getGroups(scopeDescriptor?: string, subjectTypes?: function,
        continuationToken?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.getMembership
    name: 'getMembership(subjectDescriptor: string, containerDescriptor: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Get a membership relationship between a container and
      subject
    syntax:
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: A descriptor to the member in the relationship.
        - id: containerDescriptor
          type:
            - string
          description: A descriptor to the container in the relationship.
      content: >-
        function getMembership(subjectDescriptor: string, containerDescriptor:
        string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.getMemberships
    name: >-
      getMemberships(subjectDescriptor: string, direction?: function, depth?:
      number)
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Get all the memberships where this descriptor is a member in
      the relationship. The default value for direction is 'up' meaning return
      all memberships where the subject is a member (e.g. all groups the subject
      is a member of).  Alternatively, passing the direction as 'down' will
      return all memberships where the subject is a container (e.g. all members
      of the subject group).
    syntax:
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: Fetch all direct memberships of this descriptor.
        - id: direction
          type:
            - function
          description: Defaults to up.
          optional: true
        - id: depth
          type:
            - number
          description: >-
            The maximum number of edges to traverse up or down the membership
            tree. Currently the only supported value is '1'.
          optional: true
      content: >-
        function getMemberships(subjectDescriptor: string, direction?: function,
        depth?: number)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.getMembershipState
    name: 'getMembershipState(subjectDescriptor: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: ''
      content: 'function getMembershipState(subjectDescriptor: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.getStorageKey
    name: 'getStorageKey(descriptor: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Resolve a descriptor to a storage key.'
    syntax:
      parameters:
        - id: descriptor
          type:
            - string
          description: 'Descriptor of the subject (user, group, scope, etc.) to resolve'
      content: 'function getStorageKey(descriptor: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.getUser
    name: 'getUser(userDescriptor: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get a user by its descriptor.'
    syntax:
      parameters:
        - id: userDescriptor
          type:
            - string
          description: The descriptor of the desired user.
      content: 'function getUser(userDescriptor: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.getUsers
    name: 'getUsers(subjectTypes?: function, continuationToken?: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Get a list of all users in a given scope.  Since the list of
      users may be large, results are returned in pages of 200 users.  If there
      are more results than can be returned in a single page, the result set
      will containt a continuation token for retrieval of the next set of
      results.
    syntax:
      parameters:
        - id: subjectTypes
          type:
            - function
          description: >-
            A comma separated list of user subject subtypes to reduce the
            retrieved results, e.g.
            Microsoft.IdentityModel.Claims.ClaimsIdentity>
          optional: true
        - id: continuationToken
          type:
            - string
          description: >-
            An opaque data blog that allows the next page of data to resume
            immediately after where the previous page ended. The only reliable
            way to know if there is more data left is the presence of a
            continuation token.
          optional: true
      content: 'function getUsers(subjectTypes?: function, continuationToken?: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.GraphHttpClient4.graphGlobalExtendedPropertyBatchApiVersion
    name: graphGlobalExtendedPropertyBatchApiVersion
    fullName: graphGlobalExtendedPropertyBatchApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.constructor
    name: 'GraphHttpClient4(rootRequestPath: string, options?: IVssHttpClientOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rootRequestPath
          type:
            - string
          description: ''
        - id: vss-web-extension-sdk.IVssHttpClientOptions
          type:
            - IVssHttpClientOptions
          description: ''
          optional: true
      content: >-
        new GraphHttpClient4(rootRequestPath: string, options?:
        IVssHttpClientOptions)
      return:
        type:
          - vss-web-extension-sdk.GraphHttpClient4
    type: constructor
  - uid: vss-web-extension-sdk.GraphHttpClient4.groupsApiVersion
    name: groupsApiVersion
    fullName: groupsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.idsApiVersion
    name: idsApiVersion
    fullName: idsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.lookupSubjects
    name: 'lookupSubjects(subjectLookup: GraphSubjectLookup)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Resolve descriptors to users or groups (Subjects) in a batch'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GraphSubjectLookup
          type:
            - GraphSubjectLookup
          description: ''
      content: 'function lookupSubjects(subjectLookup: GraphSubjectLookup)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.memberlookupApiVersion
    name: memberlookupApiVersion
    fullName: memberlookupApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.membersApiVersion
    name: membersApiVersion
    fullName: membersApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.membersApiVersion_42939f1e
    name: membersApiVersion_42939f1e
    fullName: membersApiVersion_42939f1e
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.membersApiVersion_8b9ecdb2
    name: membersApiVersion_8b9ecdb2
    fullName: membersApiVersion_8b9ecdb2
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.membershipsApiVersion
    name: membershipsApiVersion
    fullName: membershipsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.membershipsbatchApiVersion
    name: membershipsbatchApiVersion
    fullName: membershipsbatchApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.membershipstatesApiVersion
    name: membershipstatesApiVersion
    fullName: membershipstatesApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.membershipTraversalsApiVersion
    name: membershipTraversalsApiVersion
    fullName: membershipTraversalsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.removeMembership
    name: 'removeMembership(subjectDescriptor: string, containerDescriptor: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Deletes a membership between a container and subject'
    syntax:
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: >-
            A descriptor to a group or user that is the child subject in the
            relationship.
        - id: containerDescriptor
          type:
            - string
          description: A descriptor to a group that is the container in the relationship.
      content: >-
        function removeMembership(subjectDescriptor: string,
        containerDescriptor: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.scopesApiVersion
    name: scopesApiVersion
    fullName: scopesApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.shardingstateApiVersion
    name: shardingstateApiVersion
    fullName: shardingstateApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.storagekeysApiVersion
    name: storagekeysApiVersion
    fullName: storagekeysApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.subjectlookupApiVersion
    name: subjectlookupApiVersion
    fullName: subjectlookupApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.subjectsApiVersion
    name: subjectsApiVersion
    fullName: subjectsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4.updateGroup
    name: 'updateGroup(groupDescriptor: string, patchDocument: JsonPatchDocument)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Update the properties of a Team Services group.  Currently
      limited to only changing the description and account name.
    syntax:
      parameters:
        - id: groupDescriptor
          type:
            - string
          description: The descriptor of the group to modify.
        - id: vss-web-extension-sdk.JsonPatchDocument
          type:
            - JsonPatchDocument
          description: The JSON+Patch document containing the fields to alter.
      content: >-
        function updateGroup(groupDescriptor: string, patchDocument:
        JsonPatchDocument)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4.usersApiVersion
    name: usersApiVersion
    fullName: usersApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4._beginGetLocation
    name: '_beginGetLocation(area: string, locationId: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Gets information about an API resource location (route template, supported
      versions, etc.)
    syntax:
      parameters:
        - id: area
          type:
            - string
          description: resource area name
        - id: locationId
          type:
            - string
          description: |
            Guid of the location to get
      content: 'function _beginGetLocation(area: string, locationId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4._beginRequest
    name: >-
      _beginRequest(requestParams: VssApiResourceRequestParams, useAjaxResult?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: Issue a request to a VSS REST endpoint.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.VssApiResourceRequestParams
          type:
            - VssApiResourceRequestParams
          description: request options
        - id: useAjaxResult
          type:
            - boolean
          description: >-
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used
          optional: true
      content: >-
        function _beginRequest(requestParams: VssApiResourceRequestParams,
        useAjaxResult?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4._beginRequestWithAjaxResult
    name: '_beginRequestWithAjaxResult(requestParams: VssApiResourceRequestParams)'
    children: []
    langs:
      - typeScript
    summary: >-
      Issue a request to a VSS REST endpoint and makes sure the result contains
      jqXHR. Use spread to access jqXHR.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.VssApiResourceRequestParams
          type:
            - VssApiResourceRequestParams
          description: request options
      content: >-
        function _beginRequestWithAjaxResult(requestParams:
        VssApiResourceRequestParams)
      return:
        type:
          - Q.Promise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4._issueAjaxRequest
    name: >-
      _issueAjaxRequest(requestUrl: string, ajaxOptions: JQueryAjaxSettings,
      useAjaxResult?: boolean, vssRequestOptions?: IVssAjaxOptions)
    children: []
    langs:
      - typeScript
    summary: >-
      Issue an AJAX request. This is a wrapper around jquery's ajax method that
      handles VSS authentication

      and triggers events that can be listened to by other modules.
    syntax:
      parameters:
        - id: requestUrl
          type:
            - string
          description: Url to send the request to
        - id: ajaxOptions
          type:
            - JQueryAjaxSettings
          description: jQuery.ajax options
        - id: useAjaxResult
          type:
            - boolean
          description: >
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used.
          optional: true
        - id: vss-web-extension-sdk.IVssAjaxOptions
          type:
            - IVssAjaxOptions
          description: ''
          optional: true
      content: >-
        function _issueAjaxRequest(requestUrl: string, ajaxOptions:
        JQueryAjaxSettings, useAjaxResult?: boolean, vssRequestOptions?:
        IVssAjaxOptions)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GraphHttpClient4._rootRequestPath
    name: _rootRequestPath
    fullName: _rootRequestPath
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.GraphHttpClient4._setInitializationPromise
    name: '_setInitializationPromise(promise: IPromise)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets a promise that is waited on before any requests are issued. Can be
      used to asynchronously

      set the request url and auth token manager.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IPromise
          type:
            - IPromise
          description: ''
      content: 'function _setInitializationPromise(promise: IPromise)'
    type: method
