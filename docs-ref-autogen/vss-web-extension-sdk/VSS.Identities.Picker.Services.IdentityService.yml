### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService
    name: IdentityService
    fullName: IdentityService
    children:
      - >-
        vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService.getIdentities
      - >-
        vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService.getIdentityConnections
      - >-
        vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService.getIdentityImages
      - >-
        vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService.constructor
      - >-
        vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService.MAX_RESULTS
      - >-
        vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService.MIN_RESULTS
    langs:
      - typeScript
    type: class
    summary: >-
      This client service is meant to be used only by the framework identity
      picker controls and should not be used elsewhere.
    extends:
      - '@vss-web-extension-sdk.VSS.Service.VssService'
    source:
      path: vss.d.ts
      startLine: 26574
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Identities/Picker/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService.getIdentities
    name: >-
      getIdentities(prefix: string, operationScope: IOperationScope,
      identityType: IEntityType, options?: IIdentityServiceOptions,
      queryTypeHint?: IQueryTypeHint, extensionOptions?:
      IIdentityPickerExtensionOptions)
    children: []
    langs:
      - typeScript
    summary: Get all users with specific properties starting with the prefix.
    syntax:
      parameters:
        - id: prefix
          type:
            - string
          description: ''
        - id: operationScope
          type:
            - >-
              @vss-web-extension-sdk.VSS.Identities.Picker.Services.IOperationScope
          description: ''
        - id: identityType
          type:
            - '@vss-web-extension-sdk.VSS.Identities.Picker.Services.IEntityType'
          description: ''
        - id: options
          type:
            - >-
              @vss-web-extension-sdk.VSS.Identities.Picker.Services.IIdentityServiceOptions
          description: ''
          optional: true
        - id: queryTypeHint
          type:
            - >-
              @vss-web-extension-sdk.VSS.Identities.Picker.Services.IQueryTypeHint
          description: ''
          optional: true
        - id: extensionOptions
          type:
            - >-
              @vss-web-extension-sdk.VSS.Identities.Picker.Services.IIdentityPickerExtensionOptions
          description: ''
          optional: true
      content: >-
        function getIdentities(prefix: string, operationScope: IOperationScope,
        identityType: IEntityType, options?: IIdentityServiceOptions,
        queryTypeHint?: IQueryTypeHint, extensionOptions?:
        IIdentityPickerExtensionOptions)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IDictionaryStringTo<@vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.VSS.Identities.Picker.RestClient.QueryTokenResultModel>>
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService.getIdentityConnections
    name: >-
      getIdentityConnections(identity: IEntity, operationScope: IOperationScope,
      identityType: IEntityType, connectionType: IConnectionType, options?:
      IIdentityServiceOptions, extensionOptions?:
      IIdentityPickerExtensionOptions, depth?: number)
    children: []
    langs:
      - typeScript
    summary: >-
      Get an identity's connections in the overlay of the AD graph on the VSTS
      Identity graph
    syntax:
      parameters:
        - id: identity
          type:
            - '@vss-web-extension-sdk.VSS.Identities.Picker.RestClient.IEntity'
          description: ''
        - id: operationScope
          type:
            - >-
              @vss-web-extension-sdk.VSS.Identities.Picker.Services.IOperationScope
          description: ''
        - id: identityType
          type:
            - '@vss-web-extension-sdk.VSS.Identities.Picker.Services.IEntityType'
          description: ''
        - id: connectionType
          type:
            - >-
              @vss-web-extension-sdk.VSS.Identities.Picker.Services.IConnectionType
          description: ''
        - id: options
          type:
            - >-
              @vss-web-extension-sdk.VSS.Identities.Picker.Services.IIdentityServiceOptions
          description: ''
          optional: true
        - id: extensionOptions
          type:
            - >-
              @vss-web-extension-sdk.VSS.Identities.Picker.Services.IIdentityPickerExtensionOptions
          description: ''
          optional: true
        - id: depth
          type:
            - number
          description: ''
          optional: true
      content: >-
        function getIdentityConnections(identity: IEntity, operationScope:
        IOperationScope, identityType: IEntityType, connectionType:
        IConnectionType, options?: IIdentityServiceOptions, extensionOptions?:
        IIdentityPickerExtensionOptions, depth?: number)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.VSS.Identities.Picker.RestClient.IdentitiesGetConnectionsResponseModel>
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService.getIdentityImages
    name: >-
      getIdentityImages(identities: IEntity[], options?:
      IIdentityServiceOptions)
    children: []
    langs:
      - typeScript
    summary: >-
      Get images of identities asynchronously, if available. Currently only
      supports AAD and profile images.
        @param  successCallback:    This is called once all the images have been loaded for the identities supplied
        @param  errorCallback:      This is called for each error received from either the controller or one of the federated services
    syntax:
      parameters:
        - id: identities
          type:
            - '@vss-web-extension-sdk.VSS.Identities.Picker.RestClient.IEntity[]'
          description: ''
        - id: options
          type:
            - >-
              @vss-web-extension-sdk.VSS.Identities.Picker.Services.IIdentityServiceOptions
          description: ''
          optional: true
      content: >-
        function getIdentityImages(identities: IEntity[], options?:
        IIdentityServiceOptions)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IDictionaryStringTo<@vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.IDictionaryStringTo<string>>>
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService.constructor
    name: IdentityService()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: new IdentityService()
    type: constructor
  - uid: >-
      vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService.MAX_RESULTS
    name: MAX_RESULTS
    fullName: MAX_RESULTS
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: static number MAX_RESULTS
      return:
        type:
          - number
  - uid: >-
      vss-web-extension-sdk.VSS.Identities.Picker.Services.IdentityService.MIN_RESULTS
    name: MIN_RESULTS
    fullName: MIN_RESULTS
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: static number MIN_RESULTS
      return:
        type:
          - number
