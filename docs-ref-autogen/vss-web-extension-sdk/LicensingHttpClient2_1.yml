### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1
    name: LicensingHttpClient2_1
    fullName: LicensingHttpClient2_1
    children:
      - >-
        vss-web-extension-sdk.LicensingHttpClient2_1.assignAccountEntitlementForUser
      - >-
        vss-web-extension-sdk.LicensingHttpClient2_1.assignAvailableAccountEntitlement
      - >-
        vss-web-extension-sdk.LicensingHttpClient2_1.bulkGetExtensionsAssignedToUsers
      - vss-web-extension-sdk.LicensingHttpClient2_1.computeExtensionRights
      - vss-web-extension-sdk.LicensingHttpClient2_1.deleteUserEntitlements
      - vss-web-extension-sdk.LicensingHttpClient2_1.getAccountEntitlement
      - >-
        vss-web-extension-sdk.LicensingHttpClient2_1.getAccountEntitlementForUser
      - vss-web-extension-sdk.LicensingHttpClient2_1.getAccountLicensesUsage
      - vss-web-extension-sdk.LicensingHttpClient2_1.getCertificate
      - vss-web-extension-sdk.LicensingHttpClient2_1.getClientRights
      - vss-web-extension-sdk.LicensingHttpClient2_1.getEntitlements
      - vss-web-extension-sdk.LicensingHttpClient2_1.getExtensionLicenseData
      - vss-web-extension-sdk.LicensingHttpClient2_1.getExtensionRights
      - vss-web-extension-sdk.LicensingHttpClient2_1.getMsdnPresence
      - vss-web-extension-sdk.LicensingHttpClient2_1.getUsageRights
      - vss-web-extension-sdk.LicensingHttpClient2_1.constructor
      - >-
        vss-web-extension-sdk.LicensingHttpClient2_1.obtainAvailableAccountEntitlements
      - vss-web-extension-sdk.LicensingHttpClient2_1.registerExtensionLicense
      - vss-web-extension-sdk.LicensingHttpClient2_1._beginGetLocation
      - vss-web-extension-sdk.LicensingHttpClient2_1._beginRequest
      - vss-web-extension-sdk.LicensingHttpClient2_1._beginRequestWithAjaxResult
      - vss-web-extension-sdk.LicensingHttpClient2_1._issueAjaxRequest
      - vss-web-extension-sdk.LicensingHttpClient2_1._setInitializationPromise
    langs:
      - typeScript
    type: class
    summary: ''
  - uid: >-
      vss-web-extension-sdk.LicensingHttpClient2_1.assignAccountEntitlementForUser
    name: >-
      assignAccountEntitlementForUser(body: AccountEntitlementUpdateModel,
      userId: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Assign an explicit account entitlement'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.AccountEntitlementUpdateModel
          type:
            - AccountEntitlementUpdateModel
          description: The update model for the entitlement
        - id: userId
          type:
            - string
          description: The id of the user
      content: >-
        function assignAccountEntitlementForUser(body:
        AccountEntitlementUpdateModel, userId: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.LicensingHttpClient2_1.assignAvailableAccountEntitlement
    name: 'assignAvailableAccountEntitlement(userId: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Assign an available entitilement to a user'
    syntax:
      parameters:
        - id: userId
          type:
            - string
          description: The user to which to assign the entitilement
      content: 'function assignAvailableAccountEntitlement(userId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.LicensingHttpClient2_1.bulkGetExtensionsAssignedToUsers
    name: 'bulkGetExtensionsAssignedToUsers(userIds: function)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Returns extensions that are currrently assigned to the users
      that are in the account
    syntax:
      parameters:
        - id: userIds
          type:
            - function
          description: ''
      content: 'function bulkGetExtensionsAssignedToUsers(userIds: function)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.computeExtensionRights
    name: 'computeExtensionRights(ids: function)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: ids
          type:
            - function
          description: ''
      content: 'function computeExtensionRights(ids: function)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.deleteUserEntitlements
    name: 'deleteUserEntitlements(userId: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: userId
          type:
            - string
          description: ''
      content: 'function deleteUserEntitlements(userId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.getAccountEntitlement
    name: getAccountEntitlement()
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Gets the account entitlement of the current user it is
      mapped to _apis/licensing/entitlements/me so specifically is looking for
      the user of the request
    syntax:
      parameters: []
      content: function getAccountEntitlement()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.getAccountEntitlementForUser
    name: 'getAccountEntitlementForUser(userId: string, determineRights?: boolean)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get the entitlements for a user'
    syntax:
      parameters:
        - id: userId
          type:
            - string
          description: The id of the user
        - id: determineRights
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getAccountEntitlementForUser(userId: string, determineRights?:
        boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.getAccountLicensesUsage
    name: getAccountLicensesUsage()
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters: []
      content: function getAccountLicensesUsage()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.getCertificate
    name: getCertificate()
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters: []
      content: function getCertificate()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.getClientRights
    name: >-
      getClientRights(rightName?: string, productVersion?: string, edition?:
      string, relType?: string, includeCertificate?: boolean, canary?: string,
      machineId?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: rightName
          type:
            - string
          description: ''
          optional: true
        - id: productVersion
          type:
            - string
          description: ''
          optional: true
        - id: edition
          type:
            - string
          description: ''
          optional: true
        - id: relType
          type:
            - string
          description: ''
          optional: true
        - id: includeCertificate
          type:
            - boolean
          description: ''
          optional: true
        - id: canary
          type:
            - string
          description: ''
          optional: true
        - id: machineId
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getClientRights(rightName?: string, productVersion?: string,
        edition?: string, relType?: string, includeCertificate?: boolean,
        canary?: string, machineId?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.getEntitlements
    name: getEntitlements()
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters: []
      content: function getEntitlements()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.getExtensionLicenseData
    name: 'getExtensionLicenseData(extensionId: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: extensionId
          type:
            - string
          description: ''
      content: 'function getExtensionLicenseData(extensionId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.getExtensionRights
    name: getExtensionRights()
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters: []
      content: function getExtensionRights()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.getMsdnPresence
    name: getMsdnPresence()
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters: []
      content: function getMsdnPresence()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.getUsageRights
    name: 'getUsageRights(rightName?: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: rightName
          type:
            - string
          description: ''
          optional: true
      content: 'function getUsageRights(rightName?: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.constructor
    name: >-
      LicensingHttpClient2_1(rootRequestPath: string, options?:
      IVssHttpClientOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rootRequestPath
          type:
            - string
          description: ''
        - id: vss-web-extension-sdk.IVssHttpClientOptions
          type:
            - IVssHttpClientOptions
          description: ''
          optional: true
      content: >-
        new LicensingHttpClient2_1(rootRequestPath: string, options?:
        IVssHttpClientOptions)
      return:
        type:
          - vss-web-extension-sdk.LicensingHttpClient2_1
    type: constructor
  - uid: >-
      vss-web-extension-sdk.LicensingHttpClient2_1.obtainAvailableAccountEntitlements
    name: 'obtainAvailableAccountEntitlements(userIds: function)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Returns AccountEntitlements that are currently assigned to
      the given list of users in the account
    syntax:
      parameters:
        - id: userIds
          type:
            - function
          description: List of user Ids.
      content: 'function obtainAvailableAccountEntitlements(userIds: function)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1.registerExtensionLicense
    name: 'registerExtensionLicense(extensionLicenseData: ExtensionLicenseData)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.ExtensionLicenseData
          type:
            - ExtensionLicenseData
          description: ''
      content: >-
        function registerExtensionLicense(extensionLicenseData:
        ExtensionLicenseData)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1._beginGetLocation
    name: '_beginGetLocation(area: string, locationId: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Gets information about an API resource location (route template, supported
      versions, etc.)
    syntax:
      parameters:
        - id: area
          type:
            - string
          description: resource area name
        - id: locationId
          type:
            - string
          description: |
            Guid of the location to get
      content: 'function _beginGetLocation(area: string, locationId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1._beginRequest
    name: >-
      _beginRequest(requestParams: VssApiResourceRequestParams, useAjaxResult?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: Issue a request to a VSS REST endpoint.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.VssApiResourceRequestParams
          type:
            - VssApiResourceRequestParams
          description: request options
        - id: useAjaxResult
          type:
            - boolean
          description: >-
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used
          optional: true
      content: >-
        function _beginRequest(requestParams: VssApiResourceRequestParams,
        useAjaxResult?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1._beginRequestWithAjaxResult
    name: '_beginRequestWithAjaxResult(requestParams: VssApiResourceRequestParams)'
    children: []
    langs:
      - typeScript
    summary: >-
      Issue a request to a VSS REST endpoint and makes sure the result contains
      jqXHR. Use spread to access jqXHR.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.VssApiResourceRequestParams
          type:
            - VssApiResourceRequestParams
          description: request options
      content: >-
        function _beginRequestWithAjaxResult(requestParams:
        VssApiResourceRequestParams)
      return:
        type:
          - Q.Promise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1._issueAjaxRequest
    name: >-
      _issueAjaxRequest(requestUrl: string, ajaxOptions: JQueryAjaxSettings,
      useAjaxResult?: boolean, vssRequestOptions?: IVssAjaxOptions)
    children: []
    langs:
      - typeScript
    summary: >-
      Issue an AJAX request. This is a wrapper around jquery's ajax method that
      handles VSS authentication

      and triggers events that can be listened to by other modules.
    syntax:
      parameters:
        - id: requestUrl
          type:
            - string
          description: Url to send the request to
        - id: ajaxOptions
          type:
            - JQueryAjaxSettings
          description: jQuery.ajax options
        - id: useAjaxResult
          type:
            - boolean
          description: >
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used.
          optional: true
        - id: vss-web-extension-sdk.IVssAjaxOptions
          type:
            - IVssAjaxOptions
          description: ''
          optional: true
      content: >-
        function _issueAjaxRequest(requestUrl: string, ajaxOptions:
        JQueryAjaxSettings, useAjaxResult?: boolean, vssRequestOptions?:
        IVssAjaxOptions)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.LicensingHttpClient2_1._setInitializationPromise
    name: '_setInitializationPromise(promise: IPromise)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets a promise that is waited on before any requests are issued. Can be
      used to asynchronously

      set the request url and auth token manager.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IPromise
          type:
            - IPromise
          description: ''
      content: 'function _setInitializationPromise(promise: IPromise)'
    type: method
