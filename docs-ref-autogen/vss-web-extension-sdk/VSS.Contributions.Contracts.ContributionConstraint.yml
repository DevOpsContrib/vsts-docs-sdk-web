### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Contributions.Contracts.ContributionConstraint
    name: ContributionConstraint
    fullName: ContributionConstraint
    children:
      - >-
        vss-web-extension-sdk.VSS.Contributions.Contracts.ContributionConstraint.group
      - >-
        vss-web-extension-sdk.VSS.Contributions.Contracts.ContributionConstraint.inverse
      - >-
        vss-web-extension-sdk.VSS.Contributions.Contracts.ContributionConstraint.name
      - >-
        vss-web-extension-sdk.VSS.Contributions.Contracts.ContributionConstraint.properties
      - >-
        vss-web-extension-sdk.VSS.Contributions.Contracts.ContributionConstraint.relationships
    langs:
      - typeScript
    type: interface
    summary: >-
      Specifies a constraint that can be used to dynamically include/exclude a
      given contribution
    source:
      path: vss.d.ts
      startLine: 7289
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Contributions/Contracts
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Contracts.ContributionConstraint.group
    name: group
    fullName: group
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      An optional property that can be specified to group constraints together.
      All constraints within a group are AND'd together (all must be evaluate to
      True in order for the contribution to be included). Different groups of
      constraints are OR'd (only one group needs to evaluate to True for the
      contribution to be included).
    syntax:
      content: number group
      return:
        type:
          - number
    module: VSS/Contributions/Contracts
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Contracts.ContributionConstraint.inverse
    name: inverse
    fullName: inverse
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If true, negate the result of the filter (include the contribution if the
      applied filter returns false instead of true)
    syntax:
      content: boolean inverse
      return:
        type:
          - boolean
    module: VSS/Contributions/Contracts
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Contracts.ContributionConstraint.name
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: Name of the IContributionFilter class
    syntax:
      content: string name
      return:
        type:
          - string
    module: VSS/Contributions/Contracts
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Contracts.ContributionConstraint.properties
    name: properties
    fullName: properties
    children: []
    langs:
      - typeScript
    type: property
    summary: Properties that are fed to the contribution filter class
    syntax:
      content: any properties
      return:
        type:
          - any
    module: VSS/Contributions/Contracts
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Contracts.ContributionConstraint.relationships
    name: relationships
    fullName: relationships
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Constraints can be optionally be applied to one or more of the
      relationships defined in the contribution. If no relationships are defined
      then all relationships are associated with the constraint. This means the
      default behaviour will elimiate the contribution from the tree completely
      if the constraint is applied.
    syntax:
      content: 'string[] relationships'
      return:
        type:
          - 'string[]'
    module: VSS/Contributions/Contracts
