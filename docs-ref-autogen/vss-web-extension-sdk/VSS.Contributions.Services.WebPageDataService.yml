### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService
    name: WebPageDataService
    fullName: WebPageDataService
    children:
      - >-
        vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.addResolutionPlugin
      - >-
        vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.ensureDataProvidersResolved
      - >-
        vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.getCachedPageData
      - >-
        vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.getPageData
      - >-
        vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.getPageDataByDataType
      - >-
        vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.getPageDataSource
      - >-
        vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.invalidateCachedProviderData
      - >-
        vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.registerProviderData
      - >-
        vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.reloadCachedProviderData
      - >-
        vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.removePageData
      - >-
        vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.removeResolutionPlugin
    langs:
      - typeScript
    type: class
    summary: Service for obtaining web page data from contributed data providers
    extends:
      name: '@vss-web-extension-sdk.VSS.Service.VssService'
    source:
      path: vss.d.ts
      startLine: 8887
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Contributions/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.addResolutionPlugin
    name: addResolutionPlugin
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Add a plugin handler that gets called when data with the given key has
      been sent from the server
    syntax:
      content: >-
        static function addResolutionPlugin(dataType: string, handler:
        WebPageDataResolutionPlugin)
      parameters:
        - id: dataType
          type:
            - string
          description: The data type property as set in the data provider's contribution
        - id: handler
          type:
            - >-
              @vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataResolutionPlugin
          description: |
            Function called whenever data with the given key has been provided
    module: VSS/Contributions/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.ensureDataProvidersResolved
    name: ensureDataProvidersResolved
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Ensure that all data providers have been resolved for all of the given
      data-provider contributions
    syntax:
      content: >-
        function ensureDataProvidersResolved(contributions: Contribution[],
        refreshIfExpired?: boolean, properties?: any)
      parameters:
        - id: contributions
          type:
            - '@vss-web-extension-sdk.VSS.Contributions.Contracts.Contribution[]'
          description: The data provider contributions to resolve
        - id: refreshIfExpired
          type:
            - boolean
          description: >
            If true, force a server request to re-populate the data provider
            data if the data has expired.  Default is it is always expired.
          optional: true
        - id: properties
          type:
            - any
          description: ''
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<any>'
    module: VSS/Contributions/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.getCachedPageData
    name: getCachedPageData
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get page data from a data provider contribution that is cached, optionally
      queueing an update of the data

      after reading from the cache
    syntax:
      content: >-
        function getCachedPageData<T>(cachedDataProviderContributionId: string,
        primaryDataProviderContributionId?: string, refreshCache?: boolean,
        contractMetadata?: ContractMetadata, reloadCallback?: IResultCallback)
      parameters:
        - id: cachedDataProviderContributionId
          type:
            - string
          description: Id of the data provider which caches data in localStorage
        - id: primaryDataProviderContributionId
          type:
            - string
          description: >-
            Optional contribution id of a data provider to use if it exists. The
            cached data will not be used or updated if this exists.
          optional: true
        - id: refreshCache
          type:
            - boolean
          description: >-
            If true and data was read from the cache, queue up a request to
            update it.
          optional: true
        - id: contractMetadata
          type:
            - '@vss-web-extension-sdk.VSS.Serialization.ContractMetadata'
          description: >
            Optional contract metadata to use when deserializing the JSON island
            data
          optional: true
        - id: reloadCallback
          type:
            - '@vss-web-extension-sdk.IResultCallback'
          description: ''
          optional: true
      return:
        type:
          - T
    module: VSS/Contributions/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.getPageData
    name: getPageData
    children: []
    type: method
    langs:
      - typeScript
    summary: Get web page data that was contributed from the given contribution
    syntax:
      content: >-
        function getPageData<T>(contributionId: string, contractMetadata?:
        ContractMetadata)
      parameters:
        - id: contributionId
          type:
            - string
          description: The data provider key
        - id: contractMetadata
          type:
            - '@vss-web-extension-sdk.VSS.Serialization.ContractMetadata'
          description: |
            Optional contract metadata to use to deserialize the object
          optional: true
      return:
        type:
          - T
    module: VSS/Contributions/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.getPageDataByDataType
    name: getPageDataByDataType
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the page data entries from all data provider contributions with the
      given dataType property.
    syntax:
      content: >-
        function getPageDataByDataType<T>(dataType: string, contractMetadata?:
        ContractMetadata)
      parameters:
        - id: dataType
          type:
            - string
          description: >-
            Value of the dataType property in the data provider contribution's
            properties
        - id: contractMetadata
          type:
            - '@vss-web-extension-sdk.VSS.Serialization.ContractMetadata'
          description: >
            Optional contract metadata to use to deserialize the returned
            values.
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.IDictionaryStringTo<T>'
    module: VSS/Contributions/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.getPageDataSource
    name: getPageDataSource
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the source from which a data provider's data was populated (JSON
      island data, REST call, localStorage, etc.)
    syntax:
      content: 'function getPageDataSource(contributionId: string)'
      parameters:
        - id: contributionId
          type:
            - string
          description: ''
    module: VSS/Contributions/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.invalidateCachedProviderData
    name: invalidateCachedProviderData
    children: []
    type: method
    langs:
      - typeScript
    summary: Invalidate any previously-cached data for the given data provider.
    syntax:
      content: >-
        function invalidateCachedProviderData(cachedDataProviderContributionId:
        string, reloadDataNow?: boolean)
      parameters:
        - id: cachedDataProviderContributionId
          type:
            - string
          description: Contribution id of the data provider
        - id: reloadDataNow
          type:
            - boolean
          description: >
            If true, immediately make a request to repopulate the data
            provider's data
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<any>'
    module: VSS/Contributions/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.registerProviderData
    name: registerProviderData
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Register the given data provider data with this instance of the
      contribution service
    syntax:
      content: >-
        function registerProviderData(result: DataProviderResult, contributions:
        Contribution[], clearExisting?: boolean)
      parameters:
        - id: result
          type:
            - >-
              @vss-web-extension-sdk.VSS.Contributions.Contracts.DataProviderResult
          description: Data provider result to merge-in
        - id: contributions
          type:
            - '@vss-web-extension-sdk.VSS.Contributions.Contracts.Contribution[]'
          description: Contributions to leverage when resolving provider data
        - id: clearExisting
          type:
            - boolean
          description: |
            If true, clear any existing data providers. If false, add to it.
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<any>'
    module: VSS/Contributions/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.reloadCachedProviderData
    name: reloadCachedProviderData
    children: []
    type: method
    langs:
      - typeScript
    summary: Always reloads provider data by queuing up a new request
    syntax:
      content: >-
        function reloadCachedProviderData(cachedDataProviderContributionId:
        string, reloadCallback?: IResultCallback, properties?: any)
      parameters:
        - id: cachedDataProviderContributionId
          type:
            - string
          description: Id of the data provider
        - id: reloadCallback
          type:
            - '@vss-web-extension-sdk.IResultCallback'
          description: ''
          optional: true
        - id: properties
          type:
            - any
          description: >
            Additional properties to pass to the provider on reload as part of
            the context
          optional: true
    module: VSS/Contributions/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.removePageData
    name: removePageData
    children: []
    type: method
    langs:
      - typeScript
    summary: Removes web page data that was contributed from the given contribution
    syntax:
      content: 'function removePageData(contributionId: string)'
      parameters:
        - id: contributionId
          type:
            - string
          description: |
            The data provider key
    module: VSS/Contributions/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Contributions.Services.WebPageDataService.removeResolutionPlugin
    name: removeResolutionPlugin
    children: []
    type: method
    langs:
      - typeScript
    summary: Remove the plugin handler that gets called when data with the given key
    syntax:
      content: 'static function removeResolutionPlugin(dataType: string)'
      parameters:
        - id: dataType
          type:
            - string
          description: |
            The data type property as set in the data provider's contribution
    module: VSS/Contributions/Services
