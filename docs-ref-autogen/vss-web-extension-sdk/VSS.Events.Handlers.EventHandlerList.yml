### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Events.Handlers.EventHandlerList
    name: EventHandlerList
    fullName: EventHandlerList<TSender>
    children:
      - vss-web-extension-sdk.VSS.Events.Handlers.EventHandlerList.constructor
      - vss-web-extension-sdk.VSS.Events.Handlers.EventHandlerList.getHandlers
      - >-
        vss-web-extension-sdk.VSS.Events.Handlers.EventHandlerList.invokeHandlers
      - vss-web-extension-sdk.VSS.Events.Handlers.EventHandlerList.subscribe
      - vss-web-extension-sdk.VSS.Events.Handlers.EventHandlerList.unsubscribe
    langs:
      - typeScript
    type: class
    summary: A list of event handlers
    source:
      path: vss.d.ts
      startLine: 19222
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Events/Handlers
  - uid: vss-web-extension-sdk.VSS.Events.Handlers.EventHandlerList.constructor
    name: 'EventHandlerList(handlers?: IFunctionPPR<TSender>[])'
    children: []
    langs:
      - typeScript
    summary: Creates a new event handler list
    syntax:
      content: 'new EventHandlerList(handlers?: IFunctionPPR<TSender>[])'
      parameters:
        - id: handlers
          type:
            - '@vss-web-extension-sdk.IFunctionPPR<TSender>[]'
          description: |
            Optional initial list of handlers
          optional: true
    type: constructor
  - uid: vss-web-extension-sdk.VSS.Events.Handlers.EventHandlerList.getHandlers
    name: getHandlers()
    children: []
    langs:
      - typeScript
    summary: Get the underlying list of handlers
    syntax:
      content: function getHandlers()
      parameters: []
    type: method
  - uid: vss-web-extension-sdk.VSS.Events.Handlers.EventHandlerList.invokeHandlers
    name: >-
      invokeHandlers(sender?: TSender, eventArgs?: TEventArgs,
      handlerResultFilter?: (result: any) => boolean)
    children: []
    langs:
      - typeScript
    summary: Invoke the subscribed event handlers
    syntax:
      content: >-
        function invokeHandlers(sender?: TSender, eventArgs?: TEventArgs,
        handlerResultFilter?: (result: any) => boolean)
      parameters:
        - id: sender
          type:
            - TSender
          description: The source that is triggering the event
          optional: true
        - id: eventArgs
          type:
            - TEventArgs
          description: Event-specific arguments
          optional: true
        - id: handlerResultFilter
          type:
            - '(result: any) => boolean'
          description: >
            Optional callback method to be able to break out of the handler
            invocation loop based on the return value of a handler. The filter
            should return true to break out of the loop.
          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Events.Handlers.EventHandlerList.subscribe
    name: 'subscribe(handler: IFunctionPPR<TSender>)'
    children: []
    langs:
      - typeScript
    summary: Adds an event handler to the list
    syntax:
      content: 'function subscribe(handler: IFunctionPPR<TSender>)'
      parameters:
        - id: handler
          type:
            - '@vss-web-extension-sdk.IFunctionPPR<TSender>'
          description: |
            Event handler method to register
    type: method
  - uid: vss-web-extension-sdk.VSS.Events.Handlers.EventHandlerList.unsubscribe
    name: 'unsubscribe(handler: IFunctionPPR<TSender>)'
    children: []
    langs:
      - typeScript
    summary: Removes an event handler from the list
    syntax:
      content: 'function unsubscribe(handler: IFunctionPPR<TSender>)'
      parameters:
        - id: handler
          type:
            - '@vss-web-extension-sdk.IFunctionPPR<TSender>'
          description: |
            Event handler method to remove
    type: method
