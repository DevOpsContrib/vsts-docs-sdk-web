### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.CoreHttpClient
    name: CoreHttpClient
    fullName: CoreHttpClient
    children:
      - vss-web-extension-sdk.CoreHttpClient.authTokenManager
      - vss-web-extension-sdk.CoreHttpClient.connectedServicesApiVersion
      - vss-web-extension-sdk.CoreHttpClient.constructor
      - vss-web-extension-sdk.CoreHttpClient.createConnectedService
      - vss-web-extension-sdk.CoreHttpClient.createIdentityMru
      - vss-web-extension-sdk.CoreHttpClient.createOrUpdateProxy
      - vss-web-extension-sdk.CoreHttpClient.createTeam
      - vss-web-extension-sdk.CoreHttpClient.deleteIdentityMru
      - vss-web-extension-sdk.CoreHttpClient.deleteProxy
      - vss-web-extension-sdk.CoreHttpClient.deleteTeam
      - vss-web-extension-sdk.CoreHttpClient.forceOptionsCallForAutoNegotiate
      - vss-web-extension-sdk.CoreHttpClient.getConnectedServiceDetails
      - vss-web-extension-sdk.CoreHttpClient.getConnectedServices
      - vss-web-extension-sdk.CoreHttpClient.getIdentityMru
      - vss-web-extension-sdk.CoreHttpClient.getProcessById
      - vss-web-extension-sdk.CoreHttpClient.getProcesses
      - vss-web-extension-sdk.CoreHttpClient.getProject
      - vss-web-extension-sdk.CoreHttpClient.getProjectCollection
      - vss-web-extension-sdk.CoreHttpClient.getProjectCollections
      - vss-web-extension-sdk.CoreHttpClient.getProjectHistoryEntries
      - vss-web-extension-sdk.CoreHttpClient.getProjectProperties
      - vss-web-extension-sdk.CoreHttpClient.getProjects
      - vss-web-extension-sdk.CoreHttpClient.getProxies
      - vss-web-extension-sdk.CoreHttpClient.getTeam
      - vss-web-extension-sdk.CoreHttpClient.getTeamMembers
      - vss-web-extension-sdk.CoreHttpClient.getTeams
      - vss-web-extension-sdk.CoreHttpClient.identityMruApiVersion
      - vss-web-extension-sdk.CoreHttpClient.membersApiVersion
      - vss-web-extension-sdk.CoreHttpClient.processesApiVersion
      - vss-web-extension-sdk.CoreHttpClient.projectCollectionsApiVersion
      - vss-web-extension-sdk.CoreHttpClient.projectsApiVersion
      - vss-web-extension-sdk.CoreHttpClient.propertiesApiVersion
      - vss-web-extension-sdk.CoreHttpClient.proxiesApiVersion
      - vss-web-extension-sdk.CoreHttpClient.queueCreateProject
      - vss-web-extension-sdk.CoreHttpClient.queueDeleteProject
      - vss-web-extension-sdk.CoreHttpClient.serviceInstanceId
      - vss-web-extension-sdk.CoreHttpClient.setProjectProperties
      - vss-web-extension-sdk.CoreHttpClient.teamsApiVersion
      - vss-web-extension-sdk.CoreHttpClient.updateIdentityMru
      - vss-web-extension-sdk.CoreHttpClient.updateProject
      - vss-web-extension-sdk.CoreHttpClient.updateTeam
      - vss-web-extension-sdk.CoreHttpClient._beginGetLocation
      - vss-web-extension-sdk.CoreHttpClient._beginRequest
      - vss-web-extension-sdk.CoreHttpClient._beginRequestWithAjaxResult
      - vss-web-extension-sdk.CoreHttpClient._issueAjaxRequest
      - vss-web-extension-sdk.CoreHttpClient._rootRequestPath
      - vss-web-extension-sdk.CoreHttpClient._setInitializationPromise
    langs:
      - typeScript
    type: class
    summary: ''
  - uid: vss-web-extension-sdk.CoreHttpClient.authTokenManager
    name: authTokenManager
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - vss-web-extension-sdk.IAuthTokenManager
  - uid: vss-web-extension-sdk.CoreHttpClient.connectedServicesApiVersion
    name: connectedServicesApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CoreHttpClient.constructor
    name: 'CoreHttpClient(rootRequestPath: string, options?: IVssHttpClientOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rootRequestPath
          type:
            - string
          description: ''
        - id: vss-web-extension-sdk.IVssHttpClientOptions
          type:
            - IVssHttpClientOptions
          description: ''
          optional: true
      content: >-
        new CoreHttpClient(rootRequestPath: string, options?:
        IVssHttpClientOptions)
      return:
        type:
          - vss-web-extension-sdk.CoreHttpClient
    type: constructor
  - uid: vss-web-extension-sdk.CoreHttpClient.createConnectedService
    name: >-
      createConnectedService(connectedServiceCreationData:
      WebApiConnectedServiceDetails, projectId: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: vss-web-extension-sdk.WebApiConnectedServiceDetails
          type:
            - WebApiConnectedServiceDetails
          description: ''
        - id: projectId
          type:
            - string
          description: ''
      content: >-
        function createConnectedService(connectedServiceCreationData:
        WebApiConnectedServiceDetails, projectId: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.createIdentityMru
    name: 'createIdentityMru(mruData: IdentityData, mruName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IdentityData
          type:
            - IdentityData
          description: ''
        - id: mruName
          type:
            - string
          description: ''
      content: 'function createIdentityMru(mruData: IdentityData, mruName: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.createOrUpdateProxy
    name: 'createOrUpdateProxy(proxy: Proxy)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.Proxy
          type:
            - Proxy
          description: ''
      content: 'function createOrUpdateProxy(proxy: Proxy)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.createTeam
    name: 'createTeam(team: WebApiTeam, projectId: string)'
    children: []
    langs:
      - typeScript
    summary: Creates a team
    syntax:
      parameters:
        - id: vss-web-extension-sdk.WebApiTeam
          type:
            - WebApiTeam
          description: The team data used to create the team.
        - id: projectId
          type:
            - string
          description: >-
            The name or id (GUID) of the team project in which to create the
            team.
      content: 'function createTeam(team: WebApiTeam, projectId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.deleteIdentityMru
    name: 'deleteIdentityMru(mruData: IdentityData, mruName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IdentityData
          type:
            - IdentityData
          description: ''
        - id: mruName
          type:
            - string
          description: ''
      content: 'function deleteIdentityMru(mruData: IdentityData, mruName: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.deleteProxy
    name: 'deleteProxy(proxyUrl: string, site?: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: proxyUrl
          type:
            - string
          description: ''
        - id: site
          type:
            - string
          description: ''
          optional: true
      content: 'function deleteProxy(proxyUrl: string, site?: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.deleteTeam
    name: 'deleteTeam(projectId: string, teamId: string)'
    children: []
    langs:
      - typeScript
    summary: Deletes a team
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: >-
            The name or id (GUID) of the team project containing the team to
            delete.
        - id: teamId
          type:
            - string
          description: The name of id of the team to delete.
      content: 'function deleteTeam(projectId: string, teamId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.forceOptionsCallForAutoNegotiate
    name: forceOptionsCallForAutoNegotiate
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - boolean
  - uid: vss-web-extension-sdk.CoreHttpClient.getConnectedServiceDetails
    name: 'getConnectedServiceDetails(projectId: string, name: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: ''
        - id: name
          type:
            - string
          description: ''
      content: 'function getConnectedServiceDetails(projectId: string, name: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getConnectedServices
    name: 'getConnectedServices(projectId: string, kind?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: ''
        - id: kind
          type:
            - function
          description: ''
          optional: true
      content: 'function getConnectedServices(projectId: string, kind?: function)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getIdentityMru
    name: 'getIdentityMru(mruName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: mruName
          type:
            - string
          description: ''
      content: 'function getIdentityMru(mruName: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getProcessById
    name: 'getProcessById(processId: string)'
    children: []
    langs:
      - typeScript
    summary: Retrieve process by id
    syntax:
      parameters:
        - id: processId
          type:
            - string
          description: ''
      content: 'function getProcessById(processId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getProcesses
    name: getProcesses()
    children: []
    langs:
      - typeScript
    summary: Retrieve all processes
    syntax:
      parameters: []
      content: function getProcesses()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getProject
    name: >-
      getProject(projectId: string, includeCapabilities?: boolean,
      includeHistory?: boolean)
    children: []
    langs:
      - typeScript
    summary: >-
      Get project with the specified id or name, optionally including
      capabilities.
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: ''
        - id: includeCapabilities
          type:
            - boolean
          description: >-
            Include capabilities (such as source control) in the team project
            result (default: false).
          optional: true
        - id: includeHistory
          type:
            - boolean
          description: Search within renamed projects (that had such name in the past).
          optional: true
      content: >-
        function getProject(projectId: string, includeCapabilities?: boolean,
        includeHistory?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getProjectCollection
    name: 'getProjectCollection(collectionId: string)'
    children: []
    langs:
      - typeScript
    summary: Get project collection with the specified id or name.
    syntax:
      parameters:
        - id: collectionId
          type:
            - string
          description: ''
      content: 'function getProjectCollection(collectionId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getProjectCollections
    name: 'getProjectCollections(top?: number, skip?: number)'
    children: []
    langs:
      - typeScript
    summary: Get project collection references for this application.
    syntax:
      parameters:
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
      content: 'function getProjectCollections(top?: number, skip?: number)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getProjectHistoryEntries
    name: 'getProjectHistoryEntries(minRevision?: number)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: minRevision
          type:
            - number
          description: ''
          optional: true
      content: 'function getProjectHistoryEntries(minRevision?: number)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getProjectProperties
    name: 'getProjectProperties(projectId: string, keys?: function)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get a collection of team project properties.'
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: The team project ID.
        - id: keys
          type:
            - function
          description: >-
            A comma-delimited string of team project property names. Wildcard
            characters ("?" and "*") are supported. If no key is specified, all
            properties will be returned.
          optional: true
      content: 'function getProjectProperties(projectId: string, keys?: function)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getProjects
    name: >-
      getProjects(stateFilter?: any, top?: number, skip?: number,
      continuationToken?: string)
    children: []
    langs:
      - typeScript
    summary: Get project references with the specified state
    syntax:
      parameters:
        - id: stateFilter
          type:
            - any
          description: >-
            Filter on team projects in a specific team project state (default:
            WellFormed).
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: continuationToken
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getProjects(stateFilter?: any, top?: number, skip?: number,
        continuationToken?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getProxies
    name: 'getProxies(proxyUrl?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: proxyUrl
          type:
            - string
          description: ''
          optional: true
      content: 'function getProxies(proxyUrl?: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getTeam
    name: 'getTeam(projectId: string, teamId: string)'
    children: []
    langs:
      - typeScript
    summary: Gets a team
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: ''
        - id: teamId
          type:
            - string
          description: ''
      content: 'function getTeam(projectId: string, teamId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getTeamMembers
    name: >-
      getTeamMembers(projectId: string, teamId: string, top?: number, skip?:
      number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: ''
        - id: teamId
          type:
            - string
          description: ''
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
      content: >-
        function getTeamMembers(projectId: string, teamId: string, top?: number,
        skip?: number)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.getTeams
    name: 'getTeams(projectId: string, top?: number, skip?: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: ''
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
      content: 'function getTeams(projectId: string, top?: number, skip?: number)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.identityMruApiVersion
    name: identityMruApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CoreHttpClient.membersApiVersion
    name: membersApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CoreHttpClient.processesApiVersion
    name: processesApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CoreHttpClient.projectCollectionsApiVersion
    name: projectCollectionsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CoreHttpClient.projectsApiVersion
    name: projectsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CoreHttpClient.propertiesApiVersion
    name: propertiesApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CoreHttpClient.proxiesApiVersion
    name: proxiesApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CoreHttpClient.queueCreateProject
    name: 'queueCreateProject(projectToCreate: TeamProject)'
    children: []
    langs:
      - typeScript
    summary: Queue a project creation.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.TeamProject
          type:
            - TeamProject
          description: The project to create.
      content: 'function queueCreateProject(projectToCreate: TeamProject)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.queueDeleteProject
    name: 'queueDeleteProject(projectId: string)'
    children: []
    langs:
      - typeScript
    summary: Queue a project deletion.
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: The project id of the project to delete.
      content: 'function queueDeleteProject(projectId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.serviceInstanceId
    name: serviceInstanceId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CoreHttpClient.setProjectProperties
    name: 'setProjectProperties(projectId: string, patchDocument: JsonPatchDocument)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Create, update, and delete team project properties.'
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: The team project ID.
        - id: vss-web-extension-sdk.JsonPatchDocument
          type:
            - JsonPatchDocument
          description: >-
            A JSON Patch document that represents an array of property
            operations. See RFC 6902 for more details on JSON Patch. The
            accepted operation verbs are Add and Remove, where Add is used for
            both creating and updating properties. The path consists of a
            forward slash and a property name.
      content: >-
        function setProjectProperties(projectId: string, patchDocument:
        JsonPatchDocument)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.teamsApiVersion
    name: teamsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CoreHttpClient.updateIdentityMru
    name: 'updateIdentityMru(mruData: IdentityData, mruName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IdentityData
          type:
            - IdentityData
          description: ''
        - id: mruName
          type:
            - string
          description: ''
      content: 'function updateIdentityMru(mruData: IdentityData, mruName: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.updateProject
    name: 'updateProject(projectUpdate: TeamProject, projectId: string)'
    children: []
    langs:
      - typeScript
    summary: 'Update an existing project''s name, abbreviation, or description.'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.TeamProject
          type:
            - TeamProject
          description: The updates for the project.
        - id: projectId
          type:
            - string
          description: The project id of the project to update.
      content: 'function updateProject(projectUpdate: TeamProject, projectId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient.updateTeam
    name: 'updateTeam(teamData: WebApiTeam, projectId: string, teamId: string)'
    children: []
    langs:
      - typeScript
    summary: Updates a team's name and/or description
    syntax:
      parameters:
        - id: vss-web-extension-sdk.WebApiTeam
          type:
            - WebApiTeam
          description: ''
        - id: projectId
          type:
            - string
          description: >-
            The name or id (GUID) of the team project containing the team to
            update.
        - id: teamId
          type:
            - string
          description: The name of id of the team to update.
      content: >-
        function updateTeam(teamData: WebApiTeam, projectId: string, teamId:
        string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient._beginGetLocation
    name: '_beginGetLocation(area: string, locationId: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Gets information about an API resource location (route template, supported
      versions, etc.)
    syntax:
      parameters:
        - id: area
          type:
            - string
          description: resource area name
        - id: locationId
          type:
            - string
          description: |
            Guid of the location to get
      content: 'function _beginGetLocation(area: string, locationId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient._beginRequest
    name: >-
      _beginRequest(requestParams: VssApiResourceRequestParams, useAjaxResult?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: Issue a request to a VSS REST endpoint.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.VssApiResourceRequestParams
          type:
            - VssApiResourceRequestParams
          description: request options
        - id: useAjaxResult
          type:
            - boolean
          description: >-
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used
          optional: true
      content: >-
        function _beginRequest(requestParams: VssApiResourceRequestParams,
        useAjaxResult?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient._beginRequestWithAjaxResult
    name: '_beginRequestWithAjaxResult(requestParams: VssApiResourceRequestParams)'
    children: []
    langs:
      - typeScript
    summary: >-
      Issue a request to a VSS REST endpoint and makes sure the result contains
      jqXHR. Use spread to access jqXHR.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.VssApiResourceRequestParams
          type:
            - VssApiResourceRequestParams
          description: request options
      content: >-
        function _beginRequestWithAjaxResult(requestParams:
        VssApiResourceRequestParams)
      return:
        type:
          - Q.Promise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient._issueAjaxRequest
    name: >-
      _issueAjaxRequest(requestUrl: string, ajaxOptions: JQueryAjaxSettings,
      useAjaxResult?: boolean, vssRequestOptions?: IVssAjaxOptions)
    children: []
    langs:
      - typeScript
    summary: >-
      Issue an AJAX request. This is a wrapper around jquery's ajax method that
      handles VSS authentication

      and triggers events that can be listened to by other modules.
    syntax:
      parameters:
        - id: requestUrl
          type:
            - string
          description: Url to send the request to
        - id: ajaxOptions
          type:
            - JQueryAjaxSettings
          description: jQuery.ajax options
        - id: useAjaxResult
          type:
            - boolean
          description: >
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used.
          optional: true
        - id: vss-web-extension-sdk.IVssAjaxOptions
          type:
            - IVssAjaxOptions
          description: ''
          optional: true
      content: >-
        function _issueAjaxRequest(requestUrl: string, ajaxOptions:
        JQueryAjaxSettings, useAjaxResult?: boolean, vssRequestOptions?:
        IVssAjaxOptions)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CoreHttpClient._rootRequestPath
    name: _rootRequestPath
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ''
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CoreHttpClient._setInitializationPromise
    name: '_setInitializationPromise(promise: IPromise)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets a promise that is waited on before any requests are issued. Can be
      used to asynchronously

      set the request url and auth token manager.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IPromise
          type:
            - IPromise
          description: ''
      content: 'function _setInitializationPromise(promise: IPromise)'
    type: method
