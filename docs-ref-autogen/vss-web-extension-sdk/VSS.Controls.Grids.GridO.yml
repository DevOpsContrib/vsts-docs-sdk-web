### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO
    name: GridO
    fullName: GridO
    children:
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.afterOnToggle
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.ancestorFolderToggled
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.beginFormatTable
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.cacheRows
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.collapseAll
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.collapseAllNodes
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.collapseByLevel
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.collapseNode
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.copySelectedItems
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.DATA_DRAGGING_ROWINFO
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.DATA_DROPPING_ROWINFO
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.disableDragDrop
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.disableEvent
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.enableDragDrop
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.enableEvent
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.enhancementTypeName
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.ensureDataIndexExpanded
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.EVENT_ROW_TOGGLED
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.EVENT_ROW_UPDATED
      - >-
        vss-web-extension-sdk.VSS.Controls.Grids.GridO.EVENT_SELECTED_INDEX_CHANGED
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.expandAll
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.expandAllNodes
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.expandByLevel
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.expandNode
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.focus
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getColumns
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getColumnText
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getColumnValue
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getContextMenuRowInfo
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getDraggingRowInfo
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getExpandStates
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getFocusElement
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getLastRowDataIndex
      - >-
        vss-web-extension-sdk.VSS.Controls.Grids.GridO.getPinAndFocusElementForContextMenu
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getRowData
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getRowInfo
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getSelectedDataIndex
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getSelectedDataIndices
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getSelectedRowIndex
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getSelectedRowIntoView
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getSelectionCount
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.getSortOrder
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.constructor
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.initialize
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.initializeDataSource
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.initializeOptions
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.layout
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.MAX_COPY_SIZE
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.nonAncestorFolderToggled
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.onContextMenu
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.onDeleteKey
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.onEnterKey
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.onGutterClick
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.onOpenRowDetail
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.onRowClick
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.onRowDoubleClick
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.onRowMouseDown
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.onRowMouseUp
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.onSort
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.PAYLOAD_SIZE
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.redraw
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.selectAll
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.selectedIndexChanged
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.selectionChanged
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.setColumnOptions
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.setDataSource
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.setSelectedDataIndex
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.setSelectedRowIndex
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.setupDragDrop
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.tryToggle
      - vss-web-extension-sdk.VSS.Controls.Grids.GridO.updateRow
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      - '@vss-web-extension-sdk.VSS.Controls.Control<TOptions>'
    package: vss-web-extension-sdk
    module: VSS/Controls/Grids
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.afterOnToggle
    name: 'afterOnToggle(rowInfo: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rowInfo
          type:
            - any
          description: ''
      content: 'function afterOnToggle(rowInfo: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.ancestorFolderToggled
    name: 'ancestorFolderToggled(rowInfo: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rowInfo
          type:
            - any
          description: ''
      content: 'function ancestorFolderToggled(rowInfo: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.beginFormatTable
    name: >-
      beginFormatTable(operationCompleteCallback: IResultCallback,
      errorCallback?: IErrorCallback, formatterType?: function, options?: any)
    children: []
    langs:
      - typeScript
    summary: Generates a table of the selected items in the grid.
    syntax:
      parameters:
        - id: operationCompleteCallback
          type:
            - '@vss-web-extension-sdk.IResultCallback'
          description: |-
            A callback function invoked when the
            current selection is available to the client for processing.
        - id: errorCallback
          type:
            - '@vss-web-extension-sdk.IErrorCallback'
          description: |+

          optional: true
        - id: formatterType
          type:
            - function
          description: ''
          optional: true
        - id: options
          type:
            - any
          description: ''
          optional: true
      content: >-
        function beginFormatTable(operationCompleteCallback: IResultCallback,
        errorCallback?: IErrorCallback, formatterType?: function, options?: any)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.cacheRows
    name: 'cacheRows(aboveRange: any, visibleRange: any, belowRange: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: aboveRange
          type:
            - any
          description: ''
        - id: visibleRange
          type:
            - any
          description: ''
        - id: belowRange
          type:
            - any
          description: ''
      content: 'function cacheRows(aboveRange: any, visibleRange: any, belowRange: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.collapseAll
    name: collapseAll()
    children: []
    langs:
      - typeScript
    summary: Collapses all rows of the grid (if source data is hierarchical).
    syntax:
      parameters: []
      content: function collapseAll()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.collapseAllNodes
    name: collapseAllNodes()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function collapseAllNodes()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.collapseByLevel
    name: 'collapseByLevel(level: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Collapses all rows at or below specified level (if source data is
      hierarchical).
    syntax:
      parameters:
        - id: level
          type:
            - number
          description: Level to collapse.
      content: 'function collapseByLevel(level: number)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.collapseNode
    name: 'collapseNode(dataIndex: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: dataIndex
          type:
            - any
          description: ''
      content: 'function collapseNode(dataIndex: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.copySelectedItems
    name: >-
      copySelectedItems(formatterType?: function, copyAsHtml?: boolean,
      options?: any)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: formatterType
          type:
            - function
          description: ''
          optional: true
        - id: copyAsHtml
          type:
            - boolean
          description: ''
          optional: true
        - id: options
          type:
            - any
          description: ''
          optional: true
      content: >-
        function copySelectedItems(formatterType?: function, copyAsHtml?:
        boolean, options?: any)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.DATA_DRAGGING_ROWINFO
    name: DATA_DRAGGING_ROWINFO
    fullName: DATA_DRAGGING_ROWINFO
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.DATA_DROPPING_ROWINFO
    name: DATA_DROPPING_ROWINFO
    fullName: DATA_DROPPING_ROWINFO
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.disableDragDrop
    name: disableDragDrop()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function disableDragDrop()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.disableEvent
    name: 'disableEvent(eventName: string)'
    children: []
    langs:
      - typeScript
    summary: Disables raising the custom event with the provided event name.
    syntax:
      parameters:
        - id: eventName
          type:
            - string
          description: |
            Name of the event to disable.
      content: 'function disableEvent(eventName: string)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.enableDragDrop
    name: enableDragDrop()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function enableDragDrop()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.enableEvent
    name: 'enableEvent(eventName: string)'
    children: []
    langs:
      - typeScript
    summary: Enables raising the custom event with the provided event name.
    syntax:
      parameters:
        - id: eventName
          type:
            - string
          description: |
            Name of the event to enable.
      content: 'function enableEvent(eventName: string)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.enhancementTypeName
    name: enhancementTypeName
    fullName: enhancementTypeName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.ensureDataIndexExpanded
    name: 'ensureDataIndexExpanded(dataIndex: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Ensures that an item (identified by a data index) has an associated row by

      expanding any enclosing collapsed rows. Returns the rowIndex of the
      associated row.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The data index of the item to ensure is expanded
      content: 'function ensureDataIndexExpanded(dataIndex: number)'
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.EVENT_ROW_TOGGLED
    name: EVENT_ROW_TOGGLED
    fullName: EVENT_ROW_TOGGLED
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.EVENT_ROW_UPDATED
    name: EVENT_ROW_UPDATED
    fullName: EVENT_ROW_UPDATED
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Grids.GridO.EVENT_SELECTED_INDEX_CHANGED
    name: EVENT_SELECTED_INDEX_CHANGED
    fullName: EVENT_SELECTED_INDEX_CHANGED
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.expandAll
    name: expandAll()
    children: []
    langs:
      - typeScript
    summary: Expands all rows of the grid (if source data is hierarchical).
    syntax:
      parameters: []
      content: function expandAll()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.expandAllNodes
    name: expandAllNodes()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function expandAllNodes()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.expandByLevel
    name: 'expandByLevel(level: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Expands all rows at or below specified level (if source data is
      hierarchical).
    syntax:
      parameters:
        - id: level
          type:
            - number
          description: Level to expand.
      content: 'function expandByLevel(level: number)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.expandNode
    name: 'expandNode(dataIndex: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: dataIndex
          type:
            - any
          description: ''
      content: 'function expandNode(dataIndex: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.focus
    name: 'focus(timeout?: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: timeout
          type:
            - number
          description: |+

          optional: true
      content: 'function focus(timeout?: number)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getColumns
    name: getColumns()
    children: []
    langs:
      - typeScript
    summary: Gets the columns currently being displayed in the grid.
    syntax:
      parameters: []
      content: function getColumns()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getColumnText
    name: 'getColumnText(dataIndex: any, column: any, columnOrder?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: dataIndex
          type:
            - any
          description: ''
        - id: column
          type:
            - any
          description: ''
        - id: columnOrder
          type:
            - any
          description: ''
          optional: true
      content: 'function getColumnText(dataIndex: any, column: any, columnOrder?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getColumnValue
    name: >-
      getColumnValue(dataIndex: number, columnIndex: number, columnOrder?:
      number)
    children: []
    langs:
      - typeScript
    summary: |-
      Gets the value for a column. The default use of the return value is to
      convert it to a string and set it as the cell's text value.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The index for the row data in the data source
        - id: columnIndex
          type:
            - number
          description: The index of the column's data in the row's data array
        - id: columnOrder
          type:
            - number
          description: >-
            The index of the column in the grid's column array. This is the
            current visible order of the column
          optional: true
      content: >-
        function getColumnValue(dataIndex: number, columnIndex: number,
        columnOrder?: number)
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getContextMenuRowInfo
    name: getContextMenuRowInfo()
    children: []
    langs:
      - typeScript
    summary: |
      Gets info about the row on which context menu is opened.
      If no context menu is open, returns null.
    syntax:
      parameters: []
      content: function getContextMenuRowInfo()
      return:
        type:
          - '@vss-web-extension-sdk.VSS.Controls.Grids.IGridRowInfo'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getDraggingRowInfo
    name: getDraggingRowInfo()
    children: []
    langs:
      - typeScript
    summary: Gets the row information for the item currently being dragged.
    syntax:
      parameters: []
      content: function getDraggingRowInfo()
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getExpandStates
    name: getExpandStates()
    children: []
    langs:
      - typeScript
    summary: Gets the collection of expand states for the grid.
    syntax:
      parameters: []
      content: function getExpandStates()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getFocusElement
    name: getFocusElement()
    children: []
    langs:
      - typeScript
    summary: >
      Gets the Focus Element for the Grid.

      This is the actual element that receives focus and that all the event
      bindings, like 'keydown', are bound to.
    syntax:
      parameters: []
      content: function getFocusElement()
      return:
        type:
          - JQuery
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getLastRowDataIndex
    name: getLastRowDataIndex()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getLastRowDataIndex()
      return:
        type:
          - number
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Grids.GridO.getPinAndFocusElementForContextMenu
    name: 'getPinAndFocusElementForContextMenu(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function getPinAndFocusElementForContextMenu(eventArgs: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getRowData
    name: 'getRowData(dataIndex: number)'
    children: []
    langs:
      - typeScript
    summary: Gets the data being used to display the row at the provided data index.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The data index for the record to retrieve.
      content: 'function getRowData(dataIndex: number)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getRowInfo
    name: 'getRowInfo(dataIndex: number)'
    children: []
    langs:
      - typeScript
    summary: >
      Gets the information about a row associated with the given data index.

      Returns a rowInfo object containing rowIndex, dataIndex and a jQuery
      wrapper for the actual row.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The data index for the record to retrieve.
      content: 'function getRowInfo(dataIndex: number)'
      return:
        type:
          - '@vss-web-extension-sdk.VSS.Controls.Grids.IGridRowInfo'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getSelectedDataIndex
    name: getSelectedDataIndex()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSelectedDataIndex()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getSelectedDataIndices
    name: getSelectedDataIndices()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSelectedDataIndices()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getSelectedRowIndex
    name: getSelectedRowIndex()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSelectedRowIndex()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getSelectedRowIntoView
    name: 'getSelectedRowIntoView(force?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: force
          type:
            - boolean
          description: |+

          optional: true
      content: 'function getSelectedRowIntoView(force?: boolean)'
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getSelectionCount
    name: getSelectionCount()
    children: []
    langs:
      - typeScript
    summary: Gets the number of selected items.
    syntax:
      parameters: []
      content: function getSelectionCount()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.getSortOrder
    name: getSortOrder()
    children: []
    langs:
      - typeScript
    summary: Gets the current sort order being used in the grid.
    syntax:
      parameters: []
      content: function getSortOrder()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.constructor
    name: 'GridO(options?: TOptions)'
    children: []
    langs:
      - typeScript
    summary: Creates new Grid Control
    syntax:
      parameters:
        - id: options
          type:
            - TOptions
          description: >
            The initialization options for the grid which have the following
            properties

               "columns" is a required property containing the array of grid column descriptors that have the following structure:
               {
                   index: The index for the
                   text:      column header text, string, optional, default: "",
                   width:     width in pixels of the column, number, optional, default: 100,
                   canSortBy: true if the grid can be sorted by the column, boolean, optional, default: true
                   canMove: true if this column can be moved (has effect only if allowMoveColumns is set to true for the grid as well), boolean, optional, default: true
                   getCellContents: function that returns cell contents, function, optional, default: this._drawCell
                       The function takes the same parameters as _drawCell and should return a jQuery object
                       that represents the cell's contents. The first element will be appended to the row.
                       If the function returns null or undefined nothing will be appended for that cell.
                   getHeaderCellContents: function that returns column header cell contents, function, optional, default: this._drawHeaderCellValue
                       The function takes the same parameters as _drawHeaderCellValue and should return a jQuery object
                       that represents the cell's contents. The first element will be appended to the header cell's contents.
                       If the function returns null or undefined nothing will be appended for that header cell.
                   getColumnValue: function that returns the value for a cell contents, function, optional, default: this.getColumnValue;
                       The return value of the function will be converted to a string an added as the cell contents.
               }
               "enabledEvents" is an optional property containing an object with properties for each of the enabled events.
               {
                   GridO.EVENT_ROW_UPDATED: true
               }
          optional: true
      content: 'new GridO(options?: TOptions)'
    type: constructor
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.initialize
    name: initialize()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function initialize()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.initializeDataSource
    name: 'initializeDataSource(suppressRedraw?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: suppressRedraw
          type:
            - boolean
          description: ''
          optional: true
      content: 'function initializeDataSource(suppressRedraw?: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.initializeOptions
    name: 'initializeOptions(options?: TOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: options
          type:
            - TOptions
          description: |+

          optional: true
      content: 'function initializeOptions(options?: TOptions)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.layout
    name: layout()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function layout()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.MAX_COPY_SIZE
    name: MAX_COPY_SIZE
    fullName: MAX_COPY_SIZE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.nonAncestorFolderToggled
    name: 'nonAncestorFolderToggled(rowInfo: any, currSelectedDataIndex: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rowInfo
          type:
            - any
          description: ''
        - id: currSelectedDataIndex
          type:
            - any
          description: ''
      content: >-
        function nonAncestorFolderToggled(rowInfo: any, currSelectedDataIndex:
        any)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.onContextMenu
    name: 'onContextMenu(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onContextMenu(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.onDeleteKey
    name: 'onDeleteKey(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onDeleteKey(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.onEnterKey
    name: 'onEnterKey(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onEnterKey(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.onGutterClick
    name: 'onGutterClick(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onGutterClick(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.onOpenRowDetail
    name: 'onOpenRowDetail(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onOpenRowDetail(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.onRowClick
    name: 'onRowClick(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onRowClick(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.onRowDoubleClick
    name: 'onRowDoubleClick(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onRowDoubleClick(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.onRowMouseDown
    name: 'onRowMouseDown(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onRowMouseDown(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.onRowMouseUp
    name: 'onRowMouseUp(eventArgs: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - JQueryEventObject
          description: ''
      content: 'function onRowMouseUp(eventArgs: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.onSort
    name: 'onSort(sortOrder: any, sortColumns?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: sortOrder
          type:
            - any
          description: ''
        - id: sortColumns
          type:
            - any
          description: ''
          optional: true
      content: 'function onSort(sortOrder: any, sortColumns?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.PAYLOAD_SIZE
    name: PAYLOAD_SIZE
    fullName: PAYLOAD_SIZE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.redraw
    name: redraw()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function redraw()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.selectAll
    name: selectAll()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function selectAll()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.selectedIndexChanged
    name: 'selectedIndexChanged(selectedRowIndex: any, selectedDataIndex: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: selectedRowIndex
          type:
            - any
          description: ''
        - id: selectedDataIndex
          type:
            - any
          description: ''
      content: >-
        function selectedIndexChanged(selectedRowIndex: any, selectedDataIndex:
        any)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.selectionChanged
    name: >-
      selectionChanged(selectedIndex: any, selectedCount: any, selectedRows:
      any)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: selectedIndex
          type:
            - any
          description: ''
        - id: selectedCount
          type:
            - any
          description: ''
        - id: selectedRows
          type:
            - any
          description: ''
      content: >-
        function selectionChanged(selectedIndex: any, selectedCount: any,
        selectedRows: any)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.setColumnOptions
    name: 'setColumnOptions(columnName: string, options?: IGridColumn)'
    children: []
    langs:
      - typeScript
    summary: >-
      Set new column info for the column associated with the specified column
      name.
    syntax:
      parameters:
        - id: columnName
          type:
            - string
          description: Name of the column to change the options.
        - id: options
          type:
            - '@vss-web-extension-sdk.VSS.Controls.Grids.IGridColumn'
          description: New column options.
          optional: true
      content: 'function setColumnOptions(columnName: string, options?: IGridColumn)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.setDataSource
    name: 'setDataSource(source: IGridSource)'
    children: []
    langs:
      - typeScript
    summary: Sets the source of the grid using GridSource object.
    syntax:
      parameters:
        - id: source
          type:
            - '@vss-web-extension-sdk.VSS.Controls.Grids.IGridSource'
          description: GridSource object to set the grid source.
      content: 'function setDataSource(source: IGridSource)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.setSelectedDataIndex
    name: 'setSelectedDataIndex(dataIndex: number, expandNodes?: boolean)'
    children: []
    langs:
      - typeScript
    summary: |-
      Sets the selected item in the grid by the data index.
      Optionally ensure that the item is not hidden by collapsed rows.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The data index of item to show
        - id: expandNodes
          type:
            - boolean
          description: |
            If true, all containing collapsed nodes will be expanded
          optional: true
      content: 'function setSelectedDataIndex(dataIndex: number, expandNodes?: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.setSelectedRowIndex
    name: 'setSelectedRowIndex(selectedRowIndex: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: selectedRowIndex
          type:
            - any
          description: ''
      content: 'function setSelectedRowIndex(selectedRowIndex: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.setupDragDrop
    name: 'setupDragDrop(draggableOptions: any, droppableOptions: any)'
    children: []
    langs:
      - typeScript
    summary: Setup the provided draggable and droppable options
    syntax:
      parameters:
        - id: draggableOptions
          type:
            - any
          description: ''
        - id: droppableOptions
          type:
            - any
          description: ''
      content: 'function setupDragDrop(draggableOptions: any, droppableOptions: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.tryToggle
    name: 'tryToggle(expand: boolean, applyToAllRows: boolean, targetIndex?: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Expand or collapse node(s), and set selection focus at a given target
      index or at the current selected index as default behavior.
    syntax:
      parameters:
        - id: expand
          type:
            - boolean
          description: 'If true, expands the node, otherwise collapsed.'
        - id: applyToAllRows
          type:
            - boolean
          description: >-
            True to expand or collapse all nodes, false to expand or collapse
            the node at a given target index, or at the current selected index
            as default behavior.
        - id: targetIndex
          type:
            - number
          description: 'The node index to be expanded or collapsed, and get selection focus.'
          optional: true
      content: >-
        function tryToggle(expand: boolean, applyToAllRows: boolean,
        targetIndex?: number)
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.GridO.updateRow
    name: >-
      updateRow(rowIndex: number, dataIndex?: number, columnsToUpdate?: [key:
      number]: boolean)
    children: []
    langs:
      - typeScript
    summary: Updates the row identified by the given rowIndex.
    syntax:
      parameters:
        - id: rowIndex
          type:
            - number
          description: Index of row to be updated
        - id: dataIndex
          type:
            - number
          description: DataIndex of row to be updated
          optional: true
        - id: columnsToUpdate
          type:
            - '[key: number]: boolean'
          description: |
            HashSet of column indices. If given,
            only columns in this set will be updated.
          optional: true
      content: >-
        function updateRow(rowIndex: number, dataIndex?: number,
        columnsToUpdate?: [key: number]: boolean)
    type: method
