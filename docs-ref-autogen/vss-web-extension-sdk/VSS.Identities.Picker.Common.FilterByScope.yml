### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope
    name: FilterByScope
    fullName: FilterByScope
    children:
      - >-
        vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope.filterByAncestorEntityIds
      - >-
        vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope.filterByEntityIds
      - >-
        vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope.constructor
      - >-
        vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope.GetHashCode
      - >-
        vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope.isFilterByScopeEmpty
    langs:
      - typeScript
    type: class
    summary: ''
    source:
      path: vss.d.ts
      startLine: 25113
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Identities/Picker/Common
  - uid: >-
      vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope.filterByAncestorEntityIds
    name: filterByAncestorEntityIds
    fullName: filterByAncestorEntityIds
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'string[] filterByAncestorEntityIds'
      return:
        type:
          - 'string[]'
  - uid: >-
      vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope.filterByEntityIds
    name: filterByEntityIds
    fullName: filterByEntityIds
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'string[] filterByEntityIds'
      return:
        type:
          - 'string[]'
  - uid: >-
      vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope.constructor
    name: >-
      FilterByScope(filterByAncestorEntityIds?: string[], filterByEntityIds?:
      string[])
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: filterByAncestorEntityIds
          type:
            - 'string[]'
          description: ''
          optional: true
        - id: filterByEntityIds
          type:
            - 'string[]'
          description: ''
          optional: true
      content: >-
        new FilterByScope(filterByAncestorEntityIds?: string[],
        filterByEntityIds?: string[])
    type: constructor
  - uid: >-
      vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope.GetHashCode
    name: 'GetHashCode(filterByScope: FilterByScope)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: filterByScope
          type:
            - '@vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope'
          description: ''
      content: 'static function GetHashCode(filterByScope: FilterByScope)'
      return:
        type:
          - number
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope.isFilterByScopeEmpty
    name: 'isFilterByScopeEmpty(filterByScope: FilterByScope)'
    children: []
    langs:
      - typeScript
    summary: >-
      Return true if the filterByScope is not null and the ancestorEntitityIds
      and entityIds arrays are empty, otherwise false.
    syntax:
      parameters:
        - id: filterByScope
          type:
            - '@vss-web-extension-sdk.VSS.Identities.Picker.Common.FilterByScope'
          description: ''
      content: 'static function isFilterByScopeEmpty(filterByScope: FilterByScope)'
      return:
        type:
          - boolean
    type: method
