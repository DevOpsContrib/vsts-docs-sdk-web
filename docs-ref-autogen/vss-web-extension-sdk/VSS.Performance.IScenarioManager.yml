### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Performance.IScenarioManager
    name: IScenarioManager
    fullName: IScenarioManager
    children:
      - vss-web-extension-sdk.VSS.Performance.IScenarioManager.abortScenario
      - vss-web-extension-sdk.VSS.Performance.IScenarioManager.addAjaxCallStart
      - >-
        vss-web-extension-sdk.VSS.Performance.IScenarioManager.addScenarioCompletedListener
      - vss-web-extension-sdk.VSS.Performance.IScenarioManager.endScenario
      - >-
        vss-web-extension-sdk.VSS.Performance.IScenarioManager.getAllCompletedScenarios
      - vss-web-extension-sdk.VSS.Performance.IScenarioManager.getScenarios
      - >-
        vss-web-extension-sdk.VSS.Performance.IScenarioManager.recordPageLoadScenario
      - vss-web-extension-sdk.VSS.Performance.IScenarioManager.split
      - vss-web-extension-sdk.VSS.Performance.IScenarioManager.startScenario
      - >-
        vss-web-extension-sdk.VSS.Performance.IScenarioManager.startScenarioFromNavigation
    langs:
      - typeScript
    type: interface
    summary: Scenario management
    source:
      path: vss.d.ts
      startLine: 29515
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Performance
  - uid: vss-web-extension-sdk.VSS.Performance.IScenarioManager.abortScenario
    name: abortScenario
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Abort scenario if it's currently active. Use this when a scenario that has
      started hit an error condition and you want to abort performance tracking
      for the scenario.
    syntax:
      content: 'function abortScenario(featureArea: string, name: string)'
      parameters:
        - id: featureArea
          type:
            - string
          description: ''
        - id: name
          type:
            - string
          description: |
            Name of scenario.
    module: VSS/Performance
  - uid: vss-web-extension-sdk.VSS.Performance.IScenarioManager.addAjaxCallStart
    name: addAjaxCallStart
    children: []
    type: method
    langs:
      - typeScript
    summary: Add information about ajax call to all currently active scenarios
    syntax:
      content: function addAjaxCallStart()
      parameters: []
      return:
        type:
          - '@vss-web-extension-sdk.VSS.Performance.IEndAjaxCallTiming'
    module: VSS/Performance
  - uid: >-
      vss-web-extension-sdk.VSS.Performance.IScenarioManager.addScenarioCompletedListener
    name: addScenarioCompletedListener
    children: []
    type: method
    langs:
      - typeScript
    summary: Add an event listener for scenario-complete events
    syntax:
      content: >-
        function addScenarioCompletedListener(callback:
        IPerfScenarioEventCallback)
      parameters:
        - id: callback
          type:
            - '@vss-web-extension-sdk.VSS.Performance.IPerfScenarioEventCallback'
          description: |
            Method invoked when a perf scenario has been marked as completed
    module: VSS/Performance
  - uid: vss-web-extension-sdk.VSS.Performance.IScenarioManager.endScenario
    name: endScenario
    children: []
    type: method
    langs:
      - typeScript
    summary: End scenario if it's currently active
    syntax:
      content: 'function endScenario(featureArea: string, name: string)'
      parameters:
        - id: featureArea
          type:
            - string
          description: ''
        - id: name
          type:
            - string
          description: |
            Name of scenario.
    module: VSS/Performance
  - uid: >-
      vss-web-extension-sdk.VSS.Performance.IScenarioManager.getAllCompletedScenarios
    name: getAllCompletedScenarios
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all completed scenarios
    syntax:
      content: function getAllCompletedScenarios()
      parameters: []
    module: VSS/Performance
  - uid: vss-web-extension-sdk.VSS.Performance.IScenarioManager.getScenarios
    name: getScenarios
    children: []
    type: method
    langs:
      - typeScript
    summary: Get active scenarios with given area/name
    syntax:
      content: 'function getScenarios(featureArea: string, name: string)'
      parameters:
        - id: featureArea
          type:
            - string
          description: ''
        - id: name
          type:
            - string
          description: |
            Name of scenario.
    module: VSS/Performance
  - uid: >-
      vss-web-extension-sdk.VSS.Performance.IScenarioManager.recordPageLoadScenario
    name: recordPageLoadScenario
    children: []
    type: method
    langs:
      - typeScript
    summary: Record a page load scenario.
    syntax:
      content: >-
        function recordPageLoadScenario(featureArea: string, name: string,
        data?: any)
      parameters:
        - id: featureArea
          type:
            - string
          description: ''
        - id: name
          type:
            - string
          description: Name of scenario.
        - id: data
          type:
            - any
          description: |
            Optional data to be recorded with scenario
          optional: true
      return:
        type:
          - any
    module: VSS/Performance
  - uid: vss-web-extension-sdk.VSS.Performance.IScenarioManager.split
    name: split
    children: []
    type: method
    langs:
      - typeScript
    summary: Insert split timing for all currently active scenarios
    syntax:
      content: 'function split(splitName: string)'
      parameters:
        - id: splitName
          type:
            - string
          description: |
            Name of split timing
    module: VSS/Performance
  - uid: vss-web-extension-sdk.VSS.Performance.IScenarioManager.startScenario
    name: startScenario
    children: []
    type: method
    langs:
      - typeScript
    summary: Start new scenario
    syntax:
      content: >-
        function startScenario(featureArea: string, name: string, startTime?:
        number, isPageInteractive?: boolean)
      parameters:
        - id: featureArea
          type:
            - string
          description: ''
        - id: name
          type:
            - string
          description: Name of scenario.
        - id: startTime
          type:
            - number
          description: >-
            Optional: Scenario start time. IMPORTANT: Has to be obtained using
            getTimestamp
          optional: true
        - id: isPageInteractive
          type:
            - boolean
          description: >
            Optional: Whether or not the scenario is the primary one for the
            page, indicating whether or not hte page is yet interactive (TTI)
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.VSS.Performance.IScenarioDescriptor'
    module: VSS/Performance
  - uid: >-
      vss-web-extension-sdk.VSS.Performance.IScenarioManager.startScenarioFromNavigation
    name: startScenarioFromNavigation
    children: []
    type: method
    langs:
      - typeScript
    summary: Start new scenario beginning at the browser's navigationStart event
    syntax:
      content: >-
        function startScenarioFromNavigation(featureArea: string, name: string,
        isPageInteractive?: boolean)
      parameters:
        - id: featureArea
          type:
            - string
          description: ''
        - id: name
          type:
            - string
          description: Name of scenario.
        - id: isPageInteractive
          type:
            - boolean
          description: >
            Optional: Whether or not the scenario is the primary one for the
            page, indicating whether or not hte page is yet interactive (TTI)
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.VSS.Performance.IScenarioDescriptor'
    module: VSS/Performance
