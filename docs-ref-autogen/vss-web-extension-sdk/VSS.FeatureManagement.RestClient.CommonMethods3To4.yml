### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4
    name: CommonMethods3To4
    fullName: CommonMethods3To4
    children:
      - >-
        vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.constructor
      - >-
        vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.getFeature
      - >-
        vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.getFeatures
      - >-
        vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.getFeatureState
      - >-
        vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.getFeatureStateForScope
      - >-
        vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.setFeatureState
      - >-
        vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.setFeatureStateForScope
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      - '@vss-web-extension-sdk.VSS.WebApi.RestClient.VssHttpClient'
    source:
      path: vss.d.ts
      startLine: 20719
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/FeatureManagement/RestClient
  - uid: >-
      vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.constructor
    name: >-
      CommonMethods3To4(rootRequestPath: string, options?:
      IVssHttpClientOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rootRequestPath
          type:
            - string
          description: ''
        - id: options
          type:
            - '@vss-web-extension-sdk.VSS.WebApi.RestClient.IVssHttpClientOptions'
          description: ''
          optional: true
      content: >-
        new CommonMethods3To4(rootRequestPath: string, options?:
        IVssHttpClientOptions)
    type: constructor
  - uid: >-
      vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.getFeature
    name: 'getFeature(featureId: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get a specific feature by its id'
    syntax:
      parameters:
        - id: featureId
          type:
            - string
          description: The contribution id of the feature
      content: 'function getFeature(featureId: string)'
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.VSS.FeatureManagement.Contracts.ContributedFeature>
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.getFeatures
    name: 'getFeatures(targetContributionId?: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get a list of all defined features'
    syntax:
      parameters:
        - id: targetContributionId
          type:
            - string
          description: >-
            Optional target contribution. If null/empty, return all features. If
            specified include the features that target the specified
            contribution.
          optional: true
      content: 'function getFeatures(targetContributionId?: string)'
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.VSS.FeatureManagement.Contracts.ContributedFeature[]>
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.getFeatureState
    name: 'getFeatureState(featureId: string, userScope: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Get the state of the specified feature for the given
      user/all-users scope
    syntax:
      parameters:
        - id: featureId
          type:
            - string
          description: Contribution id of the feature
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to get the value. Should be "me" for the current
            user or "host" for all users.
      content: 'function getFeatureState(featureId: string, userScope: string)'
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.VSS.FeatureManagement.Contracts.ContributedFeatureState>
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.getFeatureStateForScope
    name: >-
      getFeatureStateForScope(featureId: string, userScope: string, scopeName:
      string, scopeValue: string)
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Get the state of the specified feature for the given named
      scope
    syntax:
      parameters:
        - id: featureId
          type:
            - string
          description: Contribution id of the feature
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to get the value. Should be "me" for the current
            user or "host" for all users.
        - id: scopeName
          type:
            - string
          description: >-
            Scope at which to get the feature setting for (e.g. "project" or
            "team")
        - id: scopeValue
          type:
            - string
          description: Value of the scope (e.g. the project or team id)
      content: >-
        function getFeatureStateForScope(featureId: string, userScope: string,
        scopeName: string, scopeValue: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.VSS.FeatureManagement.Contracts.ContributedFeatureState>
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.setFeatureState
    name: >-
      setFeatureState(feature: ContributedFeatureState, featureId: string,
      userScope: string, reason?: string, reasonCode?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Set the state of a feature'
    syntax:
      parameters:
        - id: feature
          type:
            - >-
              @vss-web-extension-sdk.VSS.FeatureManagement.Contracts.ContributedFeatureState
          description: Posted feature state object. Should specify the effective value.
        - id: featureId
          type:
            - string
          description: Contribution id of the feature
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to set the value. Should be "me" for the current
            user or "host" for all users.
        - id: reason
          type:
            - string
          description: Reason for changing the state
          optional: true
        - id: reasonCode
          type:
            - string
          description: Short reason code
          optional: true
      content: >-
        function setFeatureState(feature: ContributedFeatureState, featureId:
        string, userScope: string, reason?: string, reasonCode?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.VSS.FeatureManagement.Contracts.ContributedFeatureState>
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.FeatureManagement.RestClient.CommonMethods3To4.setFeatureStateForScope
    name: >-
      setFeatureStateForScope(feature: ContributedFeatureState, featureId:
      string, userScope: string, scopeName: string, scopeValue: string, reason?:
      string, reasonCode?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Set the state of a feature at a specific scope'
    syntax:
      parameters:
        - id: feature
          type:
            - >-
              @vss-web-extension-sdk.VSS.FeatureManagement.Contracts.ContributedFeatureState
          description: Posted feature state object. Should specify the effective value.
        - id: featureId
          type:
            - string
          description: Contribution id of the feature
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to set the value. Should be "me" for the current
            user or "host" for all users.
        - id: scopeName
          type:
            - string
          description: >-
            Scope at which to get the feature setting for (e.g. "project" or
            "team")
        - id: scopeValue
          type:
            - string
          description: Value of the scope (e.g. the project or team id)
        - id: reason
          type:
            - string
          description: Reason for changing the state
          optional: true
        - id: reasonCode
          type:
            - string
          description: Short reason code
          optional: true
      content: >-
        function setFeatureStateForScope(feature: ContributedFeatureState,
        featureId: string, userScope: string, scopeName: string, scopeValue:
        string, reason?: string, reasonCode?: string)
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.VSS.FeatureManagement.Contracts.ContributedFeatureState>
    type: method
