### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Navigation.HubsProvider.HubsProvider
    name: HubsProvider
    fullName: HubsProvider
    children:
      - >-
        vss-web-extension-sdk.VSS.Navigation.HubsProvider.HubsProvider.getCachedPageData
      - >-
        vss-web-extension-sdk.VSS.Navigation.HubsProvider.HubsProvider.getContainerHub
      - >-
        vss-web-extension-sdk.VSS.Navigation.HubsProvider.HubsProvider.constructor
      - >-
        vss-web-extension-sdk.VSS.Navigation.HubsProvider.HubsProvider.invokeRefreshCallbacks
      - >-
        vss-web-extension-sdk.VSS.Navigation.HubsProvider.HubsProvider.reloadCachedProviderData
    langs:
      - typeScript
    type: class
    summary: Base class for hubs providers.
    source:
      path: vss.d.ts
      startLine: 28444
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Navigation/HubsProvider
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.HubsProvider.HubsProvider.getCachedPageData
    name: >-
      getCachedPageData<T>(cachedDataProviderContributionId: string,
      primaryDataProviderContributionId?: string, refreshCache?: boolean,
      contractMetadata?: ContractMetadata)
    children: []
    langs:
      - typeScript
    summary: >-
      Get page data from a data provider contribution that is cached, optionally
      queueing an update of the data

      after reading from the cache
    syntax:
      content: >-
        function getCachedPageData<T>(cachedDataProviderContributionId: string,
        primaryDataProviderContributionId?: string, refreshCache?: boolean,
        contractMetadata?: ContractMetadata)
      parameters:
        - id: cachedDataProviderContributionId
          type:
            - string
          description: Id of the data provider which caches data in localStorage
        - id: primaryDataProviderContributionId
          type:
            - string
          description: >-
            Optional contribution id of a data provider to use if it exists. The
            cached data will not be used or updated if this exists.
          optional: true
        - id: refreshCache
          type:
            - boolean
          description: >-
            If true and data was read from the cache, queue up a request to
            update it.
          optional: true
        - id: contractMetadata
          type:
            - '@vss-web-extension-sdk.VSS.Serialization.ContractMetadata'
          description: >
            Optional contract metadata to use when deserializing the JSON island
            data
          optional: true
      return:
        type:
          - T
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.HubsProvider.HubsProvider.getContainerHub
    name: 'getContainerHub(context: IHubsProviderContext)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getContainerHub(context: IHubsProviderContext)'
      parameters:
        - id: context
          type:
            - '@vss-web-extension-sdk.IHubsProviderContext'
          description: ''
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.IContributedHub>
    type: method
  - uid: vss-web-extension-sdk.VSS.Navigation.HubsProvider.HubsProvider.constructor
    name: 'HubsProvider(variesByOwner: boolean)'
    children: []
    langs:
      - typeScript
    summary: Create a hubs provider
    syntax:
      content: 'new HubsProvider(variesByOwner: boolean)'
      parameters:
        - id: variesByOwner
          type:
            - boolean
          description: ''
    type: constructor
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.HubsProvider.HubsProvider.invokeRefreshCallbacks
    name: invokeRefreshCallbacks()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function invokeRefreshCallbacks()
      parameters: []
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.HubsProvider.HubsProvider.reloadCachedProviderData
    name: >-
      reloadCachedProviderData(cachedDataProviderContributionId: string,
      properties?: any)
    children: []
    langs:
      - typeScript
    summary: Always reloads provider data by queuing up a new request
    syntax:
      content: >-
        function reloadCachedProviderData(cachedDataProviderContributionId:
        string, properties?: any)
      parameters:
        - id: cachedDataProviderContributionId
          type:
            - string
          description: Id of the data provider
        - id: properties
          type:
            - any
          description: >
            Additional properties to pass to the provider on reload as part of
            the context
          optional: true
    type: method
