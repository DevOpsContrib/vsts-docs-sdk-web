### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.TFS.DistributedTask.Contracts.TaskExecution
    name: TaskExecution
    fullName: TaskExecution
    children:
      - >-
        vss-web-extension-sdk.TFS.DistributedTask.Contracts.TaskExecution.execTask
      - >-
        vss-web-extension-sdk.TFS.DistributedTask.Contracts.TaskExecution.platformInstructions
    langs:
      - typeScript
    type: interface
    summary: ''
    package: vss-web-extension-sdk
    module: TFS/DistributedTask/Contracts
  - uid: vss-web-extension-sdk.TFS.DistributedTask.Contracts.TaskExecution.execTask
    name: execTask
    fullName: execTask
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The utility task to run.  Specifying this means that this task definition
      is simply a meta task to call another task. This is useful for tasks that
      call utility tasks like powershell and commandline
    syntax:
      return:
        type:
          - '@vss-web-extension-sdk.TFS.DistributedTask.Contracts.TaskReference'
  - uid: >-
      vss-web-extension-sdk.TFS.DistributedTask.Contracts.TaskExecution.platformInstructions
    name: platformInstructions
    fullName: platformInstructions
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If a task is going to run code, then this provides the type/script etc...
      information by platform. For example, it might look like. net45: {
      typeName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShellTask",
      assemblyName: "Microsoft.TeamFoundation.Automation.Tasks.PowerShell.dll" }
      net20: { typeName:
      "Microsoft.TeamFoundation.Automation.Tasks.PowerShellTask", assemblyName:
      "Microsoft.TeamFoundation.Automation.Tasks.PowerShell.dll" } java: { jar:
      "powershelltask.tasks.automation.teamfoundation.microsoft.com", } node: {
      script: "powershellhost.js", }
    syntax:
      return:
        type:
          - '[key: string]: function'
