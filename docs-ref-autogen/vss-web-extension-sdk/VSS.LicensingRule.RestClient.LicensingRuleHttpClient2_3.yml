### YamlMime:UniversalReference
items:
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3
    name: LicensingRuleHttpClient2_3
    fullName: LicensingRuleHttpClient2_3
    children:
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.addGroupLicensingRule
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.applyGroupLicensingRulesToAllUsers
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.applyGroupLicensingRulesToUser
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.authTokenManager
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.deleteGroupLicenseRule
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.forceOptionsCallForAutoNegotiate
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.getApplicationStatus
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.getGroupLicensingRule
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.getGroupLicensingRules
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.groupLicensingRulesApiVersion
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.groupLicensingRulesApplicationApiVersion
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.groupLicensingRulesApplicationStatusApiVersion
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.groupLicensingRulesLookupApiVersion
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.groupLicensingRulesUserApplicationApiVersion
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.constructor
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.lookupGroupLicensingRules
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.serviceInstanceId
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.updateGroupLicensingRule
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3._beginGetLocation
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3._beginRequest
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3._beginRequestWithAjaxResult
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3._issueAjaxRequest
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3._rootRequestPath
      - >-
        vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3._setInitializationPromise
    langs:
      - typeScript
    type: class
    summary: ''
    package: vss-web-extension-sdk
    module: VSS.LicensingRule.RestClient
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.addGroupLicensingRule
    name: >-
      addGroupLicensingRule(licensingRule: GroupLicensingRule, ruleOption?:
      function)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Add a new group Licensing rule asynchronously'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.VSS.LicensingRule.Contracts.GroupLicensingRule
          type:
            - GroupLicensingRule
          description: The Licensing Rule
        - id: ruleOption
          type:
            - function
          description: Rule Option
          optional: true
      content: >-
        function addGroupLicensingRule(licensingRule: GroupLicensingRule,
        ruleOption?: function)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.applyGroupLicensingRulesToAllUsers
    name: 'applyGroupLicensingRulesToAllUsers(ruleOption?: function)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Applies group rules to the specified user'
    syntax:
      parameters:
        - id: ruleOption
          type:
            - function
          description: ''
          optional: true
      content: 'function applyGroupLicensingRulesToAllUsers(ruleOption?: function)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.applyGroupLicensingRulesToUser
    name: 'applyGroupLicensingRulesToUser(userId: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Applies group rules to the specified user'
    syntax:
      parameters:
        - id: userId
          type:
            - string
          description: ''
      content: 'function applyGroupLicensingRulesToUser(userId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.authTokenManager
    name: authTokenManager
    fullName: authTokenManager
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - vss-web-extension-sdk.IAuthTokenManager
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.deleteGroupLicenseRule
    name: 'deleteGroupLicenseRule(subjectDescriptor: string, ruleOption?: function)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Delete a group Licensing rule'
    syntax:
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: subjectDescriptor
        - id: ruleOption
          type:
            - function
          description: Rule Option
          optional: true
      content: >-
        function deleteGroupLicenseRule(subjectDescriptor: string, ruleOption?:
        function)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.forceOptionsCallForAutoNegotiate
    name: forceOptionsCallForAutoNegotiate
    fullName: forceOptionsCallForAutoNegotiate
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - boolean
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.getApplicationStatus
    name: 'getApplicationStatus(operationId?: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Gets application status for the specific rule'
    syntax:
      parameters:
        - id: operationId
          type:
            - string
          description: ''
          optional: true
      content: 'function getApplicationStatus(operationId?: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.getGroupLicensingRule
    name: 'getGroupLicensingRule(subjectDescriptor: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Gets the group Licensing rule for the group with given
      SubjectDescriptor
    syntax:
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: ''
      content: 'function getGroupLicensingRule(subjectDescriptor: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.getGroupLicensingRules
    name: 'getGroupLicensingRules(top: number, skip?: number)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: top
          type:
            - number
          description: ''
        - id: skip
          type:
            - number
          description: ''
          optional: true
      content: 'function getGroupLicensingRules(top: number, skip?: number)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.groupLicensingRulesApiVersion
    name: groupLicensingRulesApiVersion
    fullName: groupLicensingRulesApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.groupLicensingRulesApplicationApiVersion
    name: groupLicensingRulesApplicationApiVersion
    fullName: groupLicensingRulesApplicationApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.groupLicensingRulesApplicationStatusApiVersion
    name: groupLicensingRulesApplicationStatusApiVersion
    fullName: groupLicensingRulesApplicationStatusApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.groupLicensingRulesLookupApiVersion
    name: groupLicensingRulesLookupApiVersion
    fullName: groupLicensingRulesLookupApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.groupLicensingRulesUserApplicationApiVersion
    name: groupLicensingRulesUserApplicationApiVersion
    fullName: groupLicensingRulesUserApplicationApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.constructor
    name: >-
      LicensingRuleHttpClient2_3(rootRequestPath: string, options?:
      IVssHttpClientOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rootRequestPath
          type:
            - string
          description: ''
        - id: vss-web-extension-sdk.VSS.WebApi.RestClient.IVssHttpClientOptions
          type:
            - IVssHttpClientOptions
          description: ''
          optional: true
      content: >-
        new LicensingRuleHttpClient2_3(rootRequestPath: string, options?:
        IVssHttpClientOptions)
      return:
        type:
          - >-
            vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3
    type: constructor
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.lookupGroupLicensingRules
    name: 'lookupGroupLicensingRules(groupRuleLookup: GraphSubjectLookup)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Get Group License Rules for the given batch batch of group
      Ids
    syntax:
      parameters:
        - id: vss-web-extension-sdk.VSS.LicensingRule.Contracts.GraphSubjectLookup
          type:
            - GraphSubjectLookup
          description: ''
      content: 'function lookupGroupLicensingRules(groupRuleLookup: GraphSubjectLookup)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.serviceInstanceId
    name: serviceInstanceId
    fullName: serviceInstanceId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3.updateGroupLicensingRule
    name: >-
      updateGroupLicensingRule(licensingRuleUpdate: GroupLicensingRuleUpdate,
      ruleOption?: function)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Update a group Licensing rule'
    syntax:
      parameters:
        - id: >-
            vss-web-extension-sdk.VSS.LicensingRule.Contracts.GroupLicensingRuleUpdate
          type:
            - GroupLicensingRuleUpdate
          description: The update model for the Licensing Rule
        - id: ruleOption
          type:
            - function
          description: Rule Option
          optional: true
      content: >-
        function updateGroupLicensingRule(licensingRuleUpdate:
        GroupLicensingRuleUpdate, ruleOption?: function)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3._beginGetLocation
    name: '_beginGetLocation(area: string, locationId: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Gets information about an API resource location (route template, supported
      versions, etc.)
    syntax:
      parameters:
        - id: area
          type:
            - string
          description: resource area name
        - id: locationId
          type:
            - string
          description: |
            Guid of the location to get
      content: 'function _beginGetLocation(area: string, locationId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3._beginRequest
    name: >-
      _beginRequest(requestParams: VssApiResourceRequestParams, useAjaxResult?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: Issue a request to a VSS REST endpoint.
    syntax:
      parameters:
        - id: >-
            vss-web-extension-sdk.VSS.WebApi.RestClient.VssApiResourceRequestParams
          type:
            - VssApiResourceRequestParams
          description: request options
        - id: useAjaxResult
          type:
            - boolean
          description: >-
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used
          optional: true
      content: >-
        function _beginRequest(requestParams: VssApiResourceRequestParams,
        useAjaxResult?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3._beginRequestWithAjaxResult
    name: '_beginRequestWithAjaxResult(requestParams: VssApiResourceRequestParams)'
    children: []
    langs:
      - typeScript
    summary: >-
      Issue a request to a VSS REST endpoint and makes sure the result contains
      jqXHR. Use spread to access jqXHR.
    syntax:
      parameters:
        - id: >-
            vss-web-extension-sdk.VSS.WebApi.RestClient.VssApiResourceRequestParams
          type:
            - VssApiResourceRequestParams
          description: request options
      content: >-
        function _beginRequestWithAjaxResult(requestParams:
        VssApiResourceRequestParams)
      return:
        type:
          - Q.Promise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3._issueAjaxRequest
    name: >-
      _issueAjaxRequest(requestUrl: string, ajaxOptions: JQueryAjaxSettings,
      useAjaxResult?: boolean, vssRequestOptions?: IVssAjaxOptions)
    children: []
    langs:
      - typeScript
    summary: >-
      Issue an AJAX request. This is a wrapper around jquery's ajax method that
      handles VSS authentication

      and triggers events that can be listened to by other modules.
    syntax:
      parameters:
        - id: requestUrl
          type:
            - string
          description: Url to send the request to
        - id: ajaxOptions
          type:
            - JQueryAjaxSettings
          description: jQuery.ajax options
        - id: useAjaxResult
          type:
            - boolean
          description: >
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used.
          optional: true
        - id: vss-web-extension-sdk.IVssAjaxOptions
          type:
            - IVssAjaxOptions
          description: ''
          optional: true
      content: >-
        function _issueAjaxRequest(requestUrl: string, ajaxOptions:
        JQueryAjaxSettings, useAjaxResult?: boolean, vssRequestOptions?:
        IVssAjaxOptions)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3._rootRequestPath
    name: _rootRequestPath
    fullName: _rootRequestPath
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.LicensingRule.RestClient.LicensingRuleHttpClient2_3._setInitializationPromise
    name: '_setInitializationPromise(promise: IPromise)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets a promise that is waited on before any requests are issued. Can be
      used to asynchronously

      set the request url and auth token manager.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IPromise
          type:
            - IPromise
          description: ''
      content: 'function _setInitializationPromise(promise: IPromise)'
    type: method
