### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Navigation.Services.HistoryService
    name: HistoryService
    fullName: HistoryService
    children:
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.addHistoryPoint
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.attachNavigate_1
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.attachNavigate
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.deserializeState
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.detachNavigate
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.detachNavigate_1
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.getCurrentFragment
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.getCurrentHashString
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.getCurrentQueryString
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.getCurrentState
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.getFragmentActionLink
      - vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.constructor
      - vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.pushState
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.replaceHistoryPoint
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.replaceState
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.serializeState
      - >-
        vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.updateHistoryEntry
    langs:
      - typeScript
    type: class
    summary: Local service to manage history and navigation state
    source:
      path: vss.d.ts
      startLine: 28809
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Navigation/Services
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.addHistoryPoint
    name: >-
      addHistoryPoint(action: string, data?: any, windowTitle?: string,
      suppressNavigate?: boolean, mergeCurrentState?: boolean)
    children: []
    langs:
      - typeScript
    summary: >-
      Add a new history entry with the given state. Merges data with the current
      navigation data.
    syntax:
      content: >-
        function addHistoryPoint(action: string, data?: any, windowTitle?:
        string, suppressNavigate?: boolean, mergeCurrentState?: boolean)
      parameters:
        - id: action
          type:
            - string
          description: >-
            The "action" state parameter. This is the _a key in the url or
            "action" in the current state dictionary
        - id: data
          type:
            - any
          description: >-
            New history entries to merge into the current navigation data. Set
            keys to null/undefined to remove them from the current state.
          optional: true
        - id: windowTitle
          type:
            - string
          description: >-
            The new window title. A null or empty value indicates to leave the
            title unchanged.
          optional: true
        - id: suppressNavigate
          type:
            - boolean
          description: >-
            If true, don't trigger any of the attached navigate event handlers
            due to this update.
          optional: true
        - id: mergeCurrentState
          type:
            - boolean
          description: >
            If true, the supplied data just modify the existing/current state.
            If false, they replace all existing key/value pairs.
          optional: true
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.attachNavigate_1
    name: 'attachNavigate(handler: IFunctionPPR<any>, checkCurrentState?: boolean)'
    children: []
    langs:
      - typeScript
    summary: Attach a new navigate handler
    syntax:
      content: >-
        function attachNavigate(handler: IFunctionPPR<any>, checkCurrentState?:
        boolean)
      parameters:
        - id: handler
          type:
            - '@vss-web-extension-sdk.IFunctionPPR<any>'
          description: The method called whenever a navigation event occurs
        - id: checkCurrentState
          type:
            - boolean
          description: |
            If true, immediately invoke the handler
          optional: true
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.attachNavigate
    name: 'attachNavigate(handler: IFunctionPPR<any>, checkCurrentState?: boolean)'
    children: []
    langs:
      - typeScript
    summary: Attach a new navigate handler
    syntax:
      content: >-
        function attachNavigate(handler: IFunctionPPR<any>, checkCurrentState?:
        boolean)
      parameters:
        - id: handler
          type:
            - '@vss-web-extension-sdk.IFunctionPPR<any>'
          description: The method called whenever a navigation event occurs
        - id: checkCurrentState
          type:
            - boolean
          description: |
            If true, immediately invoke the handler
          optional: true
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.deserializeState
    name: 'deserializeState(state: string)'
    children: []
    langs:
      - typeScript
    summary: Deserialize a navigation state string into a navigation data lookup.
    syntax:
      content: 'static function deserializeState(state: string)'
      parameters:
        - id: state
          type:
            - string
          description: |
            The serialized navigation state string (hash or query string)
      return:
        type:
          - '@vss-web-extension-sdk.IDictionaryStringTo<any>'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.detachNavigate
    name: 'detachNavigate(handler: IFunctionPPR<any>)'
    children: []
    langs:
      - typeScript
    summary: Remove a navigate handler
    syntax:
      content: 'function detachNavigate(handler: IFunctionPPR<any>)'
      parameters:
        - id: handler
          type:
            - '@vss-web-extension-sdk.IFunctionPPR<any>'
          description: |
            The global navigate handler method to remove
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.detachNavigate_1
    name: 'detachNavigate(handler: IFunctionPPR<any>)'
    children: []
    langs:
      - typeScript
    summary: Remove a navigate handler
    syntax:
      content: 'function detachNavigate(handler: IFunctionPPR<any>)'
      parameters:
        - id: handler
          type:
            - '@vss-web-extension-sdk.IFunctionPPR<any>'
          description: |
            The global navigate handler method to remove
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.getCurrentFragment
    name: getCurrentFragment()
    children: []
    langs:
      - typeScript
    summary: Gets the serialized version of the current navigation state.
    syntax:
      content: function getCurrentFragment()
      parameters: []
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.getCurrentHashString
    name: getCurrentHashString()
    children: []
    langs:
      - typeScript
    summary: Gets the current url's hash string
    syntax:
      content: function getCurrentHashString()
      parameters: []
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.getCurrentQueryString
    name: getCurrentQueryString()
    children: []
    langs:
      - typeScript
    summary: Gets the current url's query string
    syntax:
      content: function getCurrentQueryString()
      parameters: []
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.getCurrentState
    name: getCurrentState()
    children: []
    langs:
      - typeScript
    summary: >-
      Get the current navigation state dictionary. Uses query parameters and
      hash parameters.
    syntax:
      content: function getCurrentState()
      parameters: []
      return:
        type:
          - any
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.getFragmentActionLink
    name: 'getFragmentActionLink(action: string, data?: any)'
    children: []
    langs:
      - typeScript
    summary: >-
      Creates a fragment url to be used in flight navigation.

      This always returns a fragment link, regardless of the browser's
      capability to handle push state.
    syntax:
      content: 'function getFragmentActionLink(action: string, data?: any)'
      parameters:
        - id: action
          type:
            - string
          description: The action name
        - id: data
          type:
            - any
          description: Action parameters
          optional: true
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.constructor
    name: HistoryService()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: new HistoryService()
      parameters: []
    type: constructor
  - uid: vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.pushState
    name: 'pushState(url: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Add a new history entry to the browser's history (updating the url in the
      address bar)
    syntax:
      content: 'function pushState(url: string)'
      parameters:
        - id: url
          type:
            - string
          description: |
            Url to update the browser's address bar to
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.replaceHistoryPoint
    name: >-
      replaceHistoryPoint(action: string, data: any, windowTitle?: string,
      suppressNavigate?: boolean, mergeCurrentState?: boolean)
    children: []
    langs:
      - typeScript
    summary: >-
      Replace the current history entry with the given state.

      The back button will therefore not map to the current url (at the time
      this call is made), but rather to the previous history entry.
    syntax:
      content: >-
        function replaceHistoryPoint(action: string, data: any, windowTitle?:
        string, suppressNavigate?: boolean, mergeCurrentState?: boolean)
      parameters:
        - id: action
          type:
            - string
          description: >-
            The "action" state parameter. This is the _a key in the url or
            "action" in the current state dictionary
        - id: data
          type:
            - any
          description: >-
            The new full set of navigation/history entries. This set completely
            replaces the current set.
        - id: windowTitle
          type:
            - string
          description: >-
            The new window title. A null or empty value indicates to leave the
            title unchanged.
          optional: true
        - id: suppressNavigate
          type:
            - boolean
          description: >-
            If true, don't trigger any of the attached navigate event handlers
            due to this update.
          optional: true
        - id: mergeCurrentState
          type:
            - boolean
          description: >
            If true, the supplied data just modify the existing/current state.
            If false, they replace all existing key/value pairs.
          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.replaceState
    name: 'replaceState(url: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Replace the current history entry in the browser's history (updating the
      url in the address bar)
    syntax:
      content: 'function replaceState(url: string)'
      parameters:
        - id: url
          type:
            - string
          description: |
            Url to update the browser's address bar to
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.serializeState
    name: 'serializeState(state: IDictionaryStringTo<any>)'
    children: []
    langs:
      - typeScript
    summary: >-
      Serialize a navigation data lookup into a string that can be used as a
      hash or query string.
    syntax:
      content: 'static function serializeState(state: IDictionaryStringTo<any>)'
      parameters:
        - id: state
          type:
            - '@vss-web-extension-sdk.IDictionaryStringTo<any>'
          description: |
            The navigation state dictionary to convert
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Navigation.Services.HistoryService.updateHistoryEntry
    name: >-
      updateHistoryEntry(action: string, data?: IDictionaryStringTo<any>,
      replaceHistoryEntry?: boolean, mergeWithCurrentState?: boolean,
      windowTitle?: string, suppressNavigate?: boolean)
    children: []
    langs:
      - typeScript
    summary: Update the current history entry
    syntax:
      content: >-
        function updateHistoryEntry(action: string, data?:
        IDictionaryStringTo<any>, replaceHistoryEntry?: boolean,
        mergeWithCurrentState?: boolean, windowTitle?: string,
        suppressNavigate?: boolean)
      parameters:
        - id: action
          type:
            - string
          description: >-
            The "action" state parameter. This is the _a key in the url or
            "action" in the current state dictionary
        - id: data
          type:
            - '@vss-web-extension-sdk.IDictionaryStringTo<any>'
          description: The history entry's new state key/value pairs
          optional: true
        - id: replaceHistoryEntry
          type:
            - boolean
          description: >-
            If true, replace the current history entry. Otherwise, add a new
            history entry.
          optional: true
        - id: mergeWithCurrentState
          type:
            - boolean
          description: >-
            If true, the supplied data just modify the existing/current state.
            If false, they replace all existing key/value pairs.
          optional: true
        - id: windowTitle
          type:
            - string
          description: >-
            The new window title. A null or empty value indicates to leave the
            title unchanged.
          optional: true
        - id: suppressNavigate
          type:
            - boolean
          description: >
            If true, don't trigger any of the attached navigate event handlers
            due to this update.
          optional: true
    type: method
