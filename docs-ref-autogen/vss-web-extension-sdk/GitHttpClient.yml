### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.GitHttpClient
    name: GitHttpClient
    fullName: GitHttpClient
    children:
      - vss-web-extension-sdk.GitHttpClient.createAnnotatedTag
      - vss-web-extension-sdk.GitHttpClient.createAttachment
      - vss-web-extension-sdk.GitHttpClient.createCherryPick
      - vss-web-extension-sdk.GitHttpClient.createComment
      - vss-web-extension-sdk.GitHttpClient.createCommitStatus
      - vss-web-extension-sdk.GitHttpClient.createFavorite
      - vss-web-extension-sdk.GitHttpClient.createImportRequest
      - vss-web-extension-sdk.GitHttpClient.createLike
      - vss-web-extension-sdk.GitHttpClient.createPullRequest
      - vss-web-extension-sdk.GitHttpClient.createPullRequestIterationStatus
      - vss-web-extension-sdk.GitHttpClient.createPullRequestLabels
      - vss-web-extension-sdk.GitHttpClient.createPullRequestReviewer
      - vss-web-extension-sdk.GitHttpClient.createPullRequestReviewers
      - vss-web-extension-sdk.GitHttpClient.createPullRequestStatus
      - vss-web-extension-sdk.GitHttpClient.createPush
      - vss-web-extension-sdk.GitHttpClient.createRepository
      - vss-web-extension-sdk.GitHttpClient.createRevert
      - vss-web-extension-sdk.GitHttpClient.createThread
      - vss-web-extension-sdk.GitHttpClient.deleteAttachment
      - vss-web-extension-sdk.GitHttpClient.deleteComment
      - vss-web-extension-sdk.GitHttpClient.deleteLike
      - vss-web-extension-sdk.GitHttpClient.deletePullRequestLabels
      - vss-web-extension-sdk.GitHttpClient.deletePullRequestReviewer
      - vss-web-extension-sdk.GitHttpClient.deleteRefFavorite
      - vss-web-extension-sdk.GitHttpClient.deleteRepository
      - vss-web-extension-sdk.GitHttpClient.getAnnotatedTag
      - vss-web-extension-sdk.GitHttpClient.getAttachmentContent
      - vss-web-extension-sdk.GitHttpClient.getAttachments
      - vss-web-extension-sdk.GitHttpClient.getAttachmentZip
      - vss-web-extension-sdk.GitHttpClient.getBlob
      - vss-web-extension-sdk.GitHttpClient.getBlobContent
      - vss-web-extension-sdk.GitHttpClient.getBlobsZip
      - vss-web-extension-sdk.GitHttpClient.getBlobZip
      - vss-web-extension-sdk.GitHttpClient.getBranch
      - vss-web-extension-sdk.GitHttpClient.getBranches
      - vss-web-extension-sdk.GitHttpClient.getBranchStatsBatch
      - vss-web-extension-sdk.GitHttpClient.getChanges
      - vss-web-extension-sdk.GitHttpClient.getCherryPick
      - vss-web-extension-sdk.GitHttpClient.getCherryPickForRefName
      - vss-web-extension-sdk.GitHttpClient.getComment
      - vss-web-extension-sdk.GitHttpClient.getComments
      - vss-web-extension-sdk.GitHttpClient.getCommit
      - vss-web-extension-sdk.GitHttpClient.getCommitDiffs
      - vss-web-extension-sdk.GitHttpClient.getCommits
      - vss-web-extension-sdk.GitHttpClient.getCommitsBatch
      - vss-web-extension-sdk.GitHttpClient.getDeletedRepositories
      - vss-web-extension-sdk.GitHttpClient.getFilePaths
      - vss-web-extension-sdk.GitHttpClient.getImportRequest
      - vss-web-extension-sdk.GitHttpClient.getItem
      - vss-web-extension-sdk.GitHttpClient.getItemContent
      - vss-web-extension-sdk.GitHttpClient.getItems
      - vss-web-extension-sdk.GitHttpClient.getItemsBatch
      - vss-web-extension-sdk.GitHttpClient.getItemText
      - vss-web-extension-sdk.GitHttpClient.getItemZip
      - vss-web-extension-sdk.GitHttpClient.getLikes
      - vss-web-extension-sdk.GitHttpClient.getPullRequest
      - vss-web-extension-sdk.GitHttpClient.getPullRequestById
      - vss-web-extension-sdk.GitHttpClient.getPullRequestCommits
      - vss-web-extension-sdk.GitHttpClient.getPullRequestConflict
      - vss-web-extension-sdk.GitHttpClient.getPullRequestConflicts
      - vss-web-extension-sdk.GitHttpClient.getPullRequestIteration
      - vss-web-extension-sdk.GitHttpClient.getPullRequestIterationChanges
      - vss-web-extension-sdk.GitHttpClient.getPullRequestIterationCommits
      - vss-web-extension-sdk.GitHttpClient.getPullRequestIterations
      - vss-web-extension-sdk.GitHttpClient.getPullRequestIterationStatus
      - vss-web-extension-sdk.GitHttpClient.getPullRequestIterationStatuses
      - vss-web-extension-sdk.GitHttpClient.getPullRequestLabel
      - vss-web-extension-sdk.GitHttpClient.getPullRequestLabels
      - vss-web-extension-sdk.GitHttpClient.getPullRequestQuery
      - vss-web-extension-sdk.GitHttpClient.getPullRequestReviewer
      - vss-web-extension-sdk.GitHttpClient.getPullRequestReviewers
      - vss-web-extension-sdk.GitHttpClient.getPullRequests
      - vss-web-extension-sdk.GitHttpClient.getPullRequestsByProject
      - vss-web-extension-sdk.GitHttpClient.getPullRequestStatus
      - vss-web-extension-sdk.GitHttpClient.getPullRequestStatuses
      - vss-web-extension-sdk.GitHttpClient.getPullRequestThread
      - vss-web-extension-sdk.GitHttpClient.getPullRequestWorkItems
      - vss-web-extension-sdk.GitHttpClient.getPush
      - vss-web-extension-sdk.GitHttpClient.getPushCommits
      - vss-web-extension-sdk.GitHttpClient.getPushes
      - vss-web-extension-sdk.GitHttpClient.getRefFavorite
      - vss-web-extension-sdk.GitHttpClient.getRefFavorites
      - vss-web-extension-sdk.GitHttpClient.getRefs
      - vss-web-extension-sdk.GitHttpClient.getRepositories
      - vss-web-extension-sdk.GitHttpClient.getRepository
      - vss-web-extension-sdk.GitHttpClient.getRevert
      - vss-web-extension-sdk.GitHttpClient.getRevertForRefName
      - vss-web-extension-sdk.GitHttpClient.getStats
      - vss-web-extension-sdk.GitHttpClient.getStatuses
      - vss-web-extension-sdk.GitHttpClient.getSuggestions
      - vss-web-extension-sdk.GitHttpClient.getTemplateList
      - vss-web-extension-sdk.GitHttpClient.getThreads
      - vss-web-extension-sdk.GitHttpClient.getTree
      - vss-web-extension-sdk.GitHttpClient.getTreeZip
      - vss-web-extension-sdk.GitHttpClient.constructor
      - vss-web-extension-sdk.GitHttpClient.queryImportRequests
      - vss-web-extension-sdk.GitHttpClient.sharePullRequest
      - vss-web-extension-sdk.GitHttpClient.updateComment
      - vss-web-extension-sdk.GitHttpClient.updateImportRequest
      - vss-web-extension-sdk.GitHttpClient.updatePullRequest
      - vss-web-extension-sdk.GitHttpClient.updatePullRequestConflict
      - vss-web-extension-sdk.GitHttpClient.updateRef
      - vss-web-extension-sdk.GitHttpClient.updateRefs
      - vss-web-extension-sdk.GitHttpClient.updateRepository
      - vss-web-extension-sdk.GitHttpClient.updateThread
      - vss-web-extension-sdk.GitHttpClient.validateRemoteRepository
      - vss-web-extension-sdk.GitHttpClient._beginGetLocation
      - vss-web-extension-sdk.GitHttpClient._beginRequest
      - vss-web-extension-sdk.GitHttpClient._beginRequestWithAjaxResult
      - vss-web-extension-sdk.GitHttpClient._issueAjaxRequest
      - vss-web-extension-sdk.GitHttpClient._setInitializationPromise
    langs:
      - typeScript
    type: class
    summary: ''
  - uid: vss-web-extension-sdk.GitHttpClient.createAnnotatedTag
    name: >-
      createAnnotatedTag(tagObject: GitAnnotatedTag, project: string,
      repositoryId: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Create an annotated tag'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitAnnotatedTag
          type:
            - GitAnnotatedTag
          description: Object containing details of tag to be created
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: Friendly name or guid of repository
      content: >-
        function createAnnotatedTag(tagObject: GitAnnotatedTag, project: string,
        repositoryId: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createAttachment
    name: >-
      createAttachment(content: any, fileName: string, repositoryId: string,
      pullRequestId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Create a new attachment'
    syntax:
      parameters:
        - id: content
          type:
            - any
          description: Content to upload
        - id: fileName
          type:
            - string
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createAttachment(content: any, fileName: string, repositoryId:
        string, pullRequestId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createCherryPick
    name: >-
      createCherryPick(cherryPickToCreate: GitAsyncRefOperationParameters,
      project: string, repositoryId: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitAsyncRefOperationParameters
          type:
            - GitAsyncRefOperationParameters
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: ''
      content: >-
        function createCherryPick(cherryPickToCreate:
        GitAsyncRefOperationParameters, project: string, repositoryId: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createComment
    name: >-
      createComment(comment: Comment, repositoryId: string, pullRequestId:
      number, threadId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: Create a pull request review comment
    syntax:
      parameters:
        - id: vss-web-extension-sdk.Comment
          type:
            - Comment
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: threadId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createComment(comment: Comment, repositoryId: string,
        pullRequestId: number, threadId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createCommitStatus
    name: >-
      createCommitStatus(gitCommitStatusToCreate: GitStatus, commitId: string,
      repositoryId: string, project?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitStatus
          type:
            - GitStatus
          description: ''
        - id: commitId
          type:
            - string
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createCommitStatus(gitCommitStatusToCreate: GitStatus,
        commitId: string, repositoryId: string, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createFavorite
    name: 'createFavorite(favorite: GitRefFavorite, project: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Creates a ref favorite'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitRefFavorite
          type:
            - GitRefFavorite
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
      content: 'function createFavorite(favorite: GitRefFavorite, project: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createImportRequest
    name: >-
      createImportRequest(importRequest: GitImportRequest, project: string,
      repositoryId: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Create an import request'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitImportRequest
          type:
            - GitImportRequest
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: ''
      content: >-
        function createImportRequest(importRequest: GitImportRequest, project:
        string, repositoryId: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createLike
    name: >-
      createLike(repositoryId: string, pullRequestId: number, threadId: number,
      commentId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Add a like on a comment.'
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: threadId
          type:
            - number
          description: ''
        - id: commentId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createLike(repositoryId: string, pullRequestId: number,
        threadId: number, commentId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createPullRequest
    name: >-
      createPullRequest(gitPullRequestToCreate: GitPullRequest, repositoryId:
      string, project?: string, linkBranchWorkItems?: boolean,
      linkCommitWorkItems?: boolean, supportsIterations?: boolean)
    children: []
    langs:
      - typeScript
    summary: Create a git pull request
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitPullRequest
          type:
            - GitPullRequest
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: linkBranchWorkItems
          type:
            - boolean
          description: ''
          optional: true
        - id: linkCommitWorkItems
          type:
            - boolean
          description: ''
          optional: true
        - id: supportsIterations
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function createPullRequest(gitPullRequestToCreate: GitPullRequest,
        repositoryId: string, project?: string, linkBranchWorkItems?: boolean,
        linkCommitWorkItems?: boolean, supportsIterations?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createPullRequestIterationStatus
    name: >-
      createPullRequestIterationStatus(status: GitPullRequestStatus,
      repositoryId: string, pullRequestId: number, iterationId: number,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Create a pull request iteration status'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitPullRequestStatus
          type:
            - GitPullRequestStatus
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: iterationId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createPullRequestIterationStatus(status: GitPullRequestStatus,
        repositoryId: string, pullRequestId: number, iterationId: number,
        project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createPullRequestLabels
    name: >-
      createPullRequestLabels(labels: function, repositoryId: string,
      pullRequestId: number, project?: string, projectId?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: labels
          type:
            - function
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: ''
          optional: true
      content: >-
        function createPullRequestLabels(labels: function, repositoryId: string,
        pullRequestId: number, project?: string, projectId?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createPullRequestReviewer
    name: >-
      createPullRequestReviewer(reviewer: IdentityRefWithVote, repositoryId:
      string, pullRequestId: number, reviewerId: string, project?: string)
    children: []
    langs:
      - typeScript
    summary: Adds a reviewer to a git pull request
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IdentityRefWithVote
          type:
            - IdentityRefWithVote
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: reviewerId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createPullRequestReviewer(reviewer: IdentityRefWithVote,
        repositoryId: string, pullRequestId: number, reviewerId: string,
        project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createPullRequestReviewers
    name: >-
      createPullRequestReviewers(reviewers: function, repositoryId: string,
      pullRequestId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: Adds reviewers to a git pull request
    syntax:
      parameters:
        - id: reviewers
          type:
            - function
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createPullRequestReviewers(reviewers: function, repositoryId:
        string, pullRequestId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createPullRequestStatus
    name: >-
      createPullRequestStatus(status: GitPullRequestStatus, repositoryId:
      string, pullRequestId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Create a pull request status'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitPullRequestStatus
          type:
            - GitPullRequestStatus
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createPullRequestStatus(status: GitPullRequestStatus,
        repositoryId: string, pullRequestId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createPush
    name: 'createPush(push: GitPush, repositoryId: string, project?: string)'
    children: []
    langs:
      - typeScript
    summary: Push changes to the repository.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitPush
          type:
            - GitPush
          description: ''
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            a project-scoped route must be used.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createPush(push: GitPush, repositoryId: string, project?:
        string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createRepository
    name: 'createRepository(gitRepositoryToCreate: GitRepository, project?: string)'
    children: []
    langs:
      - typeScript
    summary: Create a git repository
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitRepository
          type:
            - GitRepository
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createRepository(gitRepositoryToCreate: GitRepository,
        project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createRevert
    name: >-
      createRevert(revertToCreate: GitAsyncRefOperationParameters, project:
      string, repositoryId: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitAsyncRefOperationParameters
          type:
            - GitAsyncRefOperationParameters
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: ''
      content: >-
        function createRevert(revertToCreate: GitAsyncRefOperationParameters,
        project: string, repositoryId: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.createThread
    name: >-
      createThread(commentThread: GitPullRequestCommentThread, repositoryId:
      string, pullRequestId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: Create a pull request review comment thread
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitPullRequestCommentThread
          type:
            - GitPullRequestCommentThread
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function createThread(commentThread: GitPullRequestCommentThread,
        repositoryId: string, pullRequestId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.deleteAttachment
    name: >-
      deleteAttachment(fileName: string, repositoryId: string, pullRequestId:
      number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: fileName
          type:
            - string
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function deleteAttachment(fileName: string, repositoryId: string,
        pullRequestId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.deleteComment
    name: >-
      deleteComment(repositoryId: string, pullRequestId: number, threadId:
      number, commentId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: Delete a pull request comment by id for a pull request
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: threadId
          type:
            - number
          description: ''
        - id: commentId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function deleteComment(repositoryId: string, pullRequestId: number,
        threadId: number, commentId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.deleteLike
    name: >-
      deleteLike(repositoryId: string, pullRequestId: number, threadId: number,
      commentId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Delete a like on a comment.'
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: threadId
          type:
            - number
          description: ''
        - id: commentId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function deleteLike(repositoryId: string, pullRequestId: number,
        threadId: number, commentId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.deletePullRequestLabels
    name: >-
      deletePullRequestLabels(repositoryId: string, pullRequestId: number,
      labelIdOrName: string, project?: string, projectId?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: labelIdOrName
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: ''
          optional: true
      content: >-
        function deletePullRequestLabels(repositoryId: string, pullRequestId:
        number, labelIdOrName: string, project?: string, projectId?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.deletePullRequestReviewer
    name: >-
      deletePullRequestReviewer(repositoryId: string, pullRequestId: number,
      reviewerId: string, project?: string)
    children: []
    langs:
      - typeScript
    summary: Removes a reviewer from a git pull request
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: reviewerId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function deletePullRequestReviewer(repositoryId: string, pullRequestId:
        number, reviewerId: string, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.deleteRefFavorite
    name: 'deleteRefFavorite(project: string, favoriteId: number)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: favoriteId
          type:
            - number
          description: ''
      content: 'function deleteRefFavorite(project: string, favoriteId: number)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.deleteRepository
    name: 'deleteRepository(repositoryId: string, project?: string)'
    children: []
    langs:
      - typeScript
    summary: Delete a git repository
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: 'function deleteRepository(repositoryId: string, project?: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getAnnotatedTag
    name: 'getAnnotatedTag(project: string, repositoryId: string, objectId: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get an annotated tag'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: ''
        - id: objectId
          type:
            - string
          description: Sha1 of annotated tag to be returned
      content: >-
        function getAnnotatedTag(project: string, repositoryId: string,
        objectId: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getAttachmentContent
    name: >-
      getAttachmentContent(fileName: string, repositoryId: string,
      pullRequestId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: fileName
          type:
            - string
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getAttachmentContent(fileName: string, repositoryId: string,
        pullRequestId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getAttachments
    name: >-
      getAttachments(repositoryId: string, pullRequestId: number, project?:
      string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getAttachments(repositoryId: string, pullRequestId: number,
        project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getAttachmentZip
    name: >-
      getAttachmentZip(fileName: string, repositoryId: string, pullRequestId:
      number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: fileName
          type:
            - string
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getAttachmentZip(fileName: string, repositoryId: string,
        pullRequestId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getBlob
    name: >-
      getBlob(repositoryId: string, sha1: string, project?: string, download?:
      boolean, fileName?: string)
    children: []
    langs:
      - typeScript
    summary: Gets a single blob.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: sha1
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: fileName
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getBlob(repositoryId: string, sha1: string, project?: string,
        download?: boolean, fileName?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getBlobContent
    name: >-
      getBlobContent(repositoryId: string, sha1: string, project?: string,
      download?: boolean, fileName?: string)
    children: []
    langs:
      - typeScript
    summary: Gets a single blob.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: sha1
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: fileName
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getBlobContent(repositoryId: string, sha1: string, project?:
        string, download?: boolean, fileName?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getBlobsZip
    name: >-
      getBlobsZip(blobIds: function, repositoryId: string, project?: string,
      filename?: string)
    children: []
    langs:
      - typeScript
    summary: Gets one or more blobs in a zip file download.
    syntax:
      parameters:
        - id: blobIds
          type:
            - function
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: filename
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getBlobsZip(blobIds: function, repositoryId: string, project?:
        string, filename?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getBlobZip
    name: >-
      getBlobZip(repositoryId: string, sha1: string, project?: string,
      download?: boolean, fileName?: string)
    children: []
    langs:
      - typeScript
    summary: Gets a single blob.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: sha1
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: fileName
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getBlobZip(repositoryId: string, sha1: string, project?:
        string, download?: boolean, fileName?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getBranch
    name: >-
      getBranch(repositoryId: string, name: string, project?: string,
      baseVersionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: Retrieve statistics about a single branch.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: Friendly name or guid of repository
        - id: name
          type:
            - string
          description: Name of the branch
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: vss-web-extension-sdk.GitVersionDescriptor
          type:
            - GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getBranch(repositoryId: string, name: string, project?: string,
        baseVersionDescriptor?: GitVersionDescriptor)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getBranches
    name: >-
      getBranches(repositoryId: string, project?: string,
      baseVersionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: Retrieve statistics about all branches within a repository.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: Friendly name or guid of repository
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: vss-web-extension-sdk.GitVersionDescriptor
          type:
            - GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getBranches(repositoryId: string, project?: string,
        baseVersionDescriptor?: GitVersionDescriptor)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getBranchStatsBatch
    name: >-
      getBranchStatsBatch(searchCriteria: GitQueryBranchStatsCriteria,
      repositoryId: string, project?: string)
    children: []
    langs:
      - typeScript
    summary: Retrieve statistics for multiple commits
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitQueryBranchStatsCriteria
          type:
            - GitQueryBranchStatsCriteria
          description: ''
        - id: repositoryId
          type:
            - string
          description: Friendly name or guid of repository
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getBranchStatsBatch(searchCriteria:
        GitQueryBranchStatsCriteria, repositoryId: string, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getChanges
    name: >-
      getChanges(commitId: string, repositoryId: string, project?: string, top?:
      number, skip?: number)
    children: []
    langs:
      - typeScript
    summary: Retrieve changes for a particular commit.
    syntax:
      parameters:
        - id: commitId
          type:
            - string
          description: The id of the commit.
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: top
          type:
            - number
          description: The maximum number of changes to return.
          optional: true
        - id: skip
          type:
            - number
          description: The number of changes to skip.
          optional: true
      content: >-
        function getChanges(commitId: string, repositoryId: string, project?:
        string, top?: number, skip?: number)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getCherryPick
    name: 'getCherryPick(project: string, cherryPickId: number, repositoryId: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: cherryPickId
          type:
            - number
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
      content: >-
        function getCherryPick(project: string, cherryPickId: number,
        repositoryId: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getCherryPickForRefName
    name: >-
      getCherryPickForRefName(project: string, repositoryId: string, refName:
      string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: ''
        - id: refName
          type:
            - string
          description: ''
      content: >-
        function getCherryPickForRefName(project: string, repositoryId: string,
        refName: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getComment
    name: >-
      getComment(repositoryId: string, pullRequestId: number, threadId: number,
      commentId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: Get a pull request comment by id for a pull request
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: threadId
          type:
            - number
          description: ''
        - id: commentId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getComment(repositoryId: string, pullRequestId: number,
        threadId: number, commentId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getComments
    name: >-
      getComments(repositoryId: string, pullRequestId: number, threadId: number,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: Get all pull request comments in a thread.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: threadId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getComments(repositoryId: string, pullRequestId: number,
        threadId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getCommit
    name: >-
      getCommit(commitId: string, repositoryId: string, project?: string,
      changeCount?: number)
    children: []
    langs:
      - typeScript
    summary: Retrieve a particular commit.
    syntax:
      parameters:
        - id: commitId
          type:
            - string
          description: The id of the commit.
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: changeCount
          type:
            - number
          description: The number of changes to include in the result.
          optional: true
      content: >-
        function getCommit(commitId: string, repositoryId: string, project?:
        string, changeCount?: number)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getCommitDiffs
    name: >-
      getCommitDiffs(repositoryId: string, project?: string, diffCommonCommit?:
      boolean, top?: number, skip?: number, baseVersionDescriptor?:
      GitBaseVersionDescriptor, targetVersionDescriptor?:
      GitTargetVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: Get differences in committed items between two commits.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: Friendly name or guid of repository
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: diffCommonCommit
          type:
            - boolean
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: Maximum number of changes to return
          optional: true
        - id: skip
          type:
            - number
          description: Number of changes to skip
          optional: true
        - id: vss-web-extension-sdk.GitBaseVersionDescriptor
          type:
            - GitBaseVersionDescriptor
          description: ''
          optional: true
        - id: vss-web-extension-sdk.GitTargetVersionDescriptor
          type:
            - GitTargetVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getCommitDiffs(repositoryId: string, project?: string,
        diffCommonCommit?: boolean, top?: number, skip?: number,
        baseVersionDescriptor?: GitBaseVersionDescriptor,
        targetVersionDescriptor?: GitTargetVersionDescriptor)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getCommits
    name: >-
      getCommits(repositoryId: string, searchCriteria: GitQueryCommitsCriteria,
      project?: string, skip?: number, top?: number)
    children: []
    langs:
      - typeScript
    summary: Retrieve git commits for a project
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: vss-web-extension-sdk.GitQueryCommitsCriteria
          type:
            - GitQueryCommitsCriteria
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
      content: >-
        function getCommits(repositoryId: string, searchCriteria:
        GitQueryCommitsCriteria, project?: string, skip?: number, top?: number)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getCommitsBatch
    name: >-
      getCommitsBatch(searchCriteria: GitQueryCommitsCriteria, repositoryId:
      string, project?: string, skip?: number, top?: number, includeStatuses?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: Retrieve git commits for a project
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitQueryCommitsCriteria
          type:
            - GitQueryCommitsCriteria
          description: Search options
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: includeStatuses
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getCommitsBatch(searchCriteria: GitQueryCommitsCriteria,
        repositoryId: string, project?: string, skip?: number, top?: number,
        includeStatuses?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getDeletedRepositories
    name: 'getDeletedRepositories(project: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Retrieve deleted git repositories.'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
      content: 'function getDeletedRepositories(project: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getFilePaths
    name: >-
      getFilePaths(project: string, repositoryId: string, scopePath?: string,
      versionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get file paths in a repository branch'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: repository identifier
        - id: scopePath
          type:
            - string
          description: path to search under
          optional: true
        - id: vss-web-extension-sdk.GitVersionDescriptor
          type:
            - GitVersionDescriptor
          description: 'version, version type and options'
          optional: true
      content: >-
        function getFilePaths(project: string, repositoryId: string, scopePath?:
        string, versionDescriptor?: GitVersionDescriptor)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getImportRequest
    name: >-
      getImportRequest(project: string, repositoryId: string, importRequestId:
      number)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Retrieve a particular import request'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: ''
        - id: importRequestId
          type:
            - number
          description: ''
      content: >-
        function getImportRequest(project: string, repositoryId: string,
        importRequestId: number)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getItem
    name: >-
      getItem(repositoryId: string, path: string, project?: string, scopePath?:
      string, recursionLevel?: function, includeContentMetadata?: boolean,
      latestProcessedChange?: boolean, download?: boolean, versionDescriptor?:
      GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content
      which is always returned as a download.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: ''
          optional: true
        - id: recursionLevel
          type:
            - function
          description: ''
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: ''
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: ''
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: vss-web-extension-sdk.GitVersionDescriptor
          type:
            - GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getItem(repositoryId: string, path: string, project?: string,
        scopePath?: string, recursionLevel?: function, includeContentMetadata?:
        boolean, latestProcessedChange?: boolean, download?: boolean,
        versionDescriptor?: GitVersionDescriptor)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getItemContent
    name: >-
      getItemContent(repositoryId: string, path: string, project?: string,
      scopePath?: string, recursionLevel?: function, includeContentMetadata?:
      boolean, latestProcessedChange?: boolean, download?: boolean,
      versionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content
      which is always returned as a download.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: ''
          optional: true
        - id: recursionLevel
          type:
            - function
          description: ''
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: ''
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: ''
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: vss-web-extension-sdk.GitVersionDescriptor
          type:
            - GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getItemContent(repositoryId: string, path: string, project?:
        string, scopePath?: string, recursionLevel?: function,
        includeContentMetadata?: boolean, latestProcessedChange?: boolean,
        download?: boolean, versionDescriptor?: GitVersionDescriptor)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getItems
    name: >-
      getItems(repositoryId: string, project?: string, scopePath?: string,
      recursionLevel?: function, includeContentMetadata?: boolean,
      latestProcessedChange?: boolean, download?: boolean, includeLinks?:
      boolean, versionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a collection of items. The download
      parameter is to indicate whether the content should be available as a
      download or just sent as a stream in the response. Doesn't apply to zipped
      content which is always returned as a download.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: ''
          optional: true
        - id: recursionLevel
          type:
            - function
          description: ''
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: ''
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: ''
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: ''
          optional: true
        - id: vss-web-extension-sdk.GitVersionDescriptor
          type:
            - GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getItems(repositoryId: string, project?: string, scopePath?:
        string, recursionLevel?: function, includeContentMetadata?: boolean,
        latestProcessedChange?: boolean, download?: boolean, includeLinks?:
        boolean, versionDescriptor?: GitVersionDescriptor)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getItemsBatch
    name: >-
      getItemsBatch(requestData: GitItemRequestData, repositoryId: string,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: >-
      Post for retrieving a creating a batch out of a set of items in a repo /
      project given a list of paths or a long path
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitItemRequestData
          type:
            - GitItemRequestData
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getItemsBatch(requestData: GitItemRequestData, repositoryId:
        string, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getItemText
    name: >-
      getItemText(repositoryId: string, path: string, project?: string,
      scopePath?: string, recursionLevel?: function, includeContentMetadata?:
      boolean, latestProcessedChange?: boolean, download?: boolean,
      versionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content
      which is always returned as a download.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: ''
          optional: true
        - id: recursionLevel
          type:
            - function
          description: ''
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: ''
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: ''
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: vss-web-extension-sdk.GitVersionDescriptor
          type:
            - GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getItemText(repositoryId: string, path: string, project?:
        string, scopePath?: string, recursionLevel?: function,
        includeContentMetadata?: boolean, latestProcessedChange?: boolean,
        download?: boolean, versionDescriptor?: GitVersionDescriptor)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getItemZip
    name: >-
      getItemZip(repositoryId: string, path: string, project?: string,
      scopePath?: string, recursionLevel?: function, includeContentMetadata?:
      boolean, latestProcessedChange?: boolean, download?: boolean,
      versionDescriptor?: GitVersionDescriptor)
    children: []
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content
      which is always returned as a download.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: ''
          optional: true
        - id: recursionLevel
          type:
            - function
          description: ''
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: ''
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: ''
          optional: true
        - id: download
          type:
            - boolean
          description: ''
          optional: true
        - id: vss-web-extension-sdk.GitVersionDescriptor
          type:
            - GitVersionDescriptor
          description: ''
          optional: true
      content: >-
        function getItemZip(repositoryId: string, path: string, project?:
        string, scopePath?: string, recursionLevel?: function,
        includeContentMetadata?: boolean, latestProcessedChange?: boolean,
        download?: boolean, versionDescriptor?: GitVersionDescriptor)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getLikes
    name: >-
      getLikes(repositoryId: string, pullRequestId: number, threadId: number,
      commentId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get likes for a comment.'
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: threadId
          type:
            - number
          description: ''
        - id: commentId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getLikes(repositoryId: string, pullRequestId: number, threadId:
        number, commentId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequest
    name: >-
      getPullRequest(repositoryId: string, pullRequestId: number, project?:
      string, maxCommentLength?: number, skip?: number, top?: number,
      includeCommits?: boolean, includeWorkItemRefs?: boolean)
    children: []
    langs:
      - typeScript
    summary: Retrieve a pull request
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: maxCommentLength
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: includeCommits
          type:
            - boolean
          description: ''
          optional: true
        - id: includeWorkItemRefs
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getPullRequest(repositoryId: string, pullRequestId: number,
        project?: string, maxCommentLength?: number, skip?: number, top?:
        number, includeCommits?: boolean, includeWorkItemRefs?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestById
    name: 'getPullRequestById(pullRequestId: number)'
    children: []
    langs:
      - typeScript
    summary: Get a pull request using its ID
    syntax:
      parameters:
        - id: pullRequestId
          type:
            - number
          description: the Id of the pull request
      content: 'function getPullRequestById(pullRequestId: number)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestCommits
    name: >-
      getPullRequestCommits(repositoryId: string, pullRequestId: number,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: Retrieve pull request's commits
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestCommits(repositoryId: string, pullRequestId:
        number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestConflict
    name: >-
      getPullRequestConflict(repositoryId: string, pullRequestId: number,
      conflictId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Retrieve one conflict for a pull request by ID'
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: conflictId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestConflict(repositoryId: string, pullRequestId:
        number, conflictId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestConflicts
    name: >-
      getPullRequestConflicts(repositoryId: string, pullRequestId: number,
      project?: string, skip?: number, top?: number, includeObsolete?: boolean)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Retrieve all conflicts for a pull request'
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: includeObsolete
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getPullRequestConflicts(repositoryId: string, pullRequestId:
        number, project?: string, skip?: number, top?: number, includeObsolete?:
        boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestIteration
    name: >-
      getPullRequestIteration(repositoryId: string, pullRequestId: number,
      iterationId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: iterationId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestIteration(repositoryId: string, pullRequestId:
        number, iterationId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestIterationChanges
    name: >-
      getPullRequestIterationChanges(repositoryId: string, pullRequestId:
      number, iterationId: number, project?: string, top?: number, skip?:
      number, compareTo?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: iterationId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: compareTo
          type:
            - number
          description: ''
          optional: true
      content: >-
        function getPullRequestIterationChanges(repositoryId: string,
        pullRequestId: number, iterationId: number, project?: string, top?:
        number, skip?: number, compareTo?: number)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestIterationCommits
    name: >-
      getPullRequestIterationCommits(repositoryId: string, pullRequestId:
      number, iterationId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: Get the commits for an iteration.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: iterationId
          type:
            - number
          description: Iteration to retrieve commits for
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestIterationCommits(repositoryId: string,
        pullRequestId: number, iterationId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestIterations
    name: >-
      getPullRequestIterations(repositoryId: string, pullRequestId: number,
      project?: string, includeCommits?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeCommits
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getPullRequestIterations(repositoryId: string, pullRequestId:
        number, project?: string, includeCommits?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestIterationStatus
    name: >-
      getPullRequestIterationStatus(repositoryId: string, pullRequestId: number,
      iterationId: number, statusId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get the specific pull request iteration status.'
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: iterationId
          type:
            - number
          description: ''
        - id: statusId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestIterationStatus(repositoryId: string,
        pullRequestId: number, iterationId: number, statusId: number, project?:
        string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestIterationStatuses
    name: >-
      getPullRequestIterationStatuses(repositoryId: string, pullRequestId:
      number, iterationId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Get all the statuses associated with a pull request
      iteration.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: iterationId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestIterationStatuses(repositoryId: string,
        pullRequestId: number, iterationId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestLabel
    name: >-
      getPullRequestLabel(repositoryId: string, pullRequestId: number,
      labelIdOrName: string, project?: string, projectId?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: labelIdOrName
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getPullRequestLabel(repositoryId: string, pullRequestId:
        number, labelIdOrName: string, project?: string, projectId?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestLabels
    name: >-
      getPullRequestLabels(repositoryId: string, pullRequestId: number,
      project?: string, projectId?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Retrieve a pull request''s Labels'
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getPullRequestLabels(repositoryId: string, pullRequestId:
        number, project?: string, projectId?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestQuery
    name: >-
      getPullRequestQuery(queries: GitPullRequestQuery, repositoryId: string,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: Query for pull requests
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitPullRequestQuery
          type:
            - GitPullRequestQuery
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestQuery(queries: GitPullRequestQuery, repositoryId:
        string, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestReviewer
    name: >-
      getPullRequestReviewer(repositoryId: string, pullRequestId: number,
      reviewerId: string, project?: string)
    children: []
    langs:
      - typeScript
    summary: Retrieve a reviewer from a pull request
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: reviewerId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestReviewer(repositoryId: string, pullRequestId:
        number, reviewerId: string, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestReviewers
    name: >-
      getPullRequestReviewers(repositoryId: string, pullRequestId: number,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: Retrieve a pull request reviewers
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestReviewers(repositoryId: string, pullRequestId:
        number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequests
    name: >-
      getPullRequests(repositoryId: string, searchCriteria:
      GitPullRequestSearchCriteria, project?: string, maxCommentLength?: number,
      skip?: number, top?: number)
    children: []
    langs:
      - typeScript
    summary: Query for pull requests
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: vss-web-extension-sdk.GitPullRequestSearchCriteria
          type:
            - GitPullRequestSearchCriteria
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: maxCommentLength
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
      content: >-
        function getPullRequests(repositoryId: string, searchCriteria:
        GitPullRequestSearchCriteria, project?: string, maxCommentLength?:
        number, skip?: number, top?: number)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestsByProject
    name: >-
      getPullRequestsByProject(project: string, searchCriteria:
      GitPullRequestSearchCriteria, maxCommentLength?: number, skip?: number,
      top?: number)
    children: []
    langs:
      - typeScript
    summary: Query pull requests by project
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: vss-web-extension-sdk.GitPullRequestSearchCriteria
          type:
            - GitPullRequestSearchCriteria
          description: ''
        - id: maxCommentLength
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
      content: >-
        function getPullRequestsByProject(project: string, searchCriteria:
        GitPullRequestSearchCriteria, maxCommentLength?: number, skip?: number,
        top?: number)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestStatus
    name: >-
      getPullRequestStatus(repositoryId: string, pullRequestId: number,
      statusId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get the specific pull request status.'
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: statusId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestStatus(repositoryId: string, pullRequestId:
        number, statusId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestStatuses
    name: >-
      getPullRequestStatuses(repositoryId: string, pullRequestId: number,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get all the statuses associated with a pull request.'
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestStatuses(repositoryId: string, pullRequestId:
        number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestThread
    name: >-
      getPullRequestThread(repositoryId: string, pullRequestId: number,
      threadId: number, project?: string, iteration?: number, baseIteration?:
      number)
    children: []
    langs:
      - typeScript
    summary: Get a pull request comment thread by id for a pull request
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: threadId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: iteration
          type:
            - number
          description: ''
          optional: true
        - id: baseIteration
          type:
            - number
          description: ''
          optional: true
      content: >-
        function getPullRequestThread(repositoryId: string, pullRequestId:
        number, threadId: number, project?: string, iteration?: number,
        baseIteration?: number)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPullRequestWorkItems
    name: >-
      getPullRequestWorkItems(repositoryId: string, pullRequestId: number,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: Retrieve a pull request work items
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function getPullRequestWorkItems(repositoryId: string, pullRequestId:
        number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPush
    name: >-
      getPush(repositoryId: string, pushId: number, project?: string,
      includeCommits?: number, includeRefUpdates?: boolean)
    children: []
    langs:
      - typeScript
    summary: Retrieve a particular push.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: pushId
          type:
            - number
          description: The id of the push.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeCommits
          type:
            - number
          description: The number of commits to include in the result.
          optional: true
        - id: includeRefUpdates
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getPush(repositoryId: string, pushId: number, project?: string,
        includeCommits?: number, includeRefUpdates?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPushCommits
    name: >-
      getPushCommits(repositoryId: string, pushId: number, project?: string,
      top?: number, skip?: number, includeLinks?: boolean)
    children: []
    langs:
      - typeScript
    summary: Retrieve a list of commits associated with a particular push.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: pushId
          type:
            - number
          description: The id of the push.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: top
          type:
            - number
          description: The maximum number of commits to return ("get the top x commits").
          optional: true
        - id: skip
          type:
            - number
          description: The number of commits to skip.
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getPushCommits(repositoryId: string, pushId: number, project?:
        string, top?: number, skip?: number, includeLinks?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getPushes
    name: >-
      getPushes(repositoryId: string, project?: string, skip?: number, top?:
      number, searchCriteria?: GitPushSearchCriteria)
    children: []
    langs:
      - typeScript
    summary: Retrieves pushes associated with the specified repository.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: vss-web-extension-sdk.GitPushSearchCriteria
          type:
            - GitPushSearchCriteria
          description: ''
          optional: true
      content: >-
        function getPushes(repositoryId: string, project?: string, skip?:
        number, top?: number, searchCriteria?: GitPushSearchCriteria)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getRefFavorite
    name: 'getRefFavorite(project: string, favoriteId: number)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: favoriteId
          type:
            - number
          description: ''
      content: 'function getRefFavorite(project: string, favoriteId: number)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getRefFavorites
    name: >-
      getRefFavorites(project: string, repositoryId?: string, identityId?:
      string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Gets the refs favorites for a repo and an identity.'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: The id of the repository.
          optional: true
        - id: identityId
          type:
            - string
          description: >-
            The id of the identity whose favorites are to be retrieved. If null,
            the requesting identity is used.
          optional: true
      content: >-
        function getRefFavorites(project: string, repositoryId?: string,
        identityId?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getRefs
    name: >-
      getRefs(repositoryId: string, project?: string, filter?: string,
      includeLinks?: boolean, includeStatuses?: boolean, includeMyBranches?:
      boolean, latestStatusesOnly?: boolean, peelTags?: boolean)
    children: []
    langs:
      - typeScript
    summary: Queries the provided repository for its refs and returns them.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: filter
          type:
            - string
          description: '[optional] A filter to apply to the refs.'
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: >-
            [optional] Specifies if referenceLinks should be included in the
            result. default is false.
          optional: true
        - id: includeStatuses
          type:
            - boolean
          description: >-
            [optional] Includes the first 1000 statuses of the commits the refs
            are pointing at as well. default is false.
          optional: true
        - id: includeMyBranches
          type:
            - boolean
          description: >-
            [optional] Includes only branches that the user owns, the branches
            the user favorites, and the default branch. Cannot be combined with
            the filter parameter.
          optional: true
        - id: latestStatusesOnly
          type:
            - boolean
          description: ''
          optional: true
        - id: peelTags
          type:
            - boolean
          description: >-
            [optional] Annotated tags will populate the PeeledObjectId property.
            default is false.
          optional: true
      content: >-
        function getRefs(repositoryId: string, project?: string, filter?:
        string, includeLinks?: boolean, includeStatuses?: boolean,
        includeMyBranches?: boolean, latestStatusesOnly?: boolean, peelTags?:
        boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getRepositories
    name: >-
      getRepositories(project?: string, includeLinks?: boolean, includeAllUrls?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: Retrieve git repositories.
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: ''
          optional: true
        - id: includeAllUrls
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getRepositories(project?: string, includeLinks?: boolean,
        includeAllUrls?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getRepository
    name: 'getRepository(repositoryId: string, project?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: 'function getRepository(repositoryId: string, project?: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getRevert
    name: 'getRevert(project: string, revertId: number, repositoryId: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: revertId
          type:
            - number
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
      content: >-
        function getRevert(project: string, revertId: number, repositoryId:
        string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getRevertForRefName
    name: >-
      getRevertForRefName(project: string, repositoryId: string, refName:
      string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: ''
        - id: refName
          type:
            - string
          description: ''
      content: >-
        function getRevertForRefName(project: string, repositoryId: string,
        refName: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getStats
    name: 'getStats(project: string, repositoryId: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Retrieves statistics of a repository.'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: Friendly name or guid of repository.
      content: 'function getStats(project: string, repositoryId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getStatuses
    name: >-
      getStatuses(commitId: string, repositoryId: string, project?: string,
      top?: number, skip?: number, latestOnly?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: commitId
          type:
            - string
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: ''
          optional: true
        - id: latestOnly
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getStatuses(commitId: string, repositoryId: string, project?:
        string, top?: number, skip?: number, latestOnly?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getSuggestions
    name: 'getSuggestions(repositoryId: string, project?: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Retrieve a set of suggestions (including a pull request
      suggestion).
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: 'function getSuggestions(repositoryId: string, project?: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getTemplateList
    name: 'getTemplateList(project: string, type?: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Retrieve all available templates of specified 'type'. If not
      specified, entire list is returned
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: type
          type:
            - string
          description: searches for templates with this type
          optional: true
      content: 'function getTemplateList(project: string, type?: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getThreads
    name: >-
      getThreads(repositoryId: string, pullRequestId: number, project?: string,
      iteration?: number, baseIteration?: number)
    children: []
    langs:
      - typeScript
    summary: Get all pull request comment threads.
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: iteration
          type:
            - number
          description: ''
          optional: true
        - id: baseIteration
          type:
            - number
          description: ''
          optional: true
      content: >-
        function getThreads(repositoryId: string, pullRequestId: number,
        project?: string, iteration?: number, baseIteration?: number)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getTree
    name: >-
      getTree(repositoryId: string, sha1: string, project?: string, projectId?:
      string, recursive?: boolean, fileName?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: sha1
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: ''
          optional: true
        - id: recursive
          type:
            - boolean
          description: ''
          optional: true
        - id: fileName
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getTree(repositoryId: string, sha1: string, project?: string,
        projectId?: string, recursive?: boolean, fileName?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.getTreeZip
    name: >-
      getTreeZip(repositoryId: string, sha1: string, project?: string,
      projectId?: string, recursive?: boolean, fileName?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: repositoryId
          type:
            - string
          description: ''
        - id: sha1
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: ''
          optional: true
        - id: recursive
          type:
            - boolean
          description: ''
          optional: true
        - id: fileName
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getTreeZip(repositoryId: string, sha1: string, project?:
        string, projectId?: string, recursive?: boolean, fileName?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.constructor
    name: 'GitHttpClient(rootRequestPath: string, options?: IVssHttpClientOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rootRequestPath
          type:
            - string
          description: ''
        - id: vss-web-extension-sdk.IVssHttpClientOptions
          type:
            - IVssHttpClientOptions
          description: ''
          optional: true
      content: >-
        new GitHttpClient(rootRequestPath: string, options?:
        IVssHttpClientOptions)
      return:
        type:
          - vss-web-extension-sdk.GitHttpClient
    type: constructor
  - uid: vss-web-extension-sdk.GitHttpClient.queryImportRequests
    name: >-
      queryImportRequests(project: string, repositoryId: string,
      includeAbandoned?: boolean)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Retrieve import requests for a repository'
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: ''
        - id: includeAbandoned
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function queryImportRequests(project: string, repositoryId: string,
        includeAbandoned?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.sharePullRequest
    name: >-
      sharePullRequest(userMessage: ShareNotificationContext, repositoryId:
      string, pullRequestId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.ShareNotificationContext
          type:
            - ShareNotificationContext
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function sharePullRequest(userMessage: ShareNotificationContext,
        repositoryId: string, pullRequestId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.updateComment
    name: >-
      updateComment(comment: Comment, repositoryId: string, pullRequestId:
      number, threadId: number, commentId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: Update a pull request review comment thread
    syntax:
      parameters:
        - id: vss-web-extension-sdk.Comment
          type:
            - Comment
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: threadId
          type:
            - number
          description: ''
        - id: commentId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function updateComment(comment: Comment, repositoryId: string,
        pullRequestId: number, threadId: number, commentId: number, project?:
        string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.updateImportRequest
    name: >-
      updateImportRequest(importRequestToUpdate: GitImportRequest, project:
      string, repositoryId: string, importRequestId: number)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Update an import request'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitImportRequest
          type:
            - GitImportRequest
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: ''
        - id: importRequestId
          type:
            - number
          description: ''
      content: >-
        function updateImportRequest(importRequestToUpdate: GitImportRequest,
        project: string, repositoryId: string, importRequestId: number)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.updatePullRequest
    name: >-
      updatePullRequest(gitPullRequestToUpdate: GitPullRequest, repositoryId:
      string, pullRequestId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: Updates a pull request
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitPullRequest
          type:
            - GitPullRequest
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function updatePullRequest(gitPullRequestToUpdate: GitPullRequest,
        repositoryId: string, pullRequestId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.updatePullRequestConflict
    name: >-
      updatePullRequestConflict(conflict: GitConflict, repositoryId: string,
      pullRequestId: number, conflictId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Update merge conflict resolution'
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitConflict
          type:
            - GitConflict
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: conflictId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function updatePullRequestConflict(conflict: GitConflict, repositoryId:
        string, pullRequestId: number, conflictId: number, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.updateRef
    name: >-
      updateRef(newRefInfo: GitRefUpdate, repositoryId: string, filter: string,
      project?: string, projectId?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitRefUpdate
          type:
            - GitRefUpdate
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: filter
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: ''
          optional: true
      content: >-
        function updateRef(newRefInfo: GitRefUpdate, repositoryId: string,
        filter: string, project?: string, projectId?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.updateRefs
    name: >-
      updateRefs(refUpdates: function, repositoryId: string, project?: string,
      projectId?: string)
    children: []
    langs:
      - typeScript
    summary: Creates or updates refs with the given information
    syntax:
      parameters:
        - id: refUpdates
          type:
            - function
          description: List of ref updates to attempt to perform
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: The id of the project.
          optional: true
      content: >-
        function updateRefs(refUpdates: function, repositoryId: string,
        project?: string, projectId?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.updateRepository
    name: >-
      updateRepository(newRepositoryInfo: GitRepository, repositoryId: string,
      project?: string)
    children: []
    langs:
      - typeScript
    summary: >-
      Updates the Git repository with the single populated change in the
      specified repository information.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitRepository
          type:
            - GitRepository
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function updateRepository(newRepositoryInfo: GitRepository,
        repositoryId: string, project?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.updateThread
    name: >-
      updateThread(commentThread: GitPullRequestCommentThread, repositoryId:
      string, pullRequestId: number, threadId: number, project?: string)
    children: []
    langs:
      - typeScript
    summary: Update a pull request review comment thread
    syntax:
      parameters:
        - id: vss-web-extension-sdk.GitPullRequestCommentThread
          type:
            - GitPullRequestCommentThread
          description: ''
        - id: repositoryId
          type:
            - string
          description: ''
        - id: pullRequestId
          type:
            - number
          description: ''
        - id: threadId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
      content: >-
        function updateThread(commentThread: GitPullRequestCommentThread,
        repositoryId: string, pullRequestId: number, threadId: number, project?:
        string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient.validateRemoteRepository
    name: >-
      validateRemoteRepository(remoteRepository: ImportRepositoryValidation,
      project: string)
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Validates a remote repository. Returns 404 if remote
      repository is not reachable
    syntax:
      parameters:
        - id: vss-web-extension-sdk.ImportRepositoryValidation
          type:
            - ImportRepositoryValidation
          description: The remote repository to validate.
        - id: project
          type:
            - string
          description: Project ID or project name
      content: >-
        function validateRemoteRepository(remoteRepository:
        ImportRepositoryValidation, project: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient._beginGetLocation
    name: '_beginGetLocation(area: string, locationId: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Gets information about an API resource location (route template, supported
      versions, etc.)
    syntax:
      parameters:
        - id: area
          type:
            - string
          description: resource area name
        - id: locationId
          type:
            - string
          description: |
            Guid of the location to get
      content: 'function _beginGetLocation(area: string, locationId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient._beginRequest
    name: >-
      _beginRequest(requestParams: VssApiResourceRequestParams, useAjaxResult?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: Issue a request to a VSS REST endpoint.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.VssApiResourceRequestParams
          type:
            - VssApiResourceRequestParams
          description: request options
        - id: useAjaxResult
          type:
            - boolean
          description: >-
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used
          optional: true
      content: >-
        function _beginRequest(requestParams: VssApiResourceRequestParams,
        useAjaxResult?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient._beginRequestWithAjaxResult
    name: '_beginRequestWithAjaxResult(requestParams: VssApiResourceRequestParams)'
    children: []
    langs:
      - typeScript
    summary: >-
      Issue a request to a VSS REST endpoint and makes sure the result contains
      jqXHR. Use spread to access jqXHR.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.VssApiResourceRequestParams
          type:
            - VssApiResourceRequestParams
          description: request options
      content: >-
        function _beginRequestWithAjaxResult(requestParams:
        VssApiResourceRequestParams)
      return:
        type:
          - Q.Promise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient._issueAjaxRequest
    name: >-
      _issueAjaxRequest(requestUrl: string, ajaxOptions: JQueryAjaxSettings,
      useAjaxResult?: boolean, vssRequestOptions?: IVssAjaxOptions)
    children: []
    langs:
      - typeScript
    summary: >-
      Issue an AJAX request. This is a wrapper around jquery's ajax method that
      handles VSS authentication

      and triggers events that can be listened to by other modules.
    syntax:
      parameters:
        - id: requestUrl
          type:
            - string
          description: Url to send the request to
        - id: ajaxOptions
          type:
            - JQueryAjaxSettings
          description: jQuery.ajax options
        - id: useAjaxResult
          type:
            - boolean
          description: >
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used.
          optional: true
        - id: vss-web-extension-sdk.IVssAjaxOptions
          type:
            - IVssAjaxOptions
          description: ''
          optional: true
      content: >-
        function _issueAjaxRequest(requestUrl: string, ajaxOptions:
        JQueryAjaxSettings, useAjaxResult?: boolean, vssRequestOptions?:
        IVssAjaxOptions)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.GitHttpClient._setInitializationPromise
    name: '_setInitializationPromise(promise: IPromise)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets a promise that is waited on before any requests are issued. Can be
      used to asynchronously

      set the request url and auth token manager.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IPromise
          type:
            - IPromise
          description: ''
      content: 'function _setInitializationPromise(promise: IPromise)'
    type: method
