### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO
    name: ComboO
    fullName: ComboO<TOptions>
    children:
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.attachBehavior
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.blockBlur
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.cancelBlockBlur
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.enhancementTypeName
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.fireChangeIfNecessary
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.focus
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getBehavior
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getComboType
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getDropButton
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getEnabled
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getInput
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getInputText
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getMode
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getSelectedIndex
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getText
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getValue
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.hideDropPopup
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.initialize
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.initializeOptions
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.invalidAttribute
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.isBlockingBlur
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.isDropVisible
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.isValid
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.registerBehavior
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setEnabled
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setInputText
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setInvalid
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setMode
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setSelectedIndex
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setSource
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setText
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setTextSelection
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setType
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.showDropPopup
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.toggleDropDown
      - vss-web-extension-sdk.VSS.Controls.Combos.ComboO.updateAriaAttributes
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      - '@vss-web-extension-sdk.VSS.Controls.Control<TOptions>'
    source:
      path: vss.d.ts
      startLine: 9953
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Controls/Combos
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.attachBehavior
    name: 'attachBehavior(combo: any, options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: combo
          type:
            - any
          description: ''
        - id: options
          type:
            - any
          description: ''
          optional: true
      content: 'static function attachBehavior(combo: any, options?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.blockBlur
    name: blockBlur()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function blockBlur()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.cancelBlockBlur
    name: cancelBlockBlur()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function cancelBlockBlur()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.enhancementTypeName
    name: enhancementTypeName
    fullName: enhancementTypeName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: static string enhancementTypeName
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.fireChangeIfNecessary
    name: 'fireChangeIfNecessary(newValue?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: newValue
          type:
            - string
          description: |+

          optional: true
      content: 'function fireChangeIfNecessary(newValue?: string)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.focus
    name: focus()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function focus()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getBehavior
    name: getBehavior<TBehavior>()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getBehavior<TBehavior>()
      return:
        type:
          - TBehavior
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getComboType
    name: getComboType()
    children: []
    langs:
      - typeScript
    summary: Gets the type of the combo.
    syntax:
      parameters: []
      content: function getComboType()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getDropButton
    name: getDropButton()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getDropButton()
      return:
        type:
          - JQuery
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getEnabled
    name: getEnabled()
    children: []
    langs:
      - typeScript
    summary: Gets the enabled state of the combo.
    syntax:
      parameters: []
      content: function getEnabled()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getInput
    name: getInput()
    children: []
    langs:
      - typeScript
    summary: Gets the input element of combo
    syntax:
      parameters: []
      content: function getInput()
      return:
        type:
          - JQuery
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getInputText
    name: getInputText()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getInputText()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getMode
    name: getMode()
    children: []
    langs:
      - typeScript
    summary: Gets the mode of the combo.
    syntax:
      parameters: []
      content: function getMode()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getSelectedIndex
    name: getSelectedIndex()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSelectedIndex()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getText
    name: getText()
    children: []
    langs:
      - typeScript
    summary: Gets the current text value of the combo.
    syntax:
      parameters: []
      content: function getText()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.getValue
    name: getValue<TValue>()
    children: []
    langs:
      - typeScript
    summary: >-
      Gets the underlying value of the combo. If the type is 'list', value is
      string. If the type is 'date-time', value is Date. If the type is
      'multi-value', value is string[].
    syntax:
      parameters: []
      content: function getValue<TValue>()
      return:
        type:
          - TValue
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.hideDropPopup
    name: hideDropPopup()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function hideDropPopup()
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.initialize
    name: initialize()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function initialize()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.initializeOptions
    name: 'initializeOptions(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: options
          type:
            - any
          description: |+

          optional: true
      content: 'function initializeOptions(options?: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.invalidAttribute
    name: invalidAttribute
    fullName: invalidAttribute
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: static string invalidAttribute
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.isBlockingBlur
    name: isBlockingBlur()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function isBlockingBlur()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.isDropVisible
    name: isDropVisible()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function isDropVisible()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.isValid
    name: isValid()
    children: []
    langs:
      - typeScript
    summary: Return true if the combo is in valid state. Otherwise return false.
    syntax:
      parameters: []
      content: function isValid()
      return:
        type:
          - Boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.registerBehavior
    name: 'registerBehavior(behaviorMode: any, behaviorType: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: behaviorMode
          type:
            - any
          description: ''
        - id: behaviorType
          type:
            - any
          description: ''
      content: 'static function registerBehavior(behaviorMode: any, behaviorType: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setEnabled
    name: 'setEnabled(value: boolean)'
    children: []
    langs:
      - typeScript
    summary: Sets the enabled state of the combo.
    syntax:
      parameters:
        - id: value
          type:
            - boolean
          description: 'True for enabled, false for disabled.'
      content: 'function setEnabled(value: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setInputText
    name: 'setInputText(text: string, fireEvent?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: text
          type:
            - string
          description: ''
        - id: fireEvent
          type:
            - boolean
          description: ''
          optional: true
      content: 'function setInputText(text: string, fireEvent?: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setInvalid
    name: 'setInvalid(value: boolean)'
    children: []
    langs:
      - typeScript
    summary: Sets the invalid state of the combo.
    syntax:
      parameters:
        - id: value
          type:
            - boolean
          description: 'True for invalid, false for valid.'
      content: 'function setInvalid(value: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setMode
    name: 'setMode(value: string)'
    children: []
    langs:
      - typeScript
    summary: Sets the mode of the combo.
    syntax:
      parameters:
        - id: value
          type:
            - string
          description: '''drop'' or ''text''.'
      content: 'function setMode(value: string)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setSelectedIndex
    name: 'setSelectedIndex(selectedIndex: number, fireEvent?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: selectedIndex
          type:
            - number
          description: ''
        - id: fireEvent
          type:
            - boolean
          description: ''
          optional: true
      content: 'function setSelectedIndex(selectedIndex: number, fireEvent?: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setSource
    name: 'setSource(source: function)'
    children: []
    langs:
      - typeScript
    summary: Sets a new source for the combo.
    syntax:
      parameters:
        - id: source
          type:
            - function
          description: New source for the combo.
      content: 'function setSource(source: function)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setText
    name: 'setText(text: string, fireEvent?: boolean)'
    children: []
    langs:
      - typeScript
    summary: Sets the text of the combo.
    syntax:
      parameters:
        - id: text
          type:
            - string
          description: New value to set.
        - id: fireEvent
          type:
            - boolean
          description: Determines whether to fire change event or not (default false).
          optional: true
      content: 'function setText(text: string, fireEvent?: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setTextSelection
    name: 'setTextSelection(selectionStart: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: selectionStart
          type:
            - number
          description: ''
      content: 'function setTextSelection(selectionStart: number)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.setType
    name: 'setType(type: string)'
    children: []
    langs:
      - typeScript
    summary: Sets the type of the combo.
    syntax:
      parameters:
        - id: type
          type:
            - string
          description: ''
      content: 'function setType(type: string)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.showDropPopup
    name: 'showDropPopup(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function showDropPopup(e?: JQueryEventObject)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.toggleDropDown
    name: toggleDropDown()
    children: []
    langs:
      - typeScript
    summary: Programmatically toggles the dropdown.
    syntax:
      parameters: []
      content: function toggleDropDown()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Combos.ComboO.updateAriaAttributes
    name: 'updateAriaAttributes(isDropVisible?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: isDropVisible
          type:
            - boolean
          description: ''
          optional: true
      content: 'function updateAriaAttributes(isDropVisible?: boolean)'
    type: method
