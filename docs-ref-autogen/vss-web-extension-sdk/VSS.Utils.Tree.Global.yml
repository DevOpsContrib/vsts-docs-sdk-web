### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Utils.Tree.Global
    package: vss-web-extension-sdk
    name: Global
    module: VSS/Utils/Tree
    children:
      - vss-web-extension-sdk.VSS.Utils.Tree.filterTree
      - vss-web-extension-sdk.VSS.Utils.Tree.traversePreOrder
    type: package
    langs:
      - typeScript
  - uid: vss-web-extension-sdk.VSS.Utils.Tree.filterTree
    name: filterTree
    children: []
    type: function
    langs:
      - typeScript
    summary: >
      Filters a given tree by a given predicate. The result of this operation
      will include

      - all nodes that match the predicate (`isPredicateMatch` set to true)

      - all nodes that have a predicate matching descendant
      (`hasMatchingDescendant` set to true)

      - all descendants of predicate matching nodes.

      Example (* denotes predicate matching nodes):
            R
          / | \
         A* X  B
         |  |  |
         C  Y  D*

      Result set (isPredicateMatch iPM, hasMatchingDescendant hMD):

      Node | hMD | iPM
       R      x
       A            x
       C
       B      x
       D            x
    syntax:
      content: >-
        function filterTree<TNode>(root: TNode, predicate: (node: TNode) =>
        boolean, getKey: (node: TNode) => string, getChildren: (node: TNode) =>
        TNode[], preFilter?: IFilterResult)
      parameters:
        - id: root
          type:
            - TNode
          description: Root node of tree to filter
        - id: predicate
          type:
            - '(node: TNode) => boolean'
          description: Filter predicate
        - id: getKey
          type:
            - '(node: TNode) => string'
          description: 'Given a tree node, returns a unique identifier'
        - id: getChildren
          type:
            - '(node: TNode) => TNode[]'
          description: 'Given a tree node, returns its children'
        - id: preFilter
          type:
            - '@vss-web-extension-sdk.VSS.Utils.Tree.IFilterResult'
          description: >
            Previous filter result, any node that didn't match previously will
            not be considered again
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.VSS.Utils.Tree.IFilterResult'
    module: VSS/Utils/Tree
  - uid: vss-web-extension-sdk.VSS.Utils.Tree.traversePreOrder
    name: traversePreOrder
    children: []
    type: function
    langs:
      - typeScript
    summary: Traverse a given tree pre-order
    syntax:
      content: >-
        function traversePreOrder<TNode>(root: TNode, getChildren: (node: TNode)
        => TNode[], visitor: (node: TNode, parentNode?: TNode, level?: number,
        childrenCount?: number) => boolean)
      parameters:
        - id: root
          type:
            - TNode
          description: Root node of tree
        - id: getChildren
          type:
            - '(node: TNode) => TNode[]'
          description: 'Given a tree node, returns its children'
        - id: visitor
          type:
            - >-
              (node: TNode, parentNode?: TNode, level?: number, childrenCount?:
              number) => boolean
          description: |
            Callback to be called for each node in the tree, in order
    module: VSS/Utils/Tree
