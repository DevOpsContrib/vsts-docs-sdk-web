### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView
    name: TabbedNavigationView
    fullName: TabbedNavigationView
    children:
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.appendElement
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.appendInformationContent
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.appendSectionSummary
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.appendSectionTitle
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getCurrentAction
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getEmptyState
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getRawState
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getState
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTab
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTabLabel
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTabVisibility
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.initialize
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.initializeOptions
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.parseStateInfo
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.refreshCurrentTab
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setHubPivotVisibility
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setState
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.showError
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.showErrorContent
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.showInformationTab
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.constructor
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.updateTabs
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      - '@vss-web-extension-sdk.VSS.Controls.Navigation.NavigationView'
    source:
      path: vss.d.ts
      startLine: 14914
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Controls/Navigation
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.appendElement
    name: 'appendElement(element: JQuery)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - JQuery
          description: ''
      content: 'function appendElement(element: JQuery)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.appendInformationContent
    name: 'appendInformationContent(caption: string, collapsed: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: caption
          type:
            - string
          description: ''
        - id: collapsed
          type:
            - boolean
          description: ''
      content: 'function appendInformationContent(caption: string, collapsed: boolean)'
      return:
        type:
          - >-
            @vss-web-extension-sdk.VSS.Controls.Notifications.InformationAreaControl
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.appendSectionSummary
    name: 'appendSectionSummary(content: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: content
          type:
            - string
          description: ''
      content: 'function appendSectionSummary(content: string)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.appendSectionTitle
    name: 'appendSectionTitle(content: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: content
          type:
            - string
          description: ''
      content: 'function appendSectionTitle(content: string)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getCurrentAction
    name: getCurrentAction()
    children: []
    langs:
      - typeScript
    summary: Get the action/tab id for the current state
    syntax:
      parameters: []
      content: function getCurrentAction()
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getEmptyState
    name: getEmptyState()
    children: []
    langs:
      - typeScript
    summary: >-
      Get a state hash with null entries for each hash key that exists in the
      current

      url hash. This state can be extended and passed to
      VSS.Host.history.addHistoryPoint

      so that existing hash parameters are NOT included in the new url.
    syntax:
      parameters: []
      content: function getEmptyState()
      return:
        type:
          - any
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getRawState
    name: getRawState()
    children: []
    langs:
      - typeScript
    summary: >-
      Get the raw (unparsed) state objects for the current navigation state
      (key/value pairs from the hash/url)
    syntax:
      parameters: []
      content: function getRawState()
      return:
        type:
          - any
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getState
    name: getState()
    children: []
    langs:
      - typeScript
    summary: Get the current (parsed) state objects for the current navigation state
    syntax:
      parameters: []
      content: function getState()
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTab
    name: 'getTab(tabId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: tabId
          type:
            - string
          description: ''
      content: 'function getTab(tabId: string)'
      return:
        type:
          - '@vss-web-extension-sdk.VSS.Controls.Navigation.NavigationViewTab'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTabLabel
    name: >-
      getTabLabel(tabId: any, currentTabId: string, rawState: any, parsedState:
      any)
    children: []
    langs:
      - typeScript
    summary: >-
      Get the updated tab label for the specified tab based on the current
      tab/navigation state. null/undefined to keep the existing label.
    syntax:
      parameters:
        - id: tabId
          type:
            - any
          description: The Id to get the tab label for
        - id: currentTabId
          type:
            - string
          description: Id of the currently selected tab
        - id: rawState
          type:
            - any
          description: >-
            The raw/unprocessed hash/url state parameters (string key/value
            pairs)
        - id: parsedState
          type:
            - any
          description: |
            Resolved state objects parsed by the view
      content: >-
        function getTabLabel(tabId: any, currentTabId: string, rawState: any,
        parsedState: any)
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTabVisibility
    name: >-
      getTabVisibility(tabId: any, currentTabId: string, rawState: any,
      parsedState: any)
    children: []
    langs:
      - typeScript
    summary: >-
      Get the visibility state of the specified tab based on the current
      tab/navigation state. True to show this tab. False to hide it.
    syntax:
      parameters:
        - id: tabId
          type:
            - any
          description: The Id to get the visiblility state for
        - id: currentTabId
          type:
            - string
          description: Id of the currently selected tab
        - id: rawState
          type:
            - any
          description: >-
            The raw/unprocessed hash/url state parameters (string key/value
            pairs)
        - id: parsedState
          type:
            - any
          description: Resolved state objects parsed by the view
      content: >-
        function getTabVisibility(tabId: any, currentTabId: string, rawState:
        any, parsedState: any)
      return:
        type:
          - boolean
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.initialize
    name: initialize()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function initialize()
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.initializeOptions
    name: 'initializeOptions(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: options
          type:
            - any
          description: |+

          optional: true
      content: 'function initializeOptions(options?: any)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.parseStateInfo
    name: 'parseStateInfo(action: string, rawState: any, callback: IResultCallback)'
    children: []
    langs:
      - typeScript
    summary: >-
      Parse the state info and fetch any artificacts necessary to render the
      tab/view. Invoke the 'callback'

      method with the new state info object when the state information has been
      successfully parsed.
    syntax:
      parameters:
        - id: action
          type:
            - string
          description: The action parameter (_a) in the url hash
        - id: rawState
          type:
            - any
          description: The raw state info from the hash url for the new navigation
        - id: callback
          type:
            - '@vss-web-extension-sdk.IResultCallback'
          description: |+

               Callback that should be called when the state was successfully parsed. The callback takes 2 parameters: the tab id (typically
               the action), and the parsed state info object.

               callback(tabId, parsedStateInfo);


      content: >-
        function parseStateInfo(action: string, rawState: any, callback:
        IResultCallback)
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.refreshCurrentTab
    name: refreshCurrentTab()
    children: []
    langs:
      - typeScript
    summary: >-
      Refresh the current tab (causes setState to be called on the currently
      visible tab)
    syntax:
      parameters: []
      content: function refreshCurrentTab()
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setHubPivotVisibility
    name: 'setHubPivotVisibility(visible: boolean)'
    children: []
    langs:
      - typeScript
    summary: Shows or hides the Hub pivot section (navigation tab strip + filters)
    syntax:
      parameters:
        - id: visible
          type:
            - boolean
          description: |
            If true, show the hub pivot (tabs/filters). If false, hide them
      content: 'function setHubPivotVisibility(visible: boolean)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setState
    name: 'setState(parsedState: any)'
    children: []
    langs:
      - typeScript
    summary: Set the current (parsed) state objects for the current navigation state
    syntax:
      parameters:
        - id: parsedState
          type:
            - any
          description: ''
      content: 'function setState(parsedState: any)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.showError
    name: 'showError(error: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: error
          type:
            - any
          description: ''
      content: 'function showError(error: any)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.showErrorContent
    name: >-
      showErrorContent(title: any, $contentHtml: any, messageType: any, expand:
      any)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: title
          type:
            - any
          description: ''
        - id: $contentHtml
          type:
            - any
          description: ''
        - id: messageType
          type:
            - any
          description: ''
        - id: expand
          type:
            - any
          description: ''
      content: >-
        function showErrorContent(title: any, $contentHtml: any, messageType:
        any, expand: any)
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.showInformationTab
    name: 'showInformationTab(title: string, description: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: title
          type:
            - string
          description: ''
        - id: description
          type:
            - string
          description: ''
      content: 'function showInformationTab(title: string, description: string)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.constructor
    name: 'TabbedNavigationView(options?: any)'
    children: []
    langs:
      - typeScript
    summary: >-
      Creates a high-level view object for a given page that has different tabs
      which are

      displayed based on the current hash/navigation.
    syntax:
      parameters:
        - id: options
          type:
            - any
          description: |+

                tabs: (Object) Mapping of action id to a NavigationViewTab containing the contents of the tab
                hubContentSelector: (String) jQuery selector for the hub content div
                pivotTabsSelector: (String) jQuery selector for the hub tabs div
                hubSplitterSelector: (String) jQuery selector for the hub splitter control

          optional: true
      content: 'new TabbedNavigationView(options?: any)'
    type: constructor
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.updateTabs
    name: 'updateTabs(tabs: [key: string]: NavigationViewTab)'
    children: []
    langs:
      - typeScript
    summary: Update the given tabs in the tabbed navigation view.
    syntax:
      parameters:
        - id: tabs
          type:
            - >-
              [key: string]:
              @vss-web-extension-sdk.VSS.Controls.Navigation.NavigationViewTab
          description: |
            Mapping of tabIds to tabControls
      content: 'function updateTabs(tabs: [key: string]: NavigationViewTab)'
    type: method
