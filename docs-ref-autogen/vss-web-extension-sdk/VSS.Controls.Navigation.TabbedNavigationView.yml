### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView
    name: TabbedNavigationView
    fullName: TabbedNavigationView
    children:
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.ACTION_CONTRIBUTION
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.cancelDelayedFunction
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.create
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.createIn
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.delayExecute
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.enhance
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.ENHANCEMENTS_DATA_KEY
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.ENHANCEMENT_OPTIONPREFIX_KEY
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.ENHANCEMENT_OPTIONS_KEY
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.ensureEnhancement
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.ensureEnhancements
      - vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.focus
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getCurrentAction
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getElement
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getEmptyState
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getEnhancementOptions
      - vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getId
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getInstance
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getOptionPrefix
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getRawState
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getState
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTabLabel
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTabVisibility
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTypeName
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTypeName
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.initializeOptions
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.isDisposed
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.onNavigate
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.optionsPrefix
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.parseStateInfo
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.refreshCurrentTab
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.registerEnhancement
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.registerJQueryWidget
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setAttribute
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setEnhancementOptions
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setFullScreenMode
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setHubPivotVisibility
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setLeftHubPaneVisibility
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setRole
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setState
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setViewTitle
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setViewTitleContent
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setWindowTitle
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.constructor
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.updateTabs
      - vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._bind
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._disposed
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._element
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._enhance
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._enhancementOptions
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._ensureInitialized
      - vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._fire
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._fireChange
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._getEventNameSpace
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._getInDomPromise
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._getPageTitleString
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._getUniqueId
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._getViewTitle
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._initialized
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._options
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._setElement
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._setId
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._setTitleMode
      - >-
        vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._unbind
    langs:
      - typeScript
    type: class
    summary: ''
    package: vss-web-extension-sdk
    module: VSS/Controls/Navigation
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.ACTION_CONTRIBUTION
    name: ACTION_CONTRIBUTION
    fullName: ACTION_CONTRIBUTION
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.cancelDelayedFunction
    name: 'cancelDelayedFunction(name: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Cancels any pending delayed functions (delayExecute calls) with the
      specified name
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: Name (supplied in the delayExecute call) of the operations to cancel
      content: 'function cancelDelayedFunction(name: string)'
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.create
    name: >-
      create(controlType: function, container: JQuery, controlOptions: TOptions,
      enhancementOptions?: EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: Creates a the control specified by TControl in the given container.
    syntax:
      parameters:
        - id: controlType
          type:
            - function
          description: ''
        - id: container
          type:
            - JQuery
          description: ''
        - id: controlOptions
          type:
            - TOptions
          description: ''
        - id: enhancementOptions
          type:
            - vss-web-extension-sdk.VSS.Controls.EnhancementOptions
          description: ''
          optional: true
      content: >-
        function create(controlType: function, container: JQuery,
        controlOptions: TOptions, enhancementOptions?: EnhancementOptions)
      return:
        type:
          - TControl
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.createIn
    name: >-
      createIn(type?: any, container?: any, options?: TOptions, koCompatable?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: container
          type:
            - any
          description: ''
          optional: true
        - id: options
          type:
            - TOptions
          description: ''
          optional: true
        - id: koCompatable
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function createIn(type?: any, container?: any, options?: TOptions,
        koCompatable?: boolean)
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Control
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.delayExecute
    name: >-
      delayExecute(name?: string, msDelay?: number, cancelPendingOps?: boolean,
      func?: Function)
    children: []
    langs:
      - typeScript
    summary: Executes the provided function after the specified amount of time
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: >-
            (Optional) Name for this operation. Allows subsequent calls to
            cancel this action.
          optional: true
        - id: msDelay
          type:
            - number
          description: Delay in milliseconds to wait before executing the Function
          optional: true
        - id: cancelPendingOps
          type:
            - boolean
          description: >-
            If true, cancel any pending requests with this name. If false, and
            there are outstanding requests with this name already in progress,
            then do nothing.
          optional: true
        - id: func
          type:
            - Function
          description: |
            Method to execute after the delay
          optional: true
      content: >-
        function delayExecute(name?: string, msDelay?: number,
        cancelPendingOps?: boolean, func?: Function)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.enhance
    name: >-
      enhance(type: function, element: function, options?: function,
      enhancementOptions?: EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - function
          description: ''
        - id: element
          type:
            - function
          description: ''
        - id: options
          type:
            - function
          description: ''
          optional: true
        - id: enhancementOptions
          type:
            - vss-web-extension-sdk.VSS.Controls.EnhancementOptions
          description: ''
          optional: true
      content: >-
        function enhance(type: function, element: function, options?: function,
        enhancementOptions?: EnhancementOptions)
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Enhancement
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.ENHANCEMENTS_DATA_KEY
    name: ENHANCEMENTS_DATA_KEY
    fullName: ENHANCEMENTS_DATA_KEY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.ENHANCEMENT_OPTIONPREFIX_KEY
    name: ENHANCEMENT_OPTIONPREFIX_KEY
    fullName: ENHANCEMENT_OPTIONPREFIX_KEY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.ENHANCEMENT_OPTIONS_KEY
    name: ENHANCEMENT_OPTIONS_KEY
    fullName: ENHANCEMENT_OPTIONS_KEY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.ensureEnhancement
    name: 'ensureEnhancement(type?: any, context?: any, errorCallback?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: context
          type:
            - any
          description: ''
          optional: true
        - id: errorCallback
          type:
            - any
          description: ''
          optional: true
      content: >-
        function ensureEnhancement(type?: any, context?: any, errorCallback?:
        any)
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Enhancement
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.ensureEnhancements
    name: 'ensureEnhancements(type?: any, context?: any, errorCallback?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: context
          type:
            - any
          description: ''
          optional: true
        - id: errorCallback
          type:
            - any
          description: ''
          optional: true
      content: >-
        function ensureEnhancements(type?: any, context?: any, errorCallback?:
        any)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.focus
    name: focus()
    children: []
    langs:
      - typeScript
    summary: Set Focus to the control
    syntax:
      parameters: []
      content: function focus()
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getCurrentAction
    name: getCurrentAction()
    children: []
    langs:
      - typeScript
    summary: Get the action/tab id for the current state
    syntax:
      parameters: []
      content: function getCurrentAction()
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getElement
    name: getElement()
    children: []
    langs:
      - typeScript
    summary: Gets the element associated with this control.
    syntax:
      parameters: []
      content: function getElement()
      return:
        type:
          - JQuery
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getEmptyState
    name: getEmptyState()
    children: []
    langs:
      - typeScript
    summary: >-
      Get a state hash with null entries for each hash key that exists in the
      current

      url hash. This state can be extended and passed to
      VSS.Host.history.addHistoryPoint

      so that existing hash parameters are NOT included in the new url.
    syntax:
      parameters: []
      content: function getEmptyState()
      return:
        type:
          - any
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getEnhancementOptions
    name: 'getEnhancementOptions(type: any, element: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
        - id: element
          type:
            - any
          description: |+

      content: 'function getEnhancementOptions(type: any, element: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getId
    name: getId()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getId()
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getInstance
    name: 'getInstance(type?: any, element?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: element
          type:
            - any
          description: ''
          optional: true
      content: 'function getInstance(type?: any, element?: any)'
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Enhancement
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getOptionPrefix
    name: 'getOptionPrefix(type: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
      content: 'function getOptionPrefix(type: any)'
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getRawState
    name: getRawState()
    children: []
    langs:
      - typeScript
    summary: >-
      Get the raw (unparsed) state objects for the current navigation state
      (key/value pairs from the hash/url)
    syntax:
      parameters: []
      content: function getRawState()
      return:
        type:
          - any
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getState
    name: getState()
    children: []
    langs:
      - typeScript
    summary: Get the current (parsed) state objects for the current navigation state
    syntax:
      parameters: []
      content: function getState()
      return:
        type:
          - any
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTabLabel
    name: >-
      getTabLabel(tabId: any, currentTabId: string, rawState: any, parsedState:
      any)
    children: []
    langs:
      - typeScript
    summary: >-
      Get the updated tab label for the specified tab based on the current
      tab/navigation state. null/undefined to keep the existing label.
    syntax:
      parameters:
        - id: tabId
          type:
            - any
          description: The Id to get the tab label for
        - id: currentTabId
          type:
            - string
          description: Id of the currently selected tab
        - id: rawState
          type:
            - any
          description: >-
            The raw/unprocessed hash/url state parameters (string key/value
            pairs)
        - id: parsedState
          type:
            - any
          description: |
            Resolved state objects parsed by the view
      content: >-
        function getTabLabel(tabId: any, currentTabId: string, rawState: any,
        parsedState: any)
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTabVisibility
    name: >-
      getTabVisibility(tabId: any, currentTabId: string, rawState: any,
      parsedState: any)
    children: []
    langs:
      - typeScript
    summary: >-
      Get the visibility state of the specified tab based on the current
      tab/navigation state. True to show this tab. False to hide it.
    syntax:
      parameters:
        - id: tabId
          type:
            - any
          description: The Id to get the visiblility state for
        - id: currentTabId
          type:
            - string
          description: Id of the currently selected tab
        - id: rawState
          type:
            - any
          description: >-
            The raw/unprocessed hash/url state parameters (string key/value
            pairs)
        - id: parsedState
          type:
            - any
          description: Resolved state objects parsed by the view
      content: >-
        function getTabVisibility(tabId: any, currentTabId: string, rawState:
        any, parsedState: any)
      return:
        type:
          - boolean
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTypeName
    name: getTypeName()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getTypeName()
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.getTypeName
    name: 'getTypeName(type?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
      content: 'function getTypeName(type?: any)'
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.initializeOptions
    name: 'initializeOptions(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: options
          type:
            - any
          description: |+

          optional: true
      content: 'function initializeOptions(options?: any)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.isDisposed
    name: isDisposed()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function isDisposed()
      return:
        type:
          - boolean
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.onNavigate
    name: 'onNavigate(state: any)'
    children: []
    langs:
      - typeScript
    summary: Function invoked when a page/hash navigation has occurred
    syntax:
      parameters:
        - id: state
          type:
            - any
          description: |
            Hash object containing the hash-url parameters
      content: 'function onNavigate(state: any)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.optionsPrefix
    name: optionsPrefix
    fullName: optionsPrefix
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.parseStateInfo
    name: 'parseStateInfo(action: string, rawState: any, callback: IResultCallback)'
    children: []
    langs:
      - typeScript
    summary: >-
      Parse the state info and fetch any artificacts necessary to render the
      tab/view. Invoke the 'callback'

      method with the new state info object when the state information has been
      successfully parsed.
    syntax:
      parameters:
        - id: action
          type:
            - string
          description: The action parameter (_a) in the url hash
        - id: rawState
          type:
            - any
          description: The raw state info from the hash url for the new navigation
        - id: callback
          type:
            - vss-web-extension-sdk.IResultCallback
          description: |+

               Callback that should be called when the state was successfully parsed. The callback takes 2 parameters: the tab id (typically
               the action), and the parsed state info object.

               callback(tabId, parsedStateInfo);


      content: >-
        function parseStateInfo(action: string, rawState: any, callback:
        IResultCallback)
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.refreshCurrentTab
    name: refreshCurrentTab()
    children: []
    langs:
      - typeScript
    summary: >-
      Refresh the current tab (causes setState to be called on the currently
      visible tab)
    syntax:
      parameters: []
      content: function refreshCurrentTab()
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.registerEnhancement
    name: >-
      registerEnhancement(type?: function, selector?: string, options?:
      TOptions, errorCallback?: IErrorCallback, enhancementOptions?:
      EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - function
          description: ''
          optional: true
        - id: selector
          type:
            - string
          description: ''
          optional: true
        - id: options
          type:
            - TOptions
          description: ''
          optional: true
        - id: errorCallback
          type:
            - vss-web-extension-sdk.IErrorCallback
          description: |+

          optional: true
        - id: enhancementOptions
          type:
            - vss-web-extension-sdk.VSS.Controls.EnhancementOptions
          description: ''
          optional: true
      content: >-
        function registerEnhancement(type?: function, selector?: string,
        options?: TOptions, errorCallback?: IErrorCallback, enhancementOptions?:
        EnhancementOptions)
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.registerJQueryWidget
    name: >-
      registerJQueryWidget(type?: any, widgetName?: any, widgetOptions?:
      TOptions, enhancementOptions?: EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: widgetName
          type:
            - any
          description: ''
          optional: true
        - id: widgetOptions
          type:
            - TOptions
          description: |+

          optional: true
        - id: enhancementOptions
          type:
            - vss-web-extension-sdk.VSS.Controls.EnhancementOptions
          description: ''
          optional: true
      content: >-
        function registerJQueryWidget(type?: any, widgetName?: any,
        widgetOptions?: TOptions, enhancementOptions?: EnhancementOptions)
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setAttribute
    name: 'setAttribute(attribute: string, value: function, element?: JQuery)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets the attribute for the current control using the specified attribute
      name, value on the specified element.

      If no element specified, default element is used.
    syntax:
      parameters:
        - id: attribute
          type:
            - string
          description: Attribute name to set value.
        - id: value
          type:
            - function
          description: Attribute value to set.
        - id: element
          type:
            - JQuery
          description: |
            Element to apply the attribute (default is root element).
          optional: true
      content: >-
        function setAttribute(attribute: string, value: function, element?:
        JQuery)
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setEnhancementOptions
    name: 'setEnhancementOptions(enhancementOptions: EnhancementOptions)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets options related to the creation of this control or enhancement of an
      element as this control.

      Note: Options are merged.
    syntax:
      parameters:
        - id: enhancementOptions
          type:
            - vss-web-extension-sdk.VSS.Controls.EnhancementOptions
          description: ''
      content: 'function setEnhancementOptions(enhancementOptions: EnhancementOptions)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setFullScreenMode
    name: >-
      setFullScreenMode(fullScreenMode: boolean, showLeftPaneInFullScreenMode?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: >-
      Set full-screen mode. If true, hide the chrome (hubs, etc.) around the
      main hub content, hide the splitter, etc.
    syntax:
      parameters:
        - id: fullScreenMode
          type:
            - boolean
          description: |
            True to enter full screen mode. False to exit full screen mode.
        - id: showLeftPaneInFullScreenMode
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function setFullScreenMode(fullScreenMode: boolean,
        showLeftPaneInFullScreenMode?: boolean)
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setHubPivotVisibility
    name: 'setHubPivotVisibility(visible: boolean)'
    children: []
    langs:
      - typeScript
    summary: Shows or hides the Hub pivot section (navigation tab strip + filters)
    syntax:
      parameters:
        - id: visible
          type:
            - boolean
          description: |
            If true, show the hub pivot (tabs/filters). If false, hide them
      content: 'function setHubPivotVisibility(visible: boolean)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setLeftHubPaneVisibility
    name: 'setLeftHubPaneVisibility(visible: boolean)'
    children: []
    langs:
      - typeScript
    summary: Shows or hides the Left (tree) section of the explorer page
    syntax:
      parameters:
        - id: visible
          type:
            - boolean
          description: |
            If true, show the left side of the explorer page. False to hide it.
      content: 'function setLeftHubPaneVisibility(visible: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setRole
    name: 'setRole(role: string, element?: JQuery)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets the role for the current control using the specified role value on
      the specified element.

      If no element specified, default element is used.
    syntax:
      parameters:
        - id: role
          type:
            - string
          description: Role to assign.
        - id: element
          type:
            - JQuery
          description: |
            Element to apply the role (default is root element).
          optional: true
      content: 'function setRole(role: string, element?: JQuery)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setState
    name: 'setState(parsedState: any)'
    children: []
    langs:
      - typeScript
    summary: Set the current (parsed) state objects for the current navigation state
    syntax:
      parameters:
        - id: parsedState
          type:
            - any
          description: ''
      content: 'function setState(parsedState: any)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setViewTitle
    name: 'setViewTitle(title?: string, tooltip?: string)'
    children: []
    langs:
      - typeScript
    summary: Sets the (text) title of the page
    syntax:
      parameters:
        - id: title
          type:
            - string
          description: |

                Title of the page
          optional: true
        - id: tooltip
          type:
            - string
          description: |+

                Optional tooltip for the page's title element

          optional: true
      content: 'function setViewTitle(title?: string, tooltip?: string)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setViewTitleContent
    name: 'setViewTitleContent(title: string, titleContent: string)'
    children: []
    langs:
      - typeScript
    summary: Sets the raw-html title element for the page
    syntax:
      parameters:
        - id: title
          type:
            - string
          description: |

                Text title of the page to be used as the document title
        - id: titleContent
          type:
            - string
          description: |+

                Raw HTML to inject into the title element (will not be escaped)

      content: 'function setViewTitleContent(title: string, titleContent: string)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.setWindowTitle
    name: 'setWindowTitle(title: string)'
    children: []
    langs:
      - typeScript
    summary: Sets the document's title
    syntax:
      parameters:
        - id: title
          type:
            - string
          description: |+

                Title of the page (text)

      content: 'function setWindowTitle(title: string)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.constructor
    name: 'TabbedNavigationView(options?: any)'
    children: []
    langs:
      - typeScript
    summary: >-
      Creates a high-level view object for a given page that has different tabs
      which are

      displayed based on the current hash/navigation.
    syntax:
      parameters:
        - id: options
          type:
            - any
          description: |+

                tabs: (Object) Mapping of action id to a NavigationViewTab containing the contents of the tab
                hubContentSelector: (String) jQuery selector for the hub content div
                pivotTabsSelector: (String) jQuery selector for the hub tabs div
                hubSplitterSelector: (String) jQuery selector for the hub splitter control

          optional: true
      content: 'new TabbedNavigationView(options?: any)'
    type: constructor
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView.updateTabs
    name: 'updateTabs(tabs: function)'
    children: []
    langs:
      - typeScript
    summary: Update the given tabs in the tabbed navigation view.
    syntax:
      parameters:
        - id: tabs
          type:
            - function
          description: |
            Mapping of tabIds to tabControls
      content: 'function updateTabs(tabs: function)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._bind
    name: '_bind(element?: any, eventType?: any, handler?: any, track?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - any
          description: ''
          optional: true
        - id: eventType
          type:
            - any
          description: ''
          optional: true
        - id: handler
          type:
            - any
          description: ''
          optional: true
        - id: track
          type:
            - any
          description: |+

          optional: true
      content: >-
        function _bind(element?: any, eventType?: any, handler?: any, track?:
        any)
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Enhancement
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._disposed
    name: _disposed
    fullName: _disposed
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - boolean
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._element
    name: _element
    fullName: _element
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - JQuery
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._enhance
    name: '_enhance(element: JQuery)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - JQuery
          description: |+

      content: 'function _enhance(element: JQuery)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._enhancementOptions
    name: _enhancementOptions
    fullName: _enhancementOptions
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.EnhancementOptions
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._ensureInitialized
    name: _ensureInitialized()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function _ensureInitialized()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._fire
    name: '_fire(element?: any, eventType?: any, args?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - any
          description: ''
          optional: true
        - id: eventType
          type:
            - any
          description: ''
          optional: true
        - id: args
          type:
            - any
          description: |+

          optional: true
      content: 'function _fire(element?: any, eventType?: any, args?: any)'
      return:
        type:
          - any
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._fireChange
    name: '_fireChange(sender?: any)'
    children: []
    langs:
      - typeScript
    summary: Fires the change event for the control immediately
    syntax:
      parameters:
        - id: sender
          type:
            - any
          description: |
            Source element of the event
          optional: true
      content: 'function _fireChange(sender?: any)'
      return:
        type:
          - any
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._getEventNameSpace
    name: _getEventNameSpace()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function _getEventNameSpace()
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._getInDomPromise
    name: _getInDomPromise()
    children: []
    langs:
      - typeScript
    summary: |-
      Get a promise that is resolved once the containing element for this
      control has been added to the DOM hierarchy.
    syntax:
      parameters: []
      content: function _getInDomPromise()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._getPageTitleString
    name: _getPageTitleString()
    children: []
    langs:
      - typeScript
    summary: >-
      Protected API: returns the desired title format string for use by
      SetWindowTitle()
    syntax:
      parameters: []
      content: function _getPageTitleString()
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._getUniqueId
    name: _getUniqueId()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function _getUniqueId()
      return:
        type:
          - string
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._getViewTitle
    name: _getViewTitle()
    children: []
    langs:
      - typeScript
    summary: Get the element that holds the title
    syntax:
      parameters: []
      content: function _getViewTitle()
      return:
        type:
          - JQuery
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._initialized
    name: _initialized
    fullName: _initialized
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - boolean
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._options
    name: _options
    fullName: _options
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - any
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._setElement
    name: '_setElement(element: JQuery)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - JQuery
          description: |+

      content: 'function _setElement(element: JQuery)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._setId
    name: '_setId(id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: id
          type:
            - string
          description: |+

      content: 'function _setId(id: string)'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._setTitleMode
    name: '_setTitleMode(isHosted: boolean)'
    children: []
    langs:
      - typeScript
    summary: Obsolete. This no-ops.
    syntax:
      parameters:
        - id: isHosted
          type:
            - boolean
          description: ''
      content: 'function _setTitleMode(isHosted: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Navigation.TabbedNavigationView._unbind
    name: '_unbind(element?: any, eventType?: any, handler?: any, track?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - any
          description: ''
          optional: true
        - id: eventType
          type:
            - any
          description: ''
          optional: true
        - id: handler
          type:
            - any
          description: ''
          optional: true
        - id: track
          type:
            - any
          description: |+

          optional: true
      content: >-
        function _unbind(element?: any, eventType?: any, handler?: any, track?:
        any)
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Enhancement
    type: method
