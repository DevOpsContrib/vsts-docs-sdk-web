### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.CommonMethods3To4
    name: CommonMethods3To4
    fullName: CommonMethods3To4
    children:
      - vss-web-extension-sdk.CommonMethods3To4.authTokenManager
      - vss-web-extension-sdk.CommonMethods3To4.constructor
      - vss-web-extension-sdk.CommonMethods3To4.entriesApiVersion
      - vss-web-extension-sdk.CommonMethods3To4.entriesApiVersion_cd006711
      - vss-web-extension-sdk.CommonMethods3To4.forceOptionsCallForAutoNegotiate
      - vss-web-extension-sdk.CommonMethods3To4.getEntries
      - vss-web-extension-sdk.CommonMethods3To4.getEntriesForScope
      - vss-web-extension-sdk.CommonMethods3To4.removeEntries
      - vss-web-extension-sdk.CommonMethods3To4.removeEntriesForScope
      - vss-web-extension-sdk.CommonMethods3To4.setEntries
      - vss-web-extension-sdk.CommonMethods3To4.setEntriesForScope
      - vss-web-extension-sdk.CommonMethods3To4._beginGetLocation
      - vss-web-extension-sdk.CommonMethods3To4._beginRequest
      - vss-web-extension-sdk.CommonMethods3To4._beginRequestWithAjaxResult
      - vss-web-extension-sdk.CommonMethods3To4._issueAjaxRequest
      - vss-web-extension-sdk.CommonMethods3To4._rootRequestPath
      - vss-web-extension-sdk.CommonMethods3To4._setInitializationPromise
    langs:
      - typeScript
    type: class
    summary: ''
  - uid: vss-web-extension-sdk.CommonMethods3To4.authTokenManager
    name: authTokenManager
    fullName: authTokenManager
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - vss-web-extension-sdk.IAuthTokenManager
  - uid: vss-web-extension-sdk.CommonMethods3To4.constructor
    name: >-
      CommonMethods3To4(rootRequestPath: string, options?:
      IVssHttpClientOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rootRequestPath
          type:
            - string
          description: ''
        - id: vss-web-extension-sdk.IVssHttpClientOptions
          type:
            - IVssHttpClientOptions
          description: ''
          optional: true
      content: >-
        new CommonMethods3To4(rootRequestPath: string, options?:
        IVssHttpClientOptions)
      return:
        type:
          - vss-web-extension-sdk.CommonMethods3To4
    type: constructor
  - uid: vss-web-extension-sdk.CommonMethods3To4.entriesApiVersion
    name: entriesApiVersion
    fullName: entriesApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CommonMethods3To4.entriesApiVersion_cd006711
    name: entriesApiVersion_cd006711
    fullName: entriesApiVersion_cd006711
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CommonMethods3To4.forceOptionsCallForAutoNegotiate
    name: forceOptionsCallForAutoNegotiate
    fullName: forceOptionsCallForAutoNegotiate
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - boolean
  - uid: vss-web-extension-sdk.CommonMethods3To4.getEntries
    name: 'getEntries(userScope: string, key?: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get all setting entries for the given user/all-users scope'
    syntax:
      parameters:
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to get the value. Should be "me" for the current
            user or "host" for all users.
        - id: key
          type:
            - string
          description: Optional key under which to filter all the entries
          optional: true
      content: 'function getEntries(userScope: string, key?: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CommonMethods3To4.getEntriesForScope
    name: >-
      getEntriesForScope(userScope: string, scopeName: string, scopeValue:
      string, key?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get all setting entries for the given named scope'
    syntax:
      parameters:
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to get the value. Should be "me" for the current
            user or "host" for all users.
        - id: scopeName
          type:
            - string
          description: Scope at which to get the setting for (e.g. "project" or "team")
        - id: scopeValue
          type:
            - string
          description: Value of the scope (e.g. the project or team id)
        - id: key
          type:
            - string
          description: Optional key under which to filter all the entries
          optional: true
      content: >-
        function getEntriesForScope(userScope: string, scopeName: string,
        scopeValue: string, key?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CommonMethods3To4.removeEntries
    name: 'removeEntries(userScope: string, key: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Remove the entry or entries under the specified path'
    syntax:
      parameters:
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to remove the value. Should be "me" for the
            current user or "host" for all users.
        - id: key
          type:
            - string
          description: Root key of the entry or entries to remove
      content: 'function removeEntries(userScope: string, key: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CommonMethods3To4.removeEntriesForScope
    name: >-
      removeEntriesForScope(userScope: string, scopeName: string, scopeValue:
      string, key: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Remove the entry or entries under the specified path'
    syntax:
      parameters:
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to remove the value. Should be "me" for the
            current user or "host" for all users.
        - id: scopeName
          type:
            - string
          description: Scope at which to get the setting for (e.g. "project" or "team")
        - id: scopeValue
          type:
            - string
          description: Value of the scope (e.g. the project or team id)
        - id: key
          type:
            - string
          description: Root key of the entry or entries to remove
      content: >-
        function removeEntriesForScope(userScope: string, scopeName: string,
        scopeValue: string, key: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CommonMethods3To4.setEntries
    name: 'setEntries(entries: function, userScope: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Set the specified setting entry values for the given
      user/all-users scope
    syntax:
      parameters:
        - id: entries
          type:
            - function
          description: The entries to set
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to set the values. Should be "me" for the
            current user or "host" for all users.
      content: 'function setEntries(entries: function, userScope: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CommonMethods3To4.setEntriesForScope
    name: >-
      setEntriesForScope(entries: function, userScope: string, scopeName:
      string, scopeValue: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Set the specified entries for the given named scope'
    syntax:
      parameters:
        - id: entries
          type:
            - function
          description: The entries to set
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to set the values. Should be "me" for the
            current user or "host" for all users.
        - id: scopeName
          type:
            - string
          description: Scope at which to set the settings on (e.g. "project" or "team")
        - id: scopeValue
          type:
            - string
          description: Value of the scope (e.g. the project or team id)
      content: >-
        function setEntriesForScope(entries: function, userScope: string,
        scopeName: string, scopeValue: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CommonMethods3To4._beginGetLocation
    name: '_beginGetLocation(area: string, locationId: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Gets information about an API resource location (route template, supported
      versions, etc.)
    syntax:
      parameters:
        - id: area
          type:
            - string
          description: resource area name
        - id: locationId
          type:
            - string
          description: |
            Guid of the location to get
      content: 'function _beginGetLocation(area: string, locationId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CommonMethods3To4._beginRequest
    name: >-
      _beginRequest(requestParams: VssApiResourceRequestParams, useAjaxResult?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: Issue a request to a VSS REST endpoint.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.VssApiResourceRequestParams
          type:
            - VssApiResourceRequestParams
          description: request options
        - id: useAjaxResult
          type:
            - boolean
          description: >-
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used
          optional: true
      content: >-
        function _beginRequest(requestParams: VssApiResourceRequestParams,
        useAjaxResult?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CommonMethods3To4._beginRequestWithAjaxResult
    name: '_beginRequestWithAjaxResult(requestParams: VssApiResourceRequestParams)'
    children: []
    langs:
      - typeScript
    summary: >-
      Issue a request to a VSS REST endpoint and makes sure the result contains
      jqXHR. Use spread to access jqXHR.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.VssApiResourceRequestParams
          type:
            - VssApiResourceRequestParams
          description: request options
      content: >-
        function _beginRequestWithAjaxResult(requestParams:
        VssApiResourceRequestParams)
      return:
        type:
          - Q.Promise
    type: method
  - uid: vss-web-extension-sdk.CommonMethods3To4._issueAjaxRequest
    name: >-
      _issueAjaxRequest(requestUrl: string, ajaxOptions: JQueryAjaxSettings,
      useAjaxResult?: boolean, vssRequestOptions?: IVssAjaxOptions)
    children: []
    langs:
      - typeScript
    summary: >-
      Issue an AJAX request. This is a wrapper around jquery's ajax method that
      handles VSS authentication

      and triggers events that can be listened to by other modules.
    syntax:
      parameters:
        - id: requestUrl
          type:
            - string
          description: Url to send the request to
        - id: ajaxOptions
          type:
            - JQueryAjaxSettings
          description: jQuery.ajax options
        - id: useAjaxResult
          type:
            - boolean
          description: >
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used.
          optional: true
        - id: vss-web-extension-sdk.IVssAjaxOptions
          type:
            - IVssAjaxOptions
          description: ''
          optional: true
      content: >-
        function _issueAjaxRequest(requestUrl: string, ajaxOptions:
        JQueryAjaxSettings, useAjaxResult?: boolean, vssRequestOptions?:
        IVssAjaxOptions)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.CommonMethods3To4._rootRequestPath
    name: _rootRequestPath
    fullName: _rootRequestPath
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.CommonMethods3To4._setInitializationPromise
    name: '_setInitializationPromise(promise: IPromise)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets a promise that is waited on before any requests are issued. Can be
      used to asynchronously

      set the request url and auth token manager.
    syntax:
      parameters:
        - id: vss-web-extension-sdk.IPromise
          type:
            - IPromise
          description: ''
      content: 'function _setInitializationPromise(promise: IPromise)'
    type: method
