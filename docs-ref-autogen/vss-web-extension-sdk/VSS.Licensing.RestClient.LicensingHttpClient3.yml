### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3
    name: LicensingHttpClient3
    fullName: LicensingHttpClient3
    children:
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.assignAccountEntitlementForUser
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.assignAvailableAccountEntitlement
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.assignExtensionToAllEligibleUsers
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.assignExtensionToUsers
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.authTokenManager
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.bulkGetExtensionsAssignedToUsers
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.certificateApiVersion
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.clientRightsApiVersion
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.computeExtensionRights
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.deleteUserEntitlements
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.entitlementsApiVersion
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.entitlementsApiVersion_c01e9fd5
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.entitlementsBatchApiVersion
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.extensionEntitlementsApiVersion
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.extensionEntitlementsApiVersion_5434f182
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.extensionEntitlementsBatchApiVersion
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.extensionRegistrationApiVersion
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.extensionRightsApiVersion
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.forceOptionsCallForAutoNegotiate
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getAccountEntitlement
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getAccountEntitlementForUser
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getAccountLicensesUsage
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getCertificate
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getClientRights
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getEligibleUsersForExtension
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getEntitlements
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getExtensionLicenseData
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getExtensionRights
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getExtensionsAssignedToUser
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getExtensionStatusForUsers
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getMsdnPresence
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getUsageRights
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.constructor
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.msdnApiVersion
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.msdnApiVersion_69522c3f
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.obtainAvailableAccountEntitlements
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.registerExtensionLicense
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.usageApiVersion
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.usageRightsApiVersion
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3._beginGetLocation
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3._beginRequest
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3._beginRequestWithAjaxResult
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3._issueAjaxRequest
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3._rootRequestPath
      - >-
        vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3._setInitializationPromise
    langs:
      - typeScript
    type: class
    summary: ''
    package: vss-web-extension-sdk
    module: VSS/Licensing/RestClient
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.assignAccountEntitlementForUser
    name: >-
      assignAccountEntitlementForUser(body: AccountEntitlementUpdateModel,
      userId: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Assign an explicit account entitlement'
    syntax:
      parameters:
        - id: body
          type:
            - >-
              vss-web-extension-sdk.VSS.Licensing.Contracts.AccountEntitlementUpdateModel
          description: The update model for the entitlement
        - id: userId
          type:
            - string
          description: The id of the user
      content: >-
        function assignAccountEntitlementForUser(body:
        AccountEntitlementUpdateModel, userId: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.assignAvailableAccountEntitlement
    name: 'assignAvailableAccountEntitlement(userId: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Assign an available entitilement to a user'
    syntax:
      parameters:
        - id: userId
          type:
            - string
          description: The user to which to assign the entitilement
      content: 'function assignAvailableAccountEntitlement(userId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.assignExtensionToAllEligibleUsers
    name: 'assignExtensionToAllEligibleUsers(extensionId: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Assigns the access to the given extension for all eligible
      users in the account that do not already have access to the extension
      though bundle or account assignment
    syntax:
      parameters:
        - id: extensionId
          type:
            - string
          description: The extension id to assign the access to.
      content: 'function assignExtensionToAllEligibleUsers(extensionId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.assignExtensionToUsers
    name: 'assignExtensionToUsers(body: ExtensionAssignment)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Assigns the access to the given extension for a given list
      of users
    syntax:
      parameters:
        - id: body
          type:
            - vss-web-extension-sdk.VSS.Licensing.Contracts.ExtensionAssignment
          description: The extension assignment details.
      content: 'function assignExtensionToUsers(body: ExtensionAssignment)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.authTokenManager
    name: authTokenManager
    fullName: authTokenManager
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - vss-web-extension-sdk.IAuthTokenManager
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.bulkGetExtensionsAssignedToUsers
    name: 'bulkGetExtensionsAssignedToUsers(userIds: function)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Returns extensions that are currrently assigned to the users
      that are in the account
    syntax:
      parameters:
        - id: userIds
          type:
            - function
          description: ''
      content: 'function bulkGetExtensionsAssignedToUsers(userIds: function)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.certificateApiVersion
    name: certificateApiVersion
    fullName: certificateApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.clientRightsApiVersion
    name: clientRightsApiVersion
    fullName: clientRightsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.computeExtensionRights
    name: 'computeExtensionRights(ids: function)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: ids
          type:
            - function
          description: ''
      content: 'function computeExtensionRights(ids: function)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.deleteUserEntitlements
    name: 'deleteUserEntitlements(userId: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: userId
          type:
            - string
          description: ''
      content: 'function deleteUserEntitlements(userId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.entitlementsApiVersion
    name: entitlementsApiVersion
    fullName: entitlementsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.entitlementsApiVersion_c01e9fd5
    name: entitlementsApiVersion_c01e9fd5
    fullName: entitlementsApiVersion_c01e9fd5
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.entitlementsBatchApiVersion
    name: entitlementsBatchApiVersion
    fullName: entitlementsBatchApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.extensionEntitlementsApiVersion
    name: extensionEntitlementsApiVersion
    fullName: extensionEntitlementsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.extensionEntitlementsApiVersion_5434f182
    name: extensionEntitlementsApiVersion_5434f182
    fullName: extensionEntitlementsApiVersion_5434f182
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.extensionEntitlementsBatchApiVersion
    name: extensionEntitlementsBatchApiVersion
    fullName: extensionEntitlementsBatchApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.extensionRegistrationApiVersion
    name: extensionRegistrationApiVersion
    fullName: extensionRegistrationApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.extensionRightsApiVersion
    name: extensionRightsApiVersion
    fullName: extensionRightsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.forceOptionsCallForAutoNegotiate
    name: forceOptionsCallForAutoNegotiate
    fullName: forceOptionsCallForAutoNegotiate
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - boolean
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getAccountEntitlement
    name: getAccountEntitlement()
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Gets the account entitlement of the current user it is
      mapped to _apis/licensing/entitlements/me so specifically is looking for
      the user of the request
    syntax:
      parameters: []
      content: function getAccountEntitlement()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getAccountEntitlementForUser
    name: 'getAccountEntitlementForUser(userId: string, determineRights?: boolean)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API] Get the entitlements for a user'
    syntax:
      parameters:
        - id: userId
          type:
            - string
          description: The id of the user
        - id: determineRights
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function getAccountEntitlementForUser(userId: string, determineRights?:
        boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getAccountLicensesUsage
    name: getAccountLicensesUsage()
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters: []
      content: function getAccountLicensesUsage()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getCertificate
    name: getCertificate()
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters: []
      content: function getCertificate()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getClientRights
    name: >-
      getClientRights(rightName?: string, productVersion?: string, edition?:
      string, relType?: string, includeCertificate?: boolean, canary?: string,
      machineId?: string)
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: rightName
          type:
            - string
          description: ''
          optional: true
        - id: productVersion
          type:
            - string
          description: ''
          optional: true
        - id: edition
          type:
            - string
          description: ''
          optional: true
        - id: relType
          type:
            - string
          description: ''
          optional: true
        - id: includeCertificate
          type:
            - boolean
          description: ''
          optional: true
        - id: canary
          type:
            - string
          description: ''
          optional: true
        - id: machineId
          type:
            - string
          description: ''
          optional: true
      content: >-
        function getClientRights(rightName?: string, productVersion?: string,
        edition?: string, relType?: string, includeCertificate?: boolean,
        canary?: string, machineId?: string)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getEligibleUsersForExtension
    name: >-
      getEligibleUsersForExtension(extensionId: string, options:
      ExtensionFilterOptions)
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Returns users that are currently eligible to assign the
      extension to. the list is filtered based on the value of
      ExtensionFilterOptions
    syntax:
      parameters:
        - id: extensionId
          type:
            - string
          description: The extension to check the eligibility of the users for.
        - id: options
          type:
            - ExtensionFilterOptions
          description: The options to filter the list.
      content: >-
        function getEligibleUsersForExtension(extensionId: string, options:
        ExtensionFilterOptions)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getEntitlements
    name: getEntitlements()
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters: []
      content: function getEntitlements()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getExtensionLicenseData
    name: 'getExtensionLicenseData(extensionId: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: extensionId
          type:
            - string
          description: ''
      content: 'function getExtensionLicenseData(extensionId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getExtensionRights
    name: getExtensionRights()
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters: []
      content: function getExtensionRights()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getExtensionsAssignedToUser
    name: 'getExtensionsAssignedToUser(userId: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Returns extensions that are currently assigned to the user
      in the account
    syntax:
      parameters:
        - id: userId
          type:
            - string
          description: The user's identity id.
      content: 'function getExtensionsAssignedToUser(userId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getExtensionStatusForUsers
    name: 'getExtensionStatusForUsers(extensionId: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Returns extension assignment status of all account users for
      the given extension
    syntax:
      parameters:
        - id: extensionId
          type:
            - string
          description: The extension to check the status of the users for.
      content: 'function getExtensionStatusForUsers(extensionId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getMsdnPresence
    name: getMsdnPresence()
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters: []
      content: function getMsdnPresence()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.getUsageRights
    name: 'getUsageRights(rightName?: string)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: rightName
          type:
            - string
          description: ''
          optional: true
      content: 'function getUsageRights(rightName?: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.constructor
    name: >-
      LicensingHttpClient3(rootRequestPath: string, options?:
      IVssHttpClientOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rootRequestPath
          type:
            - string
          description: ''
        - id: options
          type:
            - vss-web-extension-sdk.VSS.WebApi.RestClient.IVssHttpClientOptions
          description: ''
          optional: true
      content: >-
        new LicensingHttpClient3(rootRequestPath: string, options?:
        IVssHttpClientOptions)
    type: constructor
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.msdnApiVersion
    name: msdnApiVersion
    fullName: msdnApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.msdnApiVersion_69522c3f
    name: msdnApiVersion_69522c3f
    fullName: msdnApiVersion_69522c3f
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.obtainAvailableAccountEntitlements
    name: 'obtainAvailableAccountEntitlements(userIds: function)'
    children: []
    langs:
      - typeScript
    summary: >-
      [Preview API] Returns AccountEntitlements that are currently assigned to
      the given list of users in the account
    syntax:
      parameters:
        - id: userIds
          type:
            - function
          description: List of user Ids.
      content: 'function obtainAvailableAccountEntitlements(userIds: function)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.registerExtensionLicense
    name: 'registerExtensionLicense(extensionLicenseData: ExtensionLicenseData)'
    children: []
    langs:
      - typeScript
    summary: '[Preview API]'
    syntax:
      parameters:
        - id: extensionLicenseData
          type:
            - vss-web-extension-sdk.VSS.Licensing.Contracts.ExtensionLicenseData
          description: ''
      content: >-
        function registerExtensionLicense(extensionLicenseData:
        ExtensionLicenseData)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.usageApiVersion
    name: usageApiVersion
    fullName: usageApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3.usageRightsApiVersion
    name: usageRightsApiVersion
    fullName: usageRightsApiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3._beginGetLocation
    name: '_beginGetLocation(area: string, locationId: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Gets information about an API resource location (route template, supported
      versions, etc.)
    syntax:
      parameters:
        - id: area
          type:
            - string
          description: resource area name
        - id: locationId
          type:
            - string
          description: |
            Guid of the location to get
      content: 'function _beginGetLocation(area: string, locationId: string)'
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3._beginRequest
    name: >-
      _beginRequest(requestParams: VssApiResourceRequestParams, useAjaxResult?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: Issue a request to a VSS REST endpoint.
    syntax:
      parameters:
        - id: requestParams
          type:
            - >-
              vss-web-extension-sdk.VSS.WebApi.RestClient.VssApiResourceRequestParams
          description: request options
        - id: useAjaxResult
          type:
            - boolean
          description: >-
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used
          optional: true
      content: >-
        function _beginRequest(requestParams: VssApiResourceRequestParams,
        useAjaxResult?: boolean)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3._beginRequestWithAjaxResult
    name: '_beginRequestWithAjaxResult(requestParams: VssApiResourceRequestParams)'
    children: []
    langs:
      - typeScript
    summary: >-
      Issue a request to a VSS REST endpoint and makes sure the result contains
      jqXHR. Use spread to access jqXHR.
    syntax:
      parameters:
        - id: requestParams
          type:
            - >-
              vss-web-extension-sdk.VSS.WebApi.RestClient.VssApiResourceRequestParams
          description: request options
      content: >-
        function _beginRequestWithAjaxResult(requestParams:
        VssApiResourceRequestParams)
      return:
        type:
          - Q.Promise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3._issueAjaxRequest
    name: >-
      _issueAjaxRequest(requestUrl: string, ajaxOptions: JQueryAjaxSettings,
      useAjaxResult?: boolean, vssRequestOptions?: IVssAjaxOptions)
    children: []
    langs:
      - typeScript
    summary: >-
      Issue an AJAX request. This is a wrapper around jquery's ajax method that
      handles VSS authentication

      and triggers events that can be listened to by other modules.
    syntax:
      parameters:
        - id: requestUrl
          type:
            - string
          description: Url to send the request to
        - id: ajaxOptions
          type:
            - JQueryAjaxSettings
          description: jQuery.ajax options
        - id: useAjaxResult
          type:
            - boolean
          description: >
            If true, textStatus and jqXHR are added to the success callback. In
            this case, spread (instead of then) needs to be used.
          optional: true
        - id: vssRequestOptions
          type:
            - vss-web-extension-sdk.IVssAjaxOptions
          description: ''
          optional: true
      content: >-
        function _issueAjaxRequest(requestUrl: string, ajaxOptions:
        JQueryAjaxSettings, useAjaxResult?: boolean, vssRequestOptions?:
        IVssAjaxOptions)
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3._rootRequestPath
    name: _rootRequestPath
    fullName: _rootRequestPath
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: >-
      vss-web-extension-sdk.VSS.Licensing.RestClient.LicensingHttpClient3._setInitializationPromise
    name: '_setInitializationPromise(promise: IPromise)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets a promise that is waited on before any requests are issued. Can be
      used to asynchronously

      set the request url and auth token manager.
    syntax:
      parameters:
        - id: promise
          type:
            - vss-web-extension-sdk.IPromise
          description: ''
      content: 'function _setInitializationPromise(promise: IPromise)'
    type: method
