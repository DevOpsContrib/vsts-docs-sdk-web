### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid
    name: EditableGrid
    fullName: EditableGrid
    children:
      - vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.cacheRows
      - vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.canEditCell
      - vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.Commands
      - vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.constructor
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.ensureRowSelectionWhenLayoutComplete
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.getCellEditorForColumn
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.getCurrentEditRowIndex
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.getPinAndFocusElementForContextMenu
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.getSelectedCell
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.getSelectedCellIntoView
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.getSelectedRowIndices
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.handleHeaderSelectionAfterViewPortUpdate
      - vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.initialize
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.initializeOptions
      - vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.layout
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onBeginCellEdit
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onCellChanged
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onCellSelectionChanged
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onContextMenu
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onEndCellEdit
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onHyperLinkClick
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onLayoutComplete
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.postUpdateViewPort
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.selectSameRowNthCell
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.setHeightForLowerContentSpacer
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.setHeightForUpperContentSpacer
      - vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.updateRows
      - >-
        vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.whenLayoutComplete
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@vss-web-extension-sdk.VSS.Controls.Grids.GridO<any>'
    source:
      path: vss.d.ts
      startLine: 11158
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Controls/EditableGrid
  - uid: vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.cacheRows
    name: 'cacheRows(aboveRange: any, visibleRange: any, belowRange: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function cacheRows(aboveRange: any, visibleRange: any, belowRange: any)'
      parameters:
        - id: aboveRange
          type:
            - any
          description: ''
        - id: visibleRange
          type:
            - any
          description: ''
        - id: belowRange
          type:
            - any
          description: ''
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.canEditCell
    name: 'canEditCell(dataIndex: number, columnIndex: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function canEditCell(dataIndex: number, columnIndex: string)'
      parameters:
        - id: dataIndex
          type:
            - number
          description: ''
        - id: columnIndex
          type:
            - string
          description: ''
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.Commands
    name: Commands
    fullName: Commands
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: static function Commands
      return:
        type:
          - function
  - uid: vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.constructor
    name: 'EditableGrid(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new EditableGrid(options?: any)'
      parameters:
        - id: options
          type:
            - any
          description: ''
          optional: true
    type: constructor
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.ensureRowSelectionWhenLayoutComplete
    name: >-
      ensureRowSelectionWhenLayoutComplete(command: any, indicesToSelect?:
      number[])
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function ensureRowSelectionWhenLayoutComplete(command: any,
        indicesToSelect?: number[])
      parameters:
        - id: command
          type:
            - any
          description: ''
        - id: indicesToSelect
          type:
            - 'number[]'
          description: ''
          optional: true
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.getCellEditorForColumn
    name: 'getCellEditorForColumn(index: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getCellEditorForColumn(index: any)'
      parameters:
        - id: index
          type:
            - any
          description: ''
      return:
        type:
          - '@vss-web-extension-sdk.VSS.Controls.EditableGrid.CellEditor'
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.getCurrentEditRowIndex
    name: getCurrentEditRowIndex()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getCurrentEditRowIndex()
      parameters: []
      return:
        type:
          - number
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.getPinAndFocusElementForContextMenu
    name: 'getPinAndFocusElementForContextMenu(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPinAndFocusElementForContextMenu(eventArgs: any)'
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.getSelectedCell
    name: getSelectedCell()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getSelectedCell()
      parameters: []
      return:
        type:
          - JQuery
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.getSelectedCellIntoView
    name: getSelectedCellIntoView()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getSelectedCellIntoView()
      parameters: []
      return:
        type:
          - boolean
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.getSelectedRowIndices
    name: getSelectedRowIndices()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getSelectedRowIndices()
      parameters: []
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.handleHeaderSelectionAfterViewPortUpdate
    name: handleHeaderSelectionAfterViewPortUpdate()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function handleHeaderSelectionAfterViewPortUpdate()
      parameters: []
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.initialize
    name: initialize()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function initialize()
      parameters: []
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.initializeOptions
    name: 'initializeOptions(options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function initializeOptions(options?: any)'
      parameters:
        - id: options
          type:
            - any
          description: |+

          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.layout
    name: layout()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function layout()
      parameters: []
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onBeginCellEdit
    name: 'onBeginCellEdit(dataIndex: number, columnIndex: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onBeginCellEdit(dataIndex: number, columnIndex: string)'
      parameters:
        - id: dataIndex
          type:
            - number
          description: ''
        - id: columnIndex
          type:
            - string
          description: ''
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onCellChanged
    name: 'onCellChanged(dataIndex: number, columnIndex: string, newValue: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function onCellChanged(dataIndex: number, columnIndex: string, newValue:
        string)
      parameters:
        - id: dataIndex
          type:
            - number
          description: ''
        - id: columnIndex
          type:
            - string
          description: ''
        - id: newValue
          type:
            - string
          description: ''
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onCellSelectionChanged
    name: 'onCellSelectionChanged($cell?: JQuery, delayEdit?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onCellSelectionChanged($cell?: JQuery, delayEdit?: boolean)'
      parameters:
        - id: $cell
          type:
            - JQuery
          description: ''
          optional: true
        - id: delayEdit
          type:
            - boolean
          description: ''
          optional: true
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onContextMenu
    name: 'onContextMenu(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onContextMenu(eventArgs: any)'
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onEndCellEdit
    name: >-
      onEndCellEdit(dataIndex: number, columnIndex: string, newValue: string,
      ignoreValueChange?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function onEndCellEdit(dataIndex: number, columnIndex: string, newValue:
        string, ignoreValueChange?: boolean)
      parameters:
        - id: dataIndex
          type:
            - number
          description: ''
        - id: columnIndex
          type:
            - string
          description: ''
        - id: newValue
          type:
            - string
          description: ''
        - id: ignoreValueChange
          type:
            - boolean
          description: ''
          optional: true
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onHyperLinkClick
    name: 'onHyperLinkClick(dataIndex: number, columnIndex: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onHyperLinkClick(dataIndex: number, columnIndex: string)'
      parameters:
        - id: dataIndex
          type:
            - number
          description: ''
        - id: columnIndex
          type:
            - string
          description: ''
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.onLayoutComplete
    name: 'onLayoutComplete(command: any, indicesToSelect?: number[])'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onLayoutComplete(command: any, indicesToSelect?: number[])'
      parameters:
        - id: command
          type:
            - any
          description: ''
        - id: indicesToSelect
          type:
            - 'number[]'
          description: ''
          optional: true
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.postUpdateViewPort
    name: postUpdateViewPort()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function postUpdateViewPort()
      parameters: []
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.selectSameRowNthCell
    name: 'selectSameRowNthCell(n: number, doNotGetCellIntoView?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function selectSameRowNthCell(n: number, doNotGetCellIntoView?: boolean)'
      parameters:
        - id: 'n'
          type:
            - number
          description: ''
        - id: doNotGetCellIntoView
          type:
            - boolean
          description: ''
          optional: true
      return:
        type:
          - boolean
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.setHeightForLowerContentSpacer
    name: 'setHeightForLowerContentSpacer(height: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setHeightForLowerContentSpacer(height: number)'
      parameters:
        - id: height
          type:
            - number
          description: ''
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.setHeightForUpperContentSpacer
    name: 'setHeightForUpperContentSpacer(height: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setHeightForUpperContentSpacer(height: number)'
      parameters:
        - id: height
          type:
            - number
          description: ''
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.updateRows
    name: 'updateRows(indices?: number[])'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateRows(indices?: number[])'
      parameters:
        - id: indices
          type:
            - 'number[]'
          description: ''
          optional: true
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.EditableGrid.EditableGrid.whenLayoutComplete
    name: 'whenLayoutComplete(command: any, indicesToSelect?: number[])'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function whenLayoutComplete(command: any, indicesToSelect?: number[])'
      parameters:
        - id: command
          type:
            - any
          description: ''
        - id: indicesToSelect
          type:
            - 'number[]'
          description: ''
          optional: true
    type: method
