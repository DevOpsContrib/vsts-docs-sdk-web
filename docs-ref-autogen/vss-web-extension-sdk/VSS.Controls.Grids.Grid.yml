### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid
    name: Grid
    fullName: Grid
    children:
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.beginFormatTable
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.cancelDelayedFunction
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.collapseAll
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.collapseByLevel
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.create
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.createIn
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.DATA_DRAGGING_ROWINFO
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.DATA_DROPPING_ROWINFO
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.delayExecute
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.disableEvent
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.enableEvent
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.enhance
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.ENHANCEMENTS_DATA_KEY
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.enhancementTypeName
      - >-
        vss-web-extension-sdk.VSS.Controls.Grids.Grid.ENHANCEMENT_OPTIONPREFIX_KEY
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.ENHANCEMENT_OPTIONS_KEY
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.ensureDataIndexExpanded
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.ensureEnhancement
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.ensureEnhancements
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.EVENT_ROW_TOGGLED
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.EVENT_ROW_UPDATED
      - >-
        vss-web-extension-sdk.VSS.Controls.Grids.Grid.EVENT_SELECTED_INDEX_CHANGED
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.expandAll
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.expandByLevel
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.focus
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getColumns
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getColumnValue
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getContextMenuRowInfo
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getDraggingRowInfo
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getElement
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getEnhancementOptions
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getExpandStates
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getFocusElement
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getId
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getInstance
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getLastRowDataIndex
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getOptionPrefix
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getRowData
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getRowInfo
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getSelectedDataIndex
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getSelectedDataIndices
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getSelectedRowIndex
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getSelectedRowIntoView
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getSelectionCount
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getSortOrder
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getTypeName
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.getTypeName
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.constructor
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.initializeOptions
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.isDisposed
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.MAX_COPY_SIZE
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.onContextMenu
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.onDeleteKey
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.onEnterKey
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.onGutterClick
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.onOpenRowDetail
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.onRowClick
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.onRowDoubleClick
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.onRowMouseDown
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.onRowMouseUp
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.onSort
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.optionsPrefix
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.PAYLOAD_SIZE
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.registerEnhancement
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.registerJQueryWidget
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.setAttribute
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.setColumnOptions
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.setDataSource
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.setEnhancementOptions
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.setRole
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.setSelectedDataIndex
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.setupDragDrop
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.tryToggle
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid.updateRow
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._active
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._addSelection
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._applyColumnSizing
      - >-
        vss-web-extension-sdk.VSS.Controls.Grids.Grid._beginEnsureSelectionIsAvailable
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._bind
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._cancelable
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._canvas
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._canvasDroppable
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._canvasHeight
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._canvasWidth
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._cellMinWidth
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._cellOffset
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._clearSelection
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._columns
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._contentSize
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._contentSpacer
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._count
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._createContextMenu
      - >-
        vss-web-extension-sdk.VSS.Controls.Grids.Grid._createContextPopupMenuControl
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._createFocusElement
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._dataSource
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._disposed
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._draggable
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._draggingRowInfo
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._drawCell
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._drawHeaderCellValue
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._droppable
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._element
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._enhance
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._enhancementOptions
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._ensureInitialized
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._expandedCount
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._expandStates
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._fire
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._fireChange
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._focus
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._getDragOverRows
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._getEventNameSpace
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._getInDomPromise
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._getRowInfoFromEvent
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._getRowIntoView
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._getUniqueId
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._gutter
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._gutterWidth
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._headerCanvas
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._ignoreScroll
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._indentIndex
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._indentLevels
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._initialized
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onBlur
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onCanvasScroll
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onColumnMove
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onColumnResize
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onContainerMouseDown
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onContainerResize
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onDeleteKey
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onEnterKey
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onFocus
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onHeaderClick
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onHeaderDblClick
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onKeyDown
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onKeyUp
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onRowClick
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onRowDoubleClick
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onRowMouseDown
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onRowMouseUp
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._onSelectStart
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._options
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._popupMenu
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._redraw
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._resetRowAcceptStatus
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._resetScroll
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._rowDropTryActivate
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._rowHeight
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._rows
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._scroller
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._scrollLeft
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._scrollTop
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._selectedIndex
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._selectedRows
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._selectionCount
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._selectRow
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._setElement
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._setId
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._sortBy
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._sortOrder
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._trySorting
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._unbind
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._updateRowSize
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._updateViewport
      - vss-web-extension-sdk.VSS.Controls.Grids.Grid._visibleRange
    langs:
      - typeScript
    type: class
    summary: ''
    package: vss-web-extension-sdk
    module: VSS/Controls/Grids
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.beginFormatTable
    name: >-
      beginFormatTable(operationCompleteCallback: IResultCallback,
      errorCallback?: IErrorCallback, formatterType?: function, options?: any)
    children: []
    langs:
      - typeScript
    summary: Generates a table of the selected items in the grid.
    syntax:
      parameters:
        - id: operationCompleteCallback
          type:
            - vss-web-extension-sdk.IResultCallback
          description: |-
            A callback function invoked when the
            current selection is available to the client for processing.
        - id: errorCallback
          type:
            - vss-web-extension-sdk.IErrorCallback
          description: |+

          optional: true
        - id: formatterType
          type:
            - function
          description: ''
          optional: true
        - id: options
          type:
            - any
          description: ''
          optional: true
      content: >-
        function beginFormatTable(operationCompleteCallback: IResultCallback,
        errorCallback?: IErrorCallback, formatterType?: function, options?: any)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.cancelDelayedFunction
    name: 'cancelDelayedFunction(name: string)'
    children: []
    langs:
      - typeScript
    summary: >-
      Cancels any pending delayed functions (delayExecute calls) with the
      specified name
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: Name (supplied in the delayExecute call) of the operations to cancel
      content: 'function cancelDelayedFunction(name: string)'
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.collapseAll
    name: collapseAll()
    children: []
    langs:
      - typeScript
    summary: Collapses all rows of the grid (if source data is hierarchical).
    syntax:
      parameters: []
      content: function collapseAll()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.collapseByLevel
    name: 'collapseByLevel(level: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Collapses all rows at or below specified level (if source data is
      hierarchical).
    syntax:
      parameters:
        - id: level
          type:
            - number
          description: Level to collapse.
      content: 'function collapseByLevel(level: number)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.create
    name: >-
      create(controlType: function, container: JQuery, controlOptions: TOptions,
      enhancementOptions?: EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: Creates a the control specified by TControl in the given container.
    syntax:
      parameters:
        - id: controlType
          type:
            - function
          description: ''
        - id: container
          type:
            - JQuery
          description: ''
        - id: controlOptions
          type:
            - TOptions
          description: ''
        - id: enhancementOptions
          type:
            - vss-web-extension-sdk.VSS.Controls.EnhancementOptions
          description: ''
          optional: true
      content: >-
        function create(controlType: function, container: JQuery,
        controlOptions: TOptions, enhancementOptions?: EnhancementOptions)
      return:
        type:
          - TControl
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.createIn
    name: >-
      createIn(type?: any, container?: any, options?: TOptions, koCompatable?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: container
          type:
            - any
          description: ''
          optional: true
        - id: options
          type:
            - TOptions
          description: ''
          optional: true
        - id: koCompatable
          type:
            - boolean
          description: ''
          optional: true
      content: >-
        function createIn(type?: any, container?: any, options?: TOptions,
        koCompatable?: boolean)
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Control
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.DATA_DRAGGING_ROWINFO
    name: DATA_DRAGGING_ROWINFO
    fullName: DATA_DRAGGING_ROWINFO
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.DATA_DROPPING_ROWINFO
    name: DATA_DROPPING_ROWINFO
    fullName: DATA_DROPPING_ROWINFO
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.delayExecute
    name: >-
      delayExecute(name?: string, msDelay?: number, cancelPendingOps?: boolean,
      func?: Function)
    children: []
    langs:
      - typeScript
    summary: Executes the provided function after the specified amount of time
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: >-
            (Optional) Name for this operation. Allows subsequent calls to
            cancel this action.
          optional: true
        - id: msDelay
          type:
            - number
          description: Delay in milliseconds to wait before executing the Function
          optional: true
        - id: cancelPendingOps
          type:
            - boolean
          description: >-
            If true, cancel any pending requests with this name. If false, and
            there are outstanding requests with this name already in progress,
            then do nothing.
          optional: true
        - id: func
          type:
            - Function
          description: |
            Method to execute after the delay
          optional: true
      content: >-
        function delayExecute(name?: string, msDelay?: number,
        cancelPendingOps?: boolean, func?: Function)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.disableEvent
    name: 'disableEvent(eventName: string)'
    children: []
    langs:
      - typeScript
    summary: Disables raising the custom event with the provided event name.
    syntax:
      parameters:
        - id: eventName
          type:
            - string
          description: |
            Name of the event to disable.
      content: 'function disableEvent(eventName: string)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.enableEvent
    name: 'enableEvent(eventName: string)'
    children: []
    langs:
      - typeScript
    summary: Enables raising the custom event with the provided event name.
    syntax:
      parameters:
        - id: eventName
          type:
            - string
          description: |
            Name of the event to enable.
      content: 'function enableEvent(eventName: string)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.enhance
    name: >-
      enhance(type: function, element: function, options?: function,
      enhancementOptions?: EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - function
          description: ''
        - id: element
          type:
            - function
          description: ''
        - id: options
          type:
            - function
          description: ''
          optional: true
        - id: enhancementOptions
          type:
            - vss-web-extension-sdk.VSS.Controls.EnhancementOptions
          description: ''
          optional: true
      content: >-
        function enhance(type: function, element: function, options?: function,
        enhancementOptions?: EnhancementOptions)
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Enhancement
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.ENHANCEMENTS_DATA_KEY
    name: ENHANCEMENTS_DATA_KEY
    fullName: ENHANCEMENTS_DATA_KEY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.enhancementTypeName
    name: enhancementTypeName
    fullName: enhancementTypeName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.ENHANCEMENT_OPTIONPREFIX_KEY
    name: ENHANCEMENT_OPTIONPREFIX_KEY
    fullName: ENHANCEMENT_OPTIONPREFIX_KEY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.ENHANCEMENT_OPTIONS_KEY
    name: ENHANCEMENT_OPTIONS_KEY
    fullName: ENHANCEMENT_OPTIONS_KEY
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.ensureDataIndexExpanded
    name: 'ensureDataIndexExpanded(dataIndex: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Ensures that an item (identified by a data index) has an associated row by

      expanding any enclosing collapsed rows. Returns the rowIndex of the
      associated row.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The data index of the item to ensure is expanded
      content: 'function ensureDataIndexExpanded(dataIndex: number)'
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.ensureEnhancement
    name: 'ensureEnhancement(type?: any, context?: any, errorCallback?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: context
          type:
            - any
          description: ''
          optional: true
        - id: errorCallback
          type:
            - any
          description: ''
          optional: true
      content: >-
        function ensureEnhancement(type?: any, context?: any, errorCallback?:
        any)
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Enhancement
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.ensureEnhancements
    name: 'ensureEnhancements(type?: any, context?: any, errorCallback?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: context
          type:
            - any
          description: ''
          optional: true
        - id: errorCallback
          type:
            - any
          description: ''
          optional: true
      content: >-
        function ensureEnhancements(type?: any, context?: any, errorCallback?:
        any)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.EVENT_ROW_TOGGLED
    name: EVENT_ROW_TOGGLED
    fullName: EVENT_ROW_TOGGLED
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.EVENT_ROW_UPDATED
    name: EVENT_ROW_UPDATED
    fullName: EVENT_ROW_UPDATED
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.EVENT_SELECTED_INDEX_CHANGED
    name: EVENT_SELECTED_INDEX_CHANGED
    fullName: EVENT_SELECTED_INDEX_CHANGED
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.expandAll
    name: expandAll()
    children: []
    langs:
      - typeScript
    summary: Expands all rows of the grid (if source data is hierarchical).
    syntax:
      parameters: []
      content: function expandAll()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.expandByLevel
    name: 'expandByLevel(level: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Expands all rows at or below specified level (if source data is
      hierarchical).
    syntax:
      parameters:
        - id: level
          type:
            - number
          description: Level to expand.
      content: 'function expandByLevel(level: number)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.focus
    name: 'focus(timeout?: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: timeout
          type:
            - number
          description: |+

          optional: true
      content: 'function focus(timeout?: number)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getColumns
    name: getColumns()
    children: []
    langs:
      - typeScript
    summary: Gets the columns currently being displayed in the grid.
    syntax:
      parameters: []
      content: function getColumns()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getColumnValue
    name: >-
      getColumnValue(dataIndex: number, columnIndex: function, columnOrder?:
      number)
    children: []
    langs:
      - typeScript
    summary: |-
      Gets the value for a column. The default use of the return value is to
      convert it to a string and set it as the cell's text value.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The index for the row data in the data source
        - id: columnIndex
          type:
            - function
          description: The index of the column's data in the row's data array
        - id: columnOrder
          type:
            - number
          description: >-
            The index of the column in the grid's column array. This is the
            current visible order of the column
          optional: true
      content: >-
        function getColumnValue(dataIndex: number, columnIndex: function,
        columnOrder?: number)
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getContextMenuRowInfo
    name: getContextMenuRowInfo()
    children: []
    langs:
      - typeScript
    summary: 'If no context menu is open, returns null.'
    syntax:
      parameters: []
      content: function getContextMenuRowInfo()
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Grids.IGridRowInfo
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getDraggingRowInfo
    name: getDraggingRowInfo()
    children: []
    langs:
      - typeScript
    summary: Gets the row information for the item currently being dragged.
    syntax:
      parameters: []
      content: function getDraggingRowInfo()
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getElement
    name: getElement()
    children: []
    langs:
      - typeScript
    summary: Gets the element associated with this control.
    syntax:
      parameters: []
      content: function getElement()
      return:
        type:
          - JQuery
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getEnhancementOptions
    name: 'getEnhancementOptions(type: any, element: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
        - id: element
          type:
            - any
          description: |+

      content: 'function getEnhancementOptions(type: any, element: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getExpandStates
    name: getExpandStates()
    children: []
    langs:
      - typeScript
    summary: Gets the collection of expand states for the grid.
    syntax:
      parameters: []
      content: function getExpandStates()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getFocusElement
    name: getFocusElement()
    children: []
    langs:
      - typeScript
    summary: >-
      This is the actual element that receives focus and that all the event
      bindings, like 'keydown', are bound to.
    syntax:
      parameters: []
      content: function getFocusElement()
      return:
        type:
          - JQuery
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getId
    name: getId()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getId()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getInstance
    name: 'getInstance(type?: any, element?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: element
          type:
            - any
          description: ''
          optional: true
      content: 'function getInstance(type?: any, element?: any)'
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Enhancement
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getLastRowDataIndex
    name: getLastRowDataIndex()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getLastRowDataIndex()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getOptionPrefix
    name: 'getOptionPrefix(type: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
      content: 'function getOptionPrefix(type: any)'
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getRowData
    name: 'getRowData(dataIndex: number)'
    children: []
    langs:
      - typeScript
    summary: Gets the data being used to display the row at the provided data index.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The data index for the record to retrieve.
      content: 'function getRowData(dataIndex: number)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getRowInfo
    name: 'getRowInfo(dataIndex: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Returns a rowInfo object containing rowIndex, dataIndex and a jQuery
      wrapper for the actual row.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The data index for the record to retrieve.
      content: 'function getRowInfo(dataIndex: number)'
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Grids.IGridRowInfo
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getSelectedDataIndex
    name: getSelectedDataIndex()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSelectedDataIndex()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getSelectedDataIndices
    name: getSelectedDataIndices()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSelectedDataIndices()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getSelectedRowIndex
    name: getSelectedRowIndex()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSelectedRowIndex()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getSelectedRowIntoView
    name: 'getSelectedRowIntoView(force?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: force
          type:
            - boolean
          description: |+

          optional: true
      content: 'function getSelectedRowIntoView(force?: boolean)'
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getSelectionCount
    name: getSelectionCount()
    children: []
    langs:
      - typeScript
    summary: Gets the number of selected items.
    syntax:
      parameters: []
      content: function getSelectionCount()
      return:
        type:
          - number
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getSortOrder
    name: getSortOrder()
    children: []
    langs:
      - typeScript
    summary: Gets the current sort order being used in the grid.
    syntax:
      parameters: []
      content: function getSortOrder()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getTypeName
    name: getTypeName()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getTypeName()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.getTypeName
    name: 'getTypeName(type?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
      content: 'function getTypeName(type?: any)'
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.constructor
    name: 'Grid(options?: IGridOptions)'
    children: []
    langs:
      - typeScript
    summary: Creates new Grid Control
    syntax:
      parameters:
        - id: options
          type:
            - vss-web-extension-sdk.VSS.Controls.Grids.IGridOptions
          description: >
            The initialization options for the grid which have the following
            properties

               "columns" is a required property containing the array of grid column descriptors that have the following structure:
               {
                   index: The index for the
                   text:      column header text, string, optional, default: "",
                   width:     width in pixels of the column, number, optional, default: 100,
                   canSortBy: true if the grid can be sorted by the column, boolean, optional, default: true
                   canMove: true if this column can be moved (has effect only if allowMoveColumns is set to true for the grid as well), boolean, optional, default: true
                   getCellContents: function that returns cell contents, function, optional, default: this._drawCell
                       The function takes the same parameters as _drawCell and should return a jQuery object
                       that represents the cell's contents. The first element will be appended to the row.
                       If the function returns null or undefined nothing will be appended for that cell.
                   getHeaderCellContents: function that returns column header cell contents, function, optional, default: this._drawHeaderCellValue
                       The function takes the same parameters as _drawHeaderCellValue and should return a jQuery object
                       that represents the cell's contents. The first element will be appended to the header cell's contents.
                       If the function returns null or undefined nothing will be appended for that header cell.
                   getColumnValue: function that returns the value for a cell contents, function, optional, default: this.getColumnValue;
                       The return value of the function will be converted to a string an added as the cell contents.
               }
               "enabledEvents" is an optional property containing an object with properties for each of the enabled events.
               {
                   GridO.EVENT_ROW_UPDATED: true
               }
          optional: true
      content: 'new Grid(options?: IGridOptions)'
    type: constructor
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.initializeOptions
    name: 'initializeOptions(options?: IGridOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: options
          type:
            - vss-web-extension-sdk.VSS.Controls.Grids.IGridOptions
          description: |+

          optional: true
      content: 'function initializeOptions(options?: IGridOptions)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.isDisposed
    name: isDisposed()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function isDisposed()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.MAX_COPY_SIZE
    name: MAX_COPY_SIZE
    fullName: MAX_COPY_SIZE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.onContextMenu
    name: 'onContextMenu(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onContextMenu(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.onDeleteKey
    name: 'onDeleteKey(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onDeleteKey(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.onEnterKey
    name: 'onEnterKey(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onEnterKey(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.onGutterClick
    name: 'onGutterClick(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onGutterClick(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.onOpenRowDetail
    name: 'onOpenRowDetail(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onOpenRowDetail(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.onRowClick
    name: 'onRowClick(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onRowClick(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.onRowDoubleClick
    name: 'onRowDoubleClick(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onRowDoubleClick(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.onRowMouseDown
    name: 'onRowMouseDown(eventArgs: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - any
          description: ''
      content: 'function onRowMouseDown(eventArgs: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.onRowMouseUp
    name: 'onRowMouseUp(eventArgs: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventArgs
          type:
            - JQueryEventObject
          description: ''
      content: 'function onRowMouseUp(eventArgs: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.onSort
    name: 'onSort(sortOrder: any, sortColumns?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: sortOrder
          type:
            - any
          description: ''
        - id: sortColumns
          type:
            - any
          description: ''
          optional: true
      content: 'function onSort(sortOrder: any, sortColumns?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.optionsPrefix
    name: optionsPrefix
    fullName: optionsPrefix
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - string
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.PAYLOAD_SIZE
    name: PAYLOAD_SIZE
    fullName: PAYLOAD_SIZE
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.registerEnhancement
    name: >-
      registerEnhancement(type?: function, selector?: string, options?:
      TOptions, errorCallback?: IErrorCallback, enhancementOptions?:
      EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - function
          description: ''
          optional: true
        - id: selector
          type:
            - string
          description: ''
          optional: true
        - id: options
          type:
            - TOptions
          description: ''
          optional: true
        - id: errorCallback
          type:
            - vss-web-extension-sdk.IErrorCallback
          description: |+

          optional: true
        - id: enhancementOptions
          type:
            - vss-web-extension-sdk.VSS.Controls.EnhancementOptions
          description: ''
          optional: true
      content: >-
        function registerEnhancement(type?: function, selector?: string,
        options?: TOptions, errorCallback?: IErrorCallback, enhancementOptions?:
        EnhancementOptions)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.registerJQueryWidget
    name: >-
      registerJQueryWidget(type?: any, widgetName?: any, widgetOptions?:
      TOptions, enhancementOptions?: EnhancementOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: type
          type:
            - any
          description: ''
          optional: true
        - id: widgetName
          type:
            - any
          description: ''
          optional: true
        - id: widgetOptions
          type:
            - TOptions
          description: |+

          optional: true
        - id: enhancementOptions
          type:
            - vss-web-extension-sdk.VSS.Controls.EnhancementOptions
          description: ''
          optional: true
      content: >-
        function registerJQueryWidget(type?: any, widgetName?: any,
        widgetOptions?: TOptions, enhancementOptions?: EnhancementOptions)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.setAttribute
    name: 'setAttribute(attribute: string, value: function, element?: JQuery)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets the attribute for the current control using the specified attribute
      name, value on the specified element.

      If no element specified, default element is used.
    syntax:
      parameters:
        - id: attribute
          type:
            - string
          description: Attribute name to set value.
        - id: value
          type:
            - function
          description: Attribute value to set.
        - id: element
          type:
            - JQuery
          description: |
            Element to apply the attribute (default is root element).
          optional: true
      content: >-
        function setAttribute(attribute: string, value: function, element?:
        JQuery)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.setColumnOptions
    name: 'setColumnOptions(columnName: string, options?: IGridColumn)'
    children: []
    langs:
      - typeScript
    summary: >-
      Set new column info for the column associated with the specified column
      name.
    syntax:
      parameters:
        - id: columnName
          type:
            - string
          description: Name of the column to change the options.
        - id: options
          type:
            - vss-web-extension-sdk.VSS.Controls.Grids.IGridColumn
          description: New column options.
          optional: true
      content: 'function setColumnOptions(columnName: string, options?: IGridColumn)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.setDataSource
    name: 'setDataSource(source: IGridSource)'
    children: []
    langs:
      - typeScript
    summary: Sets the source of the grid using GridSource object.
    syntax:
      parameters:
        - id: source
          type:
            - vss-web-extension-sdk.VSS.Controls.Grids.IGridSource
          description: GridSource object to set the grid source.
      content: 'function setDataSource(source: IGridSource)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.setEnhancementOptions
    name: 'setEnhancementOptions(enhancementOptions: EnhancementOptions)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets options related to the creation of this control or enhancement of an
      element as this control.

      Note: Options are merged.
    syntax:
      parameters:
        - id: enhancementOptions
          type:
            - vss-web-extension-sdk.VSS.Controls.EnhancementOptions
          description: ''
      content: 'function setEnhancementOptions(enhancementOptions: EnhancementOptions)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.setRole
    name: 'setRole(role: string, element?: JQuery)'
    children: []
    langs:
      - typeScript
    summary: >-
      Sets the role for the current control using the specified role value on
      the specified element.

      If no element specified, default element is used.
    syntax:
      parameters:
        - id: role
          type:
            - string
          description: Role to assign.
        - id: element
          type:
            - JQuery
          description: |
            Element to apply the role (default is root element).
          optional: true
      content: 'function setRole(role: string, element?: JQuery)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.setSelectedDataIndex
    name: 'setSelectedDataIndex(dataIndex: number, expandNodes?: boolean)'
    children: []
    langs:
      - typeScript
    summary: |-
      Sets the selected item in the grid by the data index.
      Optionally ensure that the item is not hidden by collapsed rows.
    syntax:
      parameters:
        - id: dataIndex
          type:
            - number
          description: The data index of item to show
        - id: expandNodes
          type:
            - boolean
          description: |
            If true, all containing collapsed nodes will be expanded
          optional: true
      content: 'function setSelectedDataIndex(dataIndex: number, expandNodes?: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.setupDragDrop
    name: 'setupDragDrop(draggableOptions: any, droppableOptions: any)'
    children: []
    langs:
      - typeScript
    summary: Setup the provided draggable and droppable options
    syntax:
      parameters:
        - id: draggableOptions
          type:
            - any
          description: ''
        - id: droppableOptions
          type:
            - any
          description: ''
      content: 'function setupDragDrop(draggableOptions: any, droppableOptions: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.tryToggle
    name: 'tryToggle(expand: boolean, applyToAllRows: boolean, targetIndex?: number)'
    children: []
    langs:
      - typeScript
    summary: >-
      Expand or collapse node(s), and set selection focus at a given target
      index or at the current selected index as default behavior.
    syntax:
      parameters:
        - id: expand
          type:
            - boolean
          description: 'If true, expands the node, otherwise collapsed.'
        - id: applyToAllRows
          type:
            - boolean
          description: >-
            True to expand or collapse all nodes, false to expand or collapse
            the node at a given target index, or at the current selected index
            as default behavior.
        - id: targetIndex
          type:
            - number
          description: 'The node index to be expanded or collapsed, and get selection focus.'
          optional: true
      content: >-
        function tryToggle(expand: boolean, applyToAllRows: boolean,
        targetIndex?: number)
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid.updateRow
    name: >-
      updateRow(rowIndex: number, dataIndex?: number, columnsToUpdate?:
      function)
    children: []
    langs:
      - typeScript
    summary: Updates the row identified by the given rowIndex.
    syntax:
      parameters:
        - id: rowIndex
          type:
            - number
          description: Index of row to be updated
        - id: dataIndex
          type:
            - number
          description: DataIndex of row to be updated
          optional: true
        - id: columnsToUpdate
          type:
            - function
          description: |
            HashSet of column indices. If given,
            only columns in this set will be updated.
          optional: true
      content: >-
        function updateRow(rowIndex: number, dataIndex?: number,
        columnsToUpdate?: function)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._active
    name: _active
    fullName: _active
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - boolean
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._addSelection
    name: '_addSelection(rowIndex: number, dataIndex?: number, options?: any)'
    children: []
    langs:
      - typeScript
    summary: Highlights the row at the specified rowIndex
    syntax:
      parameters:
        - id: rowIndex
          type:
            - number
          description: >-
            Index of the row in the visible source (taking the expand/collapse
            states into account)
        - id: dataIndex
          type:
            - number
          description: Index of the row in the overall source
          optional: true
        - id: options
          type:
            - any
          description: |
            Specifies options such as:
                - keepSelectionStart: Keepd the rowIndex as the basis for range selection
                - doNotFireEvent: Prevents firing events
                - toggle: Toggles the row in the selection
          optional: true
      content: >-
        function _addSelection(rowIndex: number, dataIndex?: number, options?:
        any)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._applyColumnSizing
    name: >-
      _applyColumnSizing(columnIndex: number, initialWidth?: number, finish?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: columnIndex
          type:
            - number
          description: ''
        - id: initialWidth
          type:
            - number
          description: ''
          optional: true
        - id: finish
          type:
            - boolean
          description: |+

          optional: true
      content: >-
        function _applyColumnSizing(columnIndex: number, initialWidth?: number,
        finish?: boolean)
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Grids.Grid._beginEnsureSelectionIsAvailable
    name: >-
      _beginEnsureSelectionIsAvailable(itemsAvailableCallback?: IResultCallback,
      errorCallback?: IErrorCallback)
    children: []
    langs:
      - typeScript
    summary: >-
      Ensures that all data objects in the selection have been downloaded and
      are available to process.
    syntax:
      parameters:
        - id: itemsAvailableCallback
          type:
            - vss-web-extension-sdk.IResultCallback
          description: ''
          optional: true
        - id: errorCallback
          type:
            - vss-web-extension-sdk.IErrorCallback
          description: |+

          optional: true
      content: >-
        function _beginEnsureSelectionIsAvailable(itemsAvailableCallback?:
        IResultCallback, errorCallback?: IErrorCallback)
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._bind
    name: '_bind(element?: any, eventType?: any, handler?: any, track?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - any
          description: ''
          optional: true
        - id: eventType
          type:
            - any
          description: ''
          optional: true
        - id: handler
          type:
            - any
          description: ''
          optional: true
        - id: track
          type:
            - any
          description: |+

          optional: true
      content: >-
        function _bind(element?: any, eventType?: any, handler?: any, track?:
        any)
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Enhancement
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._cancelable
    name: _cancelable
    fullName: _cancelable
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - any
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._canvas
    name: _canvas
    fullName: _canvas
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - JQuery
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._canvasDroppable
    name: _canvasDroppable
    fullName: _canvasDroppable
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - JQuery
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._canvasHeight
    name: _canvasHeight
    fullName: _canvasHeight
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._canvasWidth
    name: _canvasWidth
    fullName: _canvasWidth
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._cellMinWidth
    name: _cellMinWidth
    fullName: _cellMinWidth
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._cellOffset
    name: _cellOffset
    fullName: _cellOffset
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._clearSelection
    name: _clearSelection()
    children: []
    langs:
      - typeScript
    summary: >-
      Clear the selected rows & selection count, but maintain the selected
      index.
    syntax:
      parameters: []
      content: function _clearSelection()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._columns
    name: _columns
    fullName: _columns
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - union
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._contentSize
    name: _contentSize
    fullName: _contentSize
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - any
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._contentSpacer
    name: _contentSpacer
    fullName: _contentSpacer
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - any
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._count
    name: _count
    fullName: _count
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._createContextMenu
    name: '_createContextMenu(rowInfo: any, menuOptions: any)'
    children: []
    langs:
      - typeScript
    summary: >-
      Creates the context menu options. This function is intended to be
      overriden by derived objects.
    syntax:
      parameters:
        - id: rowInfo
          type:
            - any
          description: The information about the row with context
        - id: menuOptions
          type:
            - any
          description: The menu information. See _createContextPopupMenuControl
      content: 'function _createContextMenu(rowInfo: any, menuOptions: any)'
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Menus.PopupMenu
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.Grids.Grid._createContextPopupMenuControl
    name: '_createContextPopupMenuControl(menuOptions: any)'
    children: []
    langs:
      - typeScript
    summary: >-
      Creates the PopupMenu control that houses the context menu items for the
      Grid. Note: this is intentionally
          abstracted from _createContextMenu to allow directly calling it from deep derivations and avoiding inheritance
          base propagation.
    syntax:
      parameters:
        - id: menuOptions
          type:
            - any
          description: |

                The menu information:
                {
                    contextInfo: { item, rowInfo}
                    items: the list of menu items
                }
      content: 'function _createContextPopupMenuControl(menuOptions: any)'
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Menus.PopupMenu
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._createFocusElement
    name: _createFocusElement()
    children: []
    langs:
      - typeScript
    summary: 'Obsolete, unused.'
    syntax:
      parameters: []
      content: function _createFocusElement()
      return:
        type:
          - JQuery
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._dataSource
    name: _dataSource
    fullName: _dataSource
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - union
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._disposed
    name: _disposed
    fullName: _disposed
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - boolean
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._draggable
    name: _draggable
    fullName: _draggable
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - any
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._draggingRowInfo
    name: _draggingRowInfo
    fullName: _draggingRowInfo
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - any
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._drawCell
    name: >-
      _drawCell(rowInfo: any, dataIndex: number, expandedState: number, level:
      number, column: any, indentIndex: number, columnOrder: number)
    children: []
    langs:
      - typeScript
    summary: >-
      Custom Drawn Columns:

      If you want a custom drawn column, then the preferred method is to set a
      "getCellContents" property

      on the column to a function that takes the same parameters as this
      function and returns a jQuery

      object that represents the contents.
    syntax:
      parameters:
        - id: rowInfo
          type:
            - any
          description: The information about grid row that is being rendered.
        - id: dataIndex
          type:
            - number
          description: The index of the row.
        - id: expandedState
          type:
            - number
          description: Number of children in the tree under this row recursively.
        - id: level
          type:
            - number
          description: The hierarchy level of the row.
        - id: column
          type:
            - any
          description: Information about the column that is being rendered.
        - id: indentIndex
          type:
            - number
          description: Index of the column that is used for the indentation.
        - id: columnOrder
          type:
            - number
          description: The display order of the column.
      content: >-
        function _drawCell(rowInfo: any, dataIndex: number, expandedState:
        number, level: number, column: any, indentIndex: number, columnOrder:
        number)
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._drawHeaderCellValue
    name: '_drawHeaderCellValue(column: any)'
    children: []
    langs:
      - typeScript
    summary: >-
      Custom Drawn Column Header:

      If you want a custom drawn column header, then the preferred method is to
      set a "getHeaderCellContents" property

      on the column to a function that takes the same parameters as this
      function and returns a jQuery

      object that represents the contents.
    syntax:
      parameters:
        - id: column
          type:
            - any
          description: Information about the header column that is being rendered.
      content: 'function _drawHeaderCellValue(column: any)'
      return:
        type:
          - JQuery
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._droppable
    name: _droppable
    fullName: _droppable
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - any
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._element
    name: _element
    fullName: _element
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - JQuery
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._enhance
    name: '_enhance(element: JQuery)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - JQuery
          description: |+

      content: 'function _enhance(element: JQuery)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._enhancementOptions
    name: _enhancementOptions
    fullName: _enhancementOptions
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.EnhancementOptions
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._ensureInitialized
    name: _ensureInitialized()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function _ensureInitialized()
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._expandedCount
    name: _expandedCount
    fullName: _expandedCount
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._expandStates
    name: _expandStates
    fullName: _expandStates
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - union
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._fire
    name: '_fire(element?: any, eventType?: any, args?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - any
          description: ''
          optional: true
        - id: eventType
          type:
            - any
          description: ''
          optional: true
        - id: args
          type:
            - any
          description: |+

          optional: true
      content: 'function _fire(element?: any, eventType?: any, args?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._fireChange
    name: '_fireChange(sender?: any)'
    children: []
    langs:
      - typeScript
    summary: Fires the change event for the control immediately
    syntax:
      parameters:
        - id: sender
          type:
            - any
          description: |
            Source element of the event
          optional: true
      content: 'function _fireChange(sender?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._focus
    name: _focus
    fullName: _focus
    children: []
    langs:
      - typeScript
    type: property
    summary: Deprecated.  Please use _canvas instead.
    syntax:
      return:
        type:
          - JQuery
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._getDragOverRows
    name: _getDragOverRows()
    children: []
    langs:
      - typeScript
    summary: Get the rows that currently have a draggable item "over" them
    syntax:
      parameters: []
      content: function _getDragOverRows()
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._getEventNameSpace
    name: _getEventNameSpace()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function _getEventNameSpace()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._getInDomPromise
    name: _getInDomPromise()
    children: []
    langs:
      - typeScript
    summary: |-
      Get a promise that is resolved once the containing element for this
      control has been added to the DOM hierarchy.
    syntax:
      parameters: []
      content: function _getInDomPromise()
      return:
        type:
          - vss-web-extension-sdk.IPromise
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._getRowInfoFromEvent
    name: '_getRowInfoFromEvent(e?: JQueryEventObject, selector?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
        - id: selector
          type:
            - string
          description: |+

          optional: true
      content: 'function _getRowInfoFromEvent(e?: JQueryEventObject, selector?: string)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._getRowIntoView
    name: '_getRowIntoView(rowIndex: number, force?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rowIndex
          type:
            - number
          description: ''
        - id: force
          type:
            - boolean
          description: ''
          optional: true
      content: 'function _getRowIntoView(rowIndex: number, force?: boolean)'
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._getUniqueId
    name: _getUniqueId()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function _getUniqueId()
      return:
        type:
          - string
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._gutter
    name: _gutter
    fullName: _gutter
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - JQuery
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._gutterWidth
    name: _gutterWidth
    fullName: _gutterWidth
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._headerCanvas
    name: _headerCanvas
    fullName: _headerCanvas
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - JQuery
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._ignoreScroll
    name: _ignoreScroll
    fullName: _ignoreScroll
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - boolean
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._indentIndex
    name: _indentIndex
    fullName: _indentIndex
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._indentLevels
    name: _indentLevels
    fullName: _indentLevels
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - any
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._initialized
    name: _initialized
    fullName: _initialized
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - boolean
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onBlur
    name: '_onBlur(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onBlur(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onCanvasScroll
    name: '_onCanvasScroll(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onCanvasScroll(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onColumnMove
    name: '_onColumnMove(sourceIndex: any, targetIndex: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: sourceIndex
          type:
            - any
          description: ''
        - id: targetIndex
          type:
            - any
          description: ''
      content: 'function _onColumnMove(sourceIndex: any, targetIndex: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onColumnResize
    name: '_onColumnResize(column: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: column
          type:
            - any
          description: ''
      content: 'function _onColumnResize(column: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onContainerMouseDown
    name: '_onContainerMouseDown(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onContainerMouseDown(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onContainerResize
    name: '_onContainerResize(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onContainerResize(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onDeleteKey
    name: '_onDeleteKey(e?: JQueryKeyEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryKeyEventObject
          description: ''
          optional: true
      content: 'function _onDeleteKey(e?: JQueryKeyEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onEnterKey
    name: '_onEnterKey(e?: JQueryKeyEventObject, bounds?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryKeyEventObject
          description: ''
          optional: true
        - id: bounds
          type:
            - any
          description: ''
          optional: true
      content: 'function _onEnterKey(e?: JQueryKeyEventObject, bounds?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onFocus
    name: '_onFocus(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onFocus(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onHeaderClick
    name: '_onHeaderClick(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onHeaderClick(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onHeaderDblClick
    name: '_onHeaderDblClick(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onHeaderDblClick(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onKeyDown
    name: '_onKeyDown(e?: JQueryKeyEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryKeyEventObject
          description: ''
          optional: true
      content: 'function _onKeyDown(e?: JQueryKeyEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onKeyUp
    name: '_onKeyUp(e?: JQueryKeyEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryKeyEventObject
          description: ''
          optional: true
      content: 'function _onKeyUp(e?: JQueryKeyEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onRowClick
    name: '_onRowClick(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onRowClick(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onRowDoubleClick
    name: '_onRowDoubleClick(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onRowDoubleClick(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onRowMouseDown
    name: '_onRowMouseDown(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: Handles the row mouse down event
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onRowMouseDown(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onRowMouseUp
    name: '_onRowMouseUp(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: Handles the row mouse up event
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onRowMouseUp(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._onSelectStart
    name: '_onSelectStart(e?: JQueryEventObject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: e
          type:
            - JQueryEventObject
          description: ''
          optional: true
      content: 'function _onSelectStart(e?: JQueryEventObject)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._options
    name: _options
    fullName: _options
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Grids.IGridOptions
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._popupMenu
    name: _popupMenu
    fullName: _popupMenu
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Menus.PopupMenu
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._redraw
    name: '_redraw(includeNonDirtyRows?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: includeNonDirtyRows
          type:
            - boolean
          description: |+

          optional: true
      content: 'function _redraw(includeNonDirtyRows?: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._resetRowAcceptStatus
    name: _resetRowAcceptStatus()
    children: []
    langs:
      - typeScript
    summary: Clear the cached row acceptance map
    syntax:
      parameters: []
      content: function _resetRowAcceptStatus()
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._resetScroll
    name: _resetScroll
    fullName: _resetScroll
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - boolean
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._rowDropTryActivate
    name: '_rowDropTryActivate(droppingRowInfo: any, e?: any, ui?: any)'
    children: []
    langs:
      - typeScript
    summary: See if the row has accepted and activate if it has.
    syntax:
      parameters:
        - id: droppingRowInfo
          type:
            - any
          description: ''
        - id: e
          type:
            - any
          description: ''
          optional: true
        - id: ui
          type:
            - any
          description: ''
          optional: true
      content: 'function _rowDropTryActivate(droppingRowInfo: any, e?: any, ui?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._rowHeight
    name: _rowHeight
    fullName: _rowHeight
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._rows
    name: _rows
    fullName: _rows
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - any
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._scroller
    name: _scroller
    fullName: _scroller
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - any
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._scrollLeft
    name: _scrollLeft
    fullName: _scrollLeft
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._scrollTop
    name: _scrollTop
    fullName: _scrollTop
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._selectedIndex
    name: _selectedIndex
    fullName: _selectedIndex
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._selectedRows
    name: _selectedRows
    fullName: _selectedRows
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - any
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._selectionCount
    name: _selectionCount
    fullName: _selectionCount
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - number
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._selectRow
    name: '_selectRow(rowIndex: number, dataIndex?: number, options?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: rowIndex
          type:
            - number
          description: ''
        - id: dataIndex
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - any
          description: |+

          optional: true
      content: 'function _selectRow(rowIndex: number, dataIndex?: number, options?: any)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._setElement
    name: '_setElement(element: JQuery)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - JQuery
          description: |+

      content: 'function _setElement(element: JQuery)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._setId
    name: '_setId(id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: id
          type:
            - string
          description: |+

      content: 'function _setId(id: string)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._sortBy
    name: '_sortBy(column?: any, add?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: column
          type:
            - any
          description: ''
          optional: true
        - id: add
          type:
            - boolean
          description: |+

          optional: true
      content: 'function _sortBy(column?: any, add?: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._sortOrder
    name: _sortOrder
    fullName: _sortOrder
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - union
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._trySorting
    name: '_trySorting(sortOrder: any, sortColumns?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: sortOrder
          type:
            - any
          description: ''
        - id: sortColumns
          type:
            - any
          description: ''
          optional: true
      content: 'function _trySorting(sortOrder: any, sortColumns?: any)'
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._unbind
    name: '_unbind(element?: any, eventType?: any, handler?: any, track?: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: element
          type:
            - any
          description: ''
          optional: true
        - id: eventType
          type:
            - any
          description: ''
          optional: true
        - id: handler
          type:
            - any
          description: ''
          optional: true
        - id: track
          type:
            - any
          description: |+

          optional: true
      content: >-
        function _unbind(element?: any, eventType?: any, handler?: any, track?:
        any)
      return:
        type:
          - vss-web-extension-sdk.VSS.Controls.Enhancement
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._updateRowSize
    name: '_updateRowSize(rowIndex: number, row: any, keepContent?: boolean)'
    children: []
    langs:
      - typeScript
    summary: Updates the container element for the row identified by rowIndex
    syntax:
      parameters:
        - id: rowIndex
          type:
            - number
          description: Index of row to be updated
        - id: row
          type:
            - any
          description: ''
        - id: keepContent
          type:
            - boolean
          description: |-
            If set, the content of the container element (i.e.,
            any column data) will not be removed
          optional: true
      content: >-
        function _updateRowSize(rowIndex: number, row: any, keepContent?:
        boolean)
      return:
        type:
          - any
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._updateViewport
    name: '_updateViewport(includeNonDirtyRows?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: includeNonDirtyRows
          type:
            - boolean
          description: |+

          optional: true
      content: 'function _updateViewport(includeNonDirtyRows?: boolean)'
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.Grids.Grid._visibleRange
    name: _visibleRange
    fullName: _visibleRange
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      return:
        type:
          - union
