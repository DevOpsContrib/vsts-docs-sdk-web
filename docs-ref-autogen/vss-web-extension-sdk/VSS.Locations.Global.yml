### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Locations.Global
    package: vss-web-extension-sdk
    name: Global
    module: VSS/Locations
    children:
      - vss-web-extension-sdk.VSS.Locations.addServiceLocation
      - vss-web-extension-sdk.VSS.Locations.beginGetServiceLocation
      - vss-web-extension-sdk.VSS.Locations.getCachedServiceLocation
    type: package
    langs:
      - typeScript
  - uid: vss-web-extension-sdk.VSS.Locations.addServiceLocation
    name: addServiceLocation
    children: []
    type: function
    langs:
      - typeScript
    summary: Set the url for the given service and host type
    syntax:
      content: >-
        function addServiceLocation(url: string, serviceInstanceId: string,
        hostType: ContextHostType)
      parameters:
        - id: url
          type:
            - string
          description: The Url of the location to add
        - id: serviceInstanceId
          type:
            - string
          description: Unique id for the service
        - id: hostType
          type:
            - ContextHostType
          description: |
            The host level of the url
    module: VSS/Locations
  - uid: vss-web-extension-sdk.VSS.Locations.beginGetServiceLocation
    name: beginGetServiceLocation
    children: []
    type: function
    langs:
      - typeScript
    summary: Get the url for the given service
    syntax:
      content: >-
        function beginGetServiceLocation(serviceInstanceId: string, hostType:
        ContextHostType, webContext?: WebContext, faultInMissingHost?: boolean,
        authTokenManager?: IAuthTokenManager<any>)
      parameters:
        - id: serviceInstanceId
          type:
            - string
          description: Unique id for the service
        - id: hostType
          type:
            - ContextHostType
          description: The host level to get the url for
        - id: webContext
          type:
            - '@vss-web-extension-sdk.VSS.Common.Contracts.Platform.WebContext'
          description: The original context to get the url for
          optional: true
        - id: faultInMissingHost
          type:
            - boolean
          description: >-
            If true, attempt to fault in the target host if the location's
            service definition doesn't already exist.
          optional: true
        - id: authTokenManager
          type:
            - '@vss-web-extension-sdk.IAuthTokenManager<any>'
          description: >-
            A custom AuthTokenManager to be used when retrieving the SPS
            location for the host and when talking to the SPS instance
            subsequently
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<string>'
    module: VSS/Locations
  - uid: vss-web-extension-sdk.VSS.Locations.getCachedServiceLocation
    name: getCachedServiceLocation
    children: []
    type: function
    langs:
      - typeScript
    summary: Get the url for the given service if its location has already been cached
    syntax:
      content: >-
        function getCachedServiceLocation(serviceInstanceId: string, hostType:
        ContextHostType, webContext?: WebContext)
      parameters:
        - id: serviceInstanceId
          type:
            - string
          description: Unique id for the service
        - id: hostType
          type:
            - ContextHostType
          description: The host level to get the url for
        - id: webContext
          type:
            - '@vss-web-extension-sdk.VSS.Common.Contracts.Platform.WebContext'
          description: The original context to get the url for
          optional: true
      return:
        type:
          - string
    module: VSS/Locations
