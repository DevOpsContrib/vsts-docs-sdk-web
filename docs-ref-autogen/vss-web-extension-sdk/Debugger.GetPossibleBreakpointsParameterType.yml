### YamlMime:UniversalReference
items:
  - uid: >-
      vss-web-extension-sdk.inspector.Debugger.GetPossibleBreakpointsParameterType
    name: GetPossibleBreakpointsParameterType
    fullName: GetPossibleBreakpointsParameterType
    children:
      - >-
        vss-web-extension-sdk.inspector.Debugger.GetPossibleBreakpointsParameterType.end
      - >-
        vss-web-extension-sdk.inspector.Debugger.GetPossibleBreakpointsParameterType.restrictToFunction
      - >-
        vss-web-extension-sdk.inspector.Debugger.GetPossibleBreakpointsParameterType.start
    langs:
      - typeScript
    type: interface
    summary: ''
    package: vss-web-extension-sdk
    module: Debugger
  - uid: >-
      vss-web-extension-sdk.inspector.Debugger.GetPossibleBreakpointsParameterType.end
    name: end
    fullName: end
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      End of range to search possible breakpoint locations in (excluding). When
      not specified, end of scripts is used as end of range.
    syntax:
      return:
        type:
          - '@vss-web-extension-sdk.inspector.Debugger.Location'
  - uid: >-
      vss-web-extension-sdk.inspector.Debugger.GetPossibleBreakpointsParameterType.restrictToFunction
    name: restrictToFunction
    fullName: restrictToFunction
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Only consider locations which are in the same (non-nested) function as
      start.
    syntax:
      return:
        type:
          - boolean
  - uid: >-
      vss-web-extension-sdk.inspector.Debugger.GetPossibleBreakpointsParameterType.start
    name: start
    fullName: start
    children: []
    langs:
      - typeScript
    type: property
    summary: Start of range to search possible breakpoint locations in.
    syntax:
      return:
        type:
          - '@vss-web-extension-sdk.inspector.Debugger.Location'
