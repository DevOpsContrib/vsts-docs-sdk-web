### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget
    name: IConfigurableWidget
    fullName: IConfigurableWidget
    children:
      - >-
        vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.disableWidgetForStakeholders
      - >-
        vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.lightbox
      - >-
        vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.listen
      - >-
        vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.load
      - >-
        vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.onDashboardLoaded
      - >-
        vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.preload
      - >-
        vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.reload
    langs:
      - typeScript
    type: interface
    summary: Configurable widgets implement this interface
    package: vss-web-extension-sdk
    module: TFS.Dashboards.WidgetContracts
  - uid: >-
      vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.disableWidgetForStakeholders
    name: disableWidgetForStakeholders
    fullName: disableWidgetForStakeholders
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The framework calls this method to determine if the widget should be
      disabled for users with stakeholder license
    syntax:
      return:
        type:
          - union
  - uid: >-
      vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.lightbox
    name: lightbox
    fullName: lightbox
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Run widget in lightboxed mode
       @param {WidgetSettings} settings of the widget as available when the widget render is called by the host.
       @param {LightboxSize} size of the lightbox
       @returns object wrapped in a promise that encapsulates the success of this operation.
               when this calls are completed and the experience is done loading.
    syntax:
      return:
        type:
          - union
  - uid: >-
      vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.listen
    name: listen
    fullName: listen
    children: []
    langs:
      - typeScript
    type: property
    summary: Listen to message from host
    syntax:
      return:
        type:
          - union
  - uid: >-
      vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.load
    name: load
    fullName: load
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Widgets use the settings provided as well as server side calls to complete
      their rendering experience.
       In the future, widgets are expected to provide a loading experience while the calls are being waited to be completed.
       Until then, the widget host will provide the loading experience
       @param {WidgetSettings} settings of the widget as available when the widget render is called by the host.
       @returns object wrapped in a promise that encapsulates the success of this operation.
               when this calls are completed and the experience is done loading.
    syntax:
      return:
        type:
          - union
  - uid: >-
      vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.onDashboardLoaded
    name: onDashboardLoaded
    fullName: onDashboardLoaded
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Widgets manage any operations that are not necessary for initial load but
      are required for the full widget experience.
    syntax:
      return:
        type:
          - union
  - uid: >-
      vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.preload
    name: preload
    fullName: preload
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      widgets use the settings provided along with the any cached data they may
      have to paint an interactive state. No network calls should be made by the
      widget.
       @param {WidgetSettings} settings of the widget as available when the widget render is called by the host.
       @returns object wrapped in a promise that encapsulates the success of this operation.
               when this calls are completed and the experience is done loading.
    syntax:
      return:
        type:
          - union
  - uid: >-
      vss-web-extension-sdk.TFS.Dashboards.WidgetContracts.IConfigurableWidget.reload
    name: reload
    fullName: reload
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      When the configuration view is changed, the widget is expected to update
      its view.
       @param {WidgetSettings} the latest widget settings as available from the configuration view for the widget.
       @returns object wrapped in a promise that encapsulates the success of this operation.
    syntax:
      return:
        type:
          - union
