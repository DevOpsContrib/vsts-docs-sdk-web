### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Global
    package: vss-web-extension-sdk
    name: Global
    module: VSS
    children:
      - vss-web-extension-sdk.VSS.getAccessToken
      - vss-web-extension-sdk.VSS.getAppToken
      - vss-web-extension-sdk.VSS.getConfiguration
      - vss-web-extension-sdk.VSS.getContribution
      - vss-web-extension-sdk.VSS.getExtensionContext
      - vss-web-extension-sdk.VSS.getRegisteredObject
      - vss-web-extension-sdk.VSS.getService
      - vss-web-extension-sdk.VSS.getServiceContribution
      - vss-web-extension-sdk.VSS.getServiceContributions
      - vss-web-extension-sdk.VSS.getWebContext
      - vss-web-extension-sdk.VSS.init
      - vss-web-extension-sdk.VSS.notifyLoadFailed
      - vss-web-extension-sdk.VSS.notifyLoadSucceeded
      - vss-web-extension-sdk.VSS.ready
      - vss-web-extension-sdk.VSS.register
      - vss-web-extension-sdk.VSS.require
      - vss-web-extension-sdk.VSS.resize
      - vss-web-extension-sdk.VSS.unregister
    type: package
    langs:
      - typeScript
  - uid: vss-web-extension-sdk.VSS.getAccessToken
    name: getAccessToken
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Fetch an access token which will allow calls to be made to other VSTS
      services
    syntax:
      content: function getAccessToken()
      parameters: []
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.ISessionToken>
    module: VSS
  - uid: vss-web-extension-sdk.VSS.getAppToken
    name: getAppToken
    children: []
    type: function
    langs:
      - typeScript
    summary: Fetch an token which can be used to identify the current user
    syntax:
      content: function getAppToken()
      parameters: []
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.ISessionToken>
    module: VSS
  - uid: vss-web-extension-sdk.VSS.getConfiguration
    name: getConfiguration
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Get the configuration data passed in the initial handshake from the parent
      frame
    syntax:
      content: function getConfiguration()
      parameters: []
      return:
        type:
          - any
    module: VSS
  - uid: vss-web-extension-sdk.VSS.getContribution
    name: getContribution
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Gets the information about the contribution that first caused this
      extension to load.
    syntax:
      content: function getContribution()
      parameters: []
      return:
        type:
          - '@vss-web-extension-sdk.Contribution'
    module: VSS
  - uid: vss-web-extension-sdk.VSS.getExtensionContext
    name: getExtensionContext
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Get the context about the extension that owns the content that is being
      hosted
    syntax:
      content: function getExtensionContext()
      parameters: []
      return:
        type:
          - '@vss-web-extension-sdk.IExtensionContext'
    module: VSS
  - uid: vss-web-extension-sdk.VSS.getRegisteredObject
    name: getRegisteredObject
    children: []
    type: function
    langs:
      - typeScript
    summary: Get an instance of an object registered with the given id
    syntax:
      content: 'function getRegisteredObject(instanceId: string, contextData?: Object)'
      parameters:
        - id: instanceId
          type:
            - string
          description: unique id of the registered object
        - id: contextData
          type:
            - Object
          description: >
            Optional context data to pass to the contructor of an object factory
            method
          optional: true
      return:
        type:
          - Object
    module: VSS
  - uid: vss-web-extension-sdk.VSS.getService
    name: getService
    children: []
    type: function
    langs:
      - typeScript
    summary: Get a contributed service from the parent host.
    syntax:
      content: 'function getService<T>(contributionId: string, context?: Object)'
      parameters:
        - id: contributionId
          type:
            - string
          description: Full Id of the service contribution to get the instance of
        - id: context
          type:
            - Object
          description: >
            Optional context information to use when obtaining the service
            instance
          optional: true
      return:
        type:
          - '@vss-web-extension-sdk.IPromise<T>'
    module: VSS
  - uid: vss-web-extension-sdk.VSS.getServiceContribution
    name: getServiceContribution
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Get the contribution with the given contribution id. The returned
      contribution has a method to get a registered object within that
      contribution.
    syntax:
      content: 'function getServiceContribution(contributionId: string)'
      parameters:
        - id: contributionId
          type:
            - string
          description: |
            Id of the contribution to get
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.IServiceContribution>
    module: VSS
  - uid: vss-web-extension-sdk.VSS.getServiceContributions
    name: getServiceContributions
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Get contributions that target a given contribution id. The returned
      contributions have a method to get a registered object within that
      contribution.
    syntax:
      content: 'function getServiceContributions(targetContributionId: string)'
      parameters:
        - id: targetContributionId
          type:
            - string
          description: >
            Contributions that target the contribution with this id will be
            returned
      return:
        type:
          - >-
            @vss-web-extension-sdk.IPromise<@vss-web-extension-sdk.IServiceContribution[]>
    module: VSS
  - uid: vss-web-extension-sdk.VSS.getWebContext
    name: getWebContext
    children: []
    type: function
    langs:
      - typeScript
    summary: Get the web context from the parent host
    syntax:
      content: function getWebContext()
      parameters: []
      return:
        type:
          - '@vss-web-extension-sdk.WebContext'
    module: VSS
  - uid: vss-web-extension-sdk.VSS.init
    name: init
    children: []
    type: function
    langs:
      - typeScript
    summary: Initiates the handshake with the host window.
    syntax:
      content: 'function init(options: IExtensionInitializationOptions)'
      parameters:
        - id: options
          type:
            - '@vss-web-extension-sdk.IExtensionInitializationOptions'
          description: |
            Initialization options for the extension.
    module: VSS
  - uid: vss-web-extension-sdk.VSS.notifyLoadFailed
    name: notifyLoadFailed
    children: []
    type: function
    langs:
      - typeScript
    summary: Notifies the host that the extension failed to load
    syntax:
      content: 'function notifyLoadFailed(e: any)'
      parameters:
        - id: e
          type:
            - any
          description: ''
    module: VSS
  - uid: vss-web-extension-sdk.VSS.notifyLoadSucceeded
    name: notifyLoadSucceeded
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Notifies the host that the extension successfully loaded (stop showing the
      loading indicator)
    syntax:
      content: function notifyLoadSucceeded()
      parameters: []
    module: VSS
  - uid: vss-web-extension-sdk.VSS.ready
    name: ready
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Register a callback that gets called once the initial setup/handshake has
      completed.

      If the initial setup is already completed, the callback is invoked at the
      end of the current call stack.
    syntax:
      content: 'function ready(callback: () => void)'
      parameters:
        - id: callback
          type:
            - () => void
          description: ''
    module: VSS
  - uid: vss-web-extension-sdk.VSS.register
    name: register
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Register an object (instance or factory method) that this extension
      exposes to the host frame.
    syntax:
      content: 'function register(instanceId: string, instance: Object)'
      parameters:
        - id: instanceId
          type:
            - string
          description: unique id of the registered object
        - id: instance
          type:
            - Object
          description: >
            Either: (1) an object instance, or (2) a function that takes
            optional context data and returns an object instance.
    module: VSS
  - uid: vss-web-extension-sdk.VSS.require
    name: require
    children: []
    type: function
    langs:
      - typeScript
    summary: >
      Ensures that the AMD loader from the host is configured and fetches a
      script (AMD) module

      (and its dependencies). If no callback is supplied, this will still
      perform an asynchronous

      fetch of the module (unlike AMD require which returns synchronously). This
      method has no return value.

      Usage:


      VSS.require(["VSS/Controls", "VSS/Controls/Grids"], function(Controls,
      Grids) {
         ...
      });
    syntax:
      content: 'function require(modules: function, callback?: Function)'
      parameters:
        - id: modules
          type:
            - function
          description: 'A single module path (string) or array of paths (string[])'
        - id: callback
          type:
            - Function
          description: |
            Method called once the modules have been loaded.
          optional: true
    module: VSS
  - uid: vss-web-extension-sdk.VSS.resize
    name: resize
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Requests the parent window to resize the container for this extension
      based on the current extension size.
    syntax:
      content: 'function resize(width?: number, height?: number)'
      parameters:
        - id: width
          type:
            - number
          description: 'Optional width, defaults to scrollWidth'
          optional: true
        - id: height
          type:
            - number
          description: |
            Optional height, defaults to scrollHeight
          optional: true
    module: VSS
  - uid: vss-web-extension-sdk.VSS.unregister
    name: unregister
    children: []
    type: function
    langs:
      - typeScript
    summary: Removes an object that this extension exposed to the host frame.
    syntax:
      content: 'function unregister(instanceId: string)'
      parameters:
        - id: instanceId
          type:
            - string
          description: |
            unique id of the registered object
    module: VSS
