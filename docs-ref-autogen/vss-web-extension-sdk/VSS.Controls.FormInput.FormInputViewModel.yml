### YamlMime:UniversalReference
items:
  - uid: vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel
    name: FormInputViewModel
    fullName: FormInputViewModel
    children:
      - >-
        vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.addInputsViewModel
      - >-
        vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.constructor
      - >-
        vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.inputsAreValid
      - vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.isDirty
      - >-
        vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.mapInputIdToComboControl
      - >-
        vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.onInputValuesChanged
      - >-
        vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.queryInputValues
    langs:
      - typeScript
    type: class
    summary: ''
    source:
      path: vss.d.ts
      startLine: 11800
      remote:
        path: typings\vss.d.ts
        repo: 'https://github.com/Microsoft/vss-web-extension-sdk.git'
        branch: master
    package: vss-web-extension-sdk
    module: VSS/Controls/FormInput
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.addInputsViewModel
    name: addInputsViewModel
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addInputsViewModel(key: string, inputsViewModel:
        InputsViewModel)
      parameters:
        - id: key
          type:
            - string
          description: ''
        - id: inputsViewModel
          type:
            - '@vss-web-extension-sdk.VSS.Controls.FormInput.InputsViewModel'
          description: ''
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.constructor
    name: FormInputViewModel
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new FormInputViewModel(dependentInputsLoadingCallback: any,
        dependentInputsLoadedCallback: any, inputValidChangedCallback: any,
        inputValuesChangedCallback: any, queryForValuesCallback?: any)
      parameters:
        - id: dependentInputsLoadingCallback
          type:
            - any
          description: ''
        - id: dependentInputsLoadedCallback
          type:
            - any
          description: ''
        - id: inputValidChangedCallback
          type:
            - any
          description: ''
        - id: inputValuesChangedCallback
          type:
            - any
          description: ''
        - id: queryForValuesCallback
          type:
            - any
          description: ''
          optional: true
    type: constructor
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.inputsAreValid
    name: inputsAreValid
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function inputsAreValid(inputsKey: string)'
      parameters:
        - id: inputsKey
          type:
            - string
          description: ''
      return:
        type:
          - boolean
    type: method
  - uid: vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.isDirty
    name: isDirty
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isDirty()
      parameters: []
      return:
        type:
          - boolean
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.mapInputIdToComboControl
    name: mapInputIdToComboControl
    fullName: mapInputIdToComboControl
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: '[key: string]: Combo mapInputIdToComboControl'
      return:
        type:
          - '[key: string]: @vss-web-extension-sdk.VSS.Controls.Combos.Combo'
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.onInputValuesChanged
    name: onInputValuesChanged
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onInputValuesChanged(inputViewModel: InputViewModel)'
      parameters:
        - id: inputViewModel
          type:
            - '@vss-web-extension-sdk.VSS.Controls.FormInput.InputViewModel'
          description: ''
    type: method
  - uid: >-
      vss-web-extension-sdk.VSS.Controls.FormInput.FormInputViewModel.queryInputValues
    name: queryInputValues
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function queryInputValues(inputsViewModel: InputsViewModel,
        inputsToQuery: InputViewModel[], callback: any, callbackContext: any)
      parameters:
        - id: inputsViewModel
          type:
            - '@vss-web-extension-sdk.VSS.Controls.FormInput.InputsViewModel'
          description: ''
        - id: inputsToQuery
          type:
            - '@vss-web-extension-sdk.VSS.Controls.FormInput.InputViewModel[]'
          description: ''
        - id: callback
          type:
            - any
          description: ''
        - id: callbackContext
          type:
            - any
          description: ''
    type: method
