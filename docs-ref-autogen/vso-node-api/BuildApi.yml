### YamlMime:UniversalReference
items:
  - uid: vso-node-api.BuildApi
    name: BuildApi
    fullName: BuildApi
    children:
      - vso-node-api.BuildApi.addBuildTag
      - vso-node-api.BuildApi.addBuildTags
      - vso-node-api.BuildApi.addDefinitionTag
      - vso-node-api.BuildApi.addDefinitionTags
      - vso-node-api.BuildApi.constructor
      - vso-node-api.BuildApi.createArtifact
      - vso-node-api.BuildApi.createDefinition
      - vso-node-api.BuildApi.createFolder
      - vso-node-api.BuildApi.deleteBuild
      - vso-node-api.BuildApi.deleteBuildTag
      - vso-node-api.BuildApi.deleteDefinition
      - vso-node-api.BuildApi.deleteDefinitionTag
      - vso-node-api.BuildApi.deleteFolder
      - vso-node-api.BuildApi.deleteTemplate
      - vso-node-api.BuildApi.getArtifact
      - vso-node-api.BuildApi.getArtifactContentZip
      - vso-node-api.BuildApi.getArtifacts
      - vso-node-api.BuildApi.getBadge
      - vso-node-api.BuildApi.getBuild
      - vso-node-api.BuildApi.getBuildBadge
      - vso-node-api.BuildApi.getBuildBadgeData
      - vso-node-api.BuildApi.getBuildChanges
      - vso-node-api.BuildApi.getBuildController
      - vso-node-api.BuildApi.getBuildControllers
      - vso-node-api.BuildApi.getBuildLog
      - vso-node-api.BuildApi.getBuildLogLines
      - vso-node-api.BuildApi.getBuildLogs
      - vso-node-api.BuildApi.getBuildLogsZip
      - vso-node-api.BuildApi.getBuildOptionDefinitions
      - vso-node-api.BuildApi.getBuildProperties
      - vso-node-api.BuildApi.getBuildReport
      - vso-node-api.BuildApi.getBuildReportHtmlContent
      - vso-node-api.BuildApi.getBuilds
      - vso-node-api.BuildApi.getBuildSettings
      - vso-node-api.BuildApi.getBuildTags
      - vso-node-api.BuildApi.getBuildTimeline
      - vso-node-api.BuildApi.getBuildWorkItemsRefs
      - vso-node-api.BuildApi.getBuildWorkItemsRefsFromCommits
      - vso-node-api.BuildApi.getChangesBetweenBuilds
      - vso-node-api.BuildApi.getDefinition
      - vso-node-api.BuildApi.getDefinitionMetrics
      - vso-node-api.BuildApi.getDefinitionProperties
      - vso-node-api.BuildApi.getDefinitionRevisions
      - vso-node-api.BuildApi.getDefinitions
      - vso-node-api.BuildApi.getDefinitionTags
      - vso-node-api.BuildApi.getFolders
      - vso-node-api.BuildApi.getProjectMetrics
      - vso-node-api.BuildApi.getResourceUsage
      - vso-node-api.BuildApi.getTags
      - vso-node-api.BuildApi.getTemplate
      - vso-node-api.BuildApi.getTemplates
      - vso-node-api.BuildApi.getWorkItemsBetweenBuilds
      - vso-node-api.BuildApi.queueBuild
      - vso-node-api.BuildApi.saveTemplate
      - vso-node-api.BuildApi.updateBuild
      - vso-node-api.BuildApi.updateBuildProperties
      - vso-node-api.BuildApi.updateBuilds
      - vso-node-api.BuildApi.updateBuildSettings
      - vso-node-api.BuildApi.updateDefinition
      - vso-node-api.BuildApi.updateDefinitionProperties
      - vso-node-api.BuildApi.updateFolder
    langs:
      - typeScript
    type: Class
    summary: ''
  - uid: vso-node-api.BuildApi.addBuildTag
    name: 'addBuildTag(project: string, buildId: number, tag: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: ''
        - id: tag
          type:
            - string
          description: |+

      content: 'function addBuildTag(project: string, buildId: number, tag: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.addBuildTags
    name: 'addBuildTags(tags: function, project: string, buildId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: tags
          type:
            - function
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: |+

      content: 'function addBuildTags(tags: function, project: string, buildId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.addDefinitionTag
    name: 'addDefinitionTag(project: string, definitionId: number, tag: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: ''
        - id: tag
          type:
            - string
          description: |+

      content: >-
        function addDefinitionTag(project: string, definitionId: number, tag:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.addDefinitionTags
    name: 'addDefinitionTags(tags: function, project: string, definitionId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: tags
          type:
            - function
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: |+

      content: >-
        function addDefinitionTags(tags: function, project: string,
        definitionId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.constructor
    name: 'BuildApi(baseUrl: string, handlers: function, options?: IRequestOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: baseUrl
          type:
            - string
          description: ''
        - id: handlers
          type:
            - function
          description: ''
        - id: options
          type:
            - IRequestOptions
          description: ''
          optional: true
      content: >-
        new BuildApi(baseUrl: string, handlers: function, options?:
        IRequestOptions)
      return:
        type:
          - vso-node-api.BuildApi
    type: constructor
  - uid: vso-node-api.BuildApi.createArtifact
    name: 'createArtifact(artifact: BuildArtifact, buildId: number, project?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: artifact
          type:
            - BuildArtifact
          description: ''
        - id: buildId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      content: >-
        function createArtifact(artifact: BuildArtifact, buildId: number,
        project?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.createDefinition
    name: >-
      createDefinition(definition: BuildDefinition, project?: string,
      definitionToCloneId?: number, definitionToCloneRevision?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: definition
          type:
            - BuildDefinition
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: definitionToCloneId
          type:
            - number
          description: ''
          optional: true
        - id: definitionToCloneRevision
          type:
            - number
          description: |+

          optional: true
      content: >-
        function createDefinition(definition: BuildDefinition, project?: string,
        definitionToCloneId?: number, definitionToCloneRevision?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.createFolder
    name: 'createFolder(folder: Folder, project: string, path: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: folder
          type:
            - Folder
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: path
          type:
            - string
          description: |+

      content: 'function createFolder(folder: Folder, project: string, path: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.deleteBuild
    name: 'deleteBuild(buildId: number, project?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: buildId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      content: 'function deleteBuild(buildId: number, project?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.deleteBuildTag
    name: 'deleteBuildTag(project: string, buildId: number, tag: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: ''
        - id: tag
          type:
            - string
          description: |+

      content: 'function deleteBuildTag(project: string, buildId: number, tag: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.deleteDefinition
    name: 'deleteDefinition(definitionId: number, project?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: definitionId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      content: 'function deleteDefinition(definitionId: number, project?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.deleteDefinitionTag
    name: 'deleteDefinitionTag(project: string, definitionId: number, tag: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: ''
        - id: tag
          type:
            - string
          description: |+

      content: >-
        function deleteDefinitionTag(project: string, definitionId: number, tag:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.deleteFolder
    name: 'deleteFolder(project: string, path: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: path
          type:
            - string
          description: |+

      content: 'function deleteFolder(project: string, path: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.deleteTemplate
    name: 'deleteTemplate(project: string, templateId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: templateId
          type:
            - string
          description: |+

      content: 'function deleteTemplate(project: string, templateId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getArtifact
    name: 'getArtifact(buildId: number, artifactName: string, project?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: buildId
          type:
            - number
          description: ''
        - id: artifactName
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      content: >-
        function getArtifact(buildId: number, artifactName: string, project?:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getArtifactContentZip
    name: >-
      getArtifactContentZip(buildId: number, artifactName: string, project?:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: buildId
          type:
            - number
          description: ''
        - id: artifactName
          type:
            - string
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      content: >-
        function getArtifactContentZip(buildId: number, artifactName: string,
        project?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getArtifacts
    name: 'getArtifacts(buildId: number, project?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: buildId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      content: 'function getArtifacts(buildId: number, project?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBadge
    name: 'getBadge(project: string, definitionId: number, branchName?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: ''
        - id: definitionId
          type:
            - number
          description: ''
        - id: branchName
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getBadge(project: string, definitionId: number, branchName?:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuild
    name: 'getBuild(buildId: number, project?: string, propertyFilters?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: buildId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: propertyFilters
          type:
            - string
          description: |
            A comma-delimited list of properties to include in the results
          optional: true
      content: >-
        function getBuild(buildId: number, project?: string, propertyFilters?:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildBadge
    name: >-
      getBuildBadge(project: string, repoType: string, repoId?: string,
      branchName?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repoType
          type:
            - string
          description: ''
        - id: repoId
          type:
            - string
          description: ''
          optional: true
        - id: branchName
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getBuildBadge(project: string, repoType: string, repoId?:
        string, branchName?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildBadgeData
    name: >-
      getBuildBadgeData(project: string, repoType: string, repoId?: string,
      branchName?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repoType
          type:
            - string
          description: ''
        - id: repoId
          type:
            - string
          description: ''
          optional: true
        - id: branchName
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getBuildBadgeData(project: string, repoType: string, repoId?:
        string, branchName?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildChanges
    name: >-
      getBuildChanges(project: string, buildId: number, continuationToken?:
      string, top?: number, includeSourceChange?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: ''
        - id: continuationToken
          type:
            - string
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: The maximum number of changes to return
          optional: true
        - id: includeSourceChange
          type:
            - boolean
          description: |+

          optional: true
      content: >-
        function getBuildChanges(project: string, buildId: number,
        continuationToken?: string, top?: number, includeSourceChange?: boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildController
    name: 'getBuildController(controllerId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: controllerId
          type:
            - number
          description: |+

      content: 'function getBuildController(controllerId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildControllers
    name: 'getBuildControllers(name?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: |+

          optional: true
      content: 'function getBuildControllers(name?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildLog
    name: >-
      getBuildLog(project: string, buildId: number, logId: number, startLine?:
      number, endLine?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: ''
        - id: logId
          type:
            - number
          description: ''
        - id: startLine
          type:
            - number
          description: ''
          optional: true
        - id: endLine
          type:
            - number
          description: |+

          optional: true
      content: >-
        function getBuildLog(project: string, buildId: number, logId: number,
        startLine?: number, endLine?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildLogLines
    name: >-
      getBuildLogLines(project: string, buildId: number, logId: number,
      startLine?: number, endLine?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: ''
        - id: logId
          type:
            - number
          description: ''
        - id: startLine
          type:
            - number
          description: ''
          optional: true
        - id: endLine
          type:
            - number
          description: |+

          optional: true
      content: >-
        function getBuildLogLines(project: string, buildId: number, logId:
        number, startLine?: number, endLine?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildLogs
    name: 'getBuildLogs(project: string, buildId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: |+

      content: 'function getBuildLogs(project: string, buildId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildLogsZip
    name: 'getBuildLogsZip(project: string, buildId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: |+

      content: 'function getBuildLogsZip(project: string, buildId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildOptionDefinitions
    name: 'getBuildOptionDefinitions(project?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      content: 'function getBuildOptionDefinitions(project?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildProperties
    name: 'getBuildProperties(project: string, buildId: number, filter?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: The build id.
        - id: filter
          type:
            - function
          description: |
            Filter to specific properties. Defaults to all properties.
          optional: true
      content: >-
        function getBuildProperties(project: string, buildId: number, filter?:
        function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildReport
    name: 'getBuildReport(project: string, buildId: number, type?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: ''
        - id: type
          type:
            - string
          description: |+

          optional: true
      content: 'function getBuildReport(project: string, buildId: number, type?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildReportHtmlContent
    name: 'getBuildReportHtmlContent(project: string, buildId: number, type?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: ''
        - id: type
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getBuildReportHtmlContent(project: string, buildId: number,
        type?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuilds
    name: >-
      getBuilds(project?: string, definitions?: function, queues?: function,
      buildNumber?: string, minFinishTime?: Date, maxFinishTime?: Date,
      requestedFor?: string, reasonFilter?: function, statusFilter?: function,
      resultFilter?: function, tagFilters?: function, properties?: function,
      top?: number, continuationToken?: string, maxBuildsPerDefinition?: number,
      deletedFilter?: function, queryOrder?: function, branchName?: string,
      buildIds?: function, repositoryId?: string, repositoryType?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: definitions
          type:
            - function
          description: A comma-delimited list of definition ids
          optional: true
        - id: queues
          type:
            - function
          description: A comma-delimited list of queue ids
          optional: true
        - id: buildNumber
          type:
            - string
          description: ''
          optional: true
        - id: minFinishTime
          type:
            - Date
          description: ''
          optional: true
        - id: maxFinishTime
          type:
            - Date
          description: ''
          optional: true
        - id: requestedFor
          type:
            - string
          description: ''
          optional: true
        - id: reasonFilter
          type:
            - function
          description: ''
          optional: true
        - id: statusFilter
          type:
            - function
          description: ''
          optional: true
        - id: resultFilter
          type:
            - function
          description: ''
          optional: true
        - id: tagFilters
          type:
            - function
          description: A comma-delimited list of tags
          optional: true
        - id: properties
          type:
            - function
          description: A comma-delimited list of properties to include in the results
          optional: true
        - id: top
          type:
            - number
          description: The maximum number of builds to retrieve
          optional: true
        - id: continuationToken
          type:
            - string
          description: ''
          optional: true
        - id: maxBuildsPerDefinition
          type:
            - number
          description: ''
          optional: true
        - id: deletedFilter
          type:
            - function
          description: ''
          optional: true
        - id: queryOrder
          type:
            - function
          description: ''
          optional: true
        - id: branchName
          type:
            - string
          description: ''
          optional: true
        - id: buildIds
          type:
            - function
          description: ''
          optional: true
        - id: repositoryId
          type:
            - string
          description: ''
          optional: true
        - id: repositoryType
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getBuilds(project?: string, definitions?: function, queues?:
        function, buildNumber?: string, minFinishTime?: Date, maxFinishTime?:
        Date, requestedFor?: string, reasonFilter?: function, statusFilter?:
        function, resultFilter?: function, tagFilters?: function, properties?:
        function, top?: number, continuationToken?: string,
        maxBuildsPerDefinition?: number, deletedFilter?: function, queryOrder?:
        function, branchName?: string, buildIds?: function, repositoryId?:
        string, repositoryType?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildSettings
    name: getBuildSettings()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getBuildSettings()
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildTags
    name: 'getBuildTags(project: string, buildId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: |+

      content: 'function getBuildTags(project: string, buildId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildTimeline
    name: >-
      getBuildTimeline(project: string, buildId: number, timelineId?: string,
      changeId?: number, planId?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: ''
        - id: timelineId
          type:
            - string
          description: ''
          optional: true
        - id: changeId
          type:
            - number
          description: ''
          optional: true
        - id: planId
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getBuildTimeline(project: string, buildId: number, timelineId?:
        string, changeId?: number, planId?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildWorkItemsRefs
    name: 'getBuildWorkItemsRefs(project: string, buildId: number, top?: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: ''
        - id: top
          type:
            - number
          description: |
            The maximum number of workitems to return
          optional: true
      content: >-
        function getBuildWorkItemsRefs(project: string, buildId: number, top?:
        number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getBuildWorkItemsRefsFromCommits
    name: >-
      getBuildWorkItemsRefsFromCommits(commitIds: function, project: string,
      buildId: number, top?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: commitIds
          type:
            - function
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: ''
        - id: top
          type:
            - number
          description: >
            The maximum number of workitems to return, also number of commits to
            consider if commitids are not sent
          optional: true
      content: >-
        function getBuildWorkItemsRefsFromCommits(commitIds: function, project:
        string, buildId: number, top?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getChangesBetweenBuilds
    name: >-
      getChangesBetweenBuilds(project: string, fromBuildId?: number, toBuildId?:
      number, top?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: fromBuildId
          type:
            - number
          description: ''
          optional: true
        - id: toBuildId
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: |
            The maximum number of changes to return
          optional: true
      content: >-
        function getChangesBetweenBuilds(project: string, fromBuildId?: number,
        toBuildId?: number, top?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getDefinition
    name: >-
      getDefinition(definitionId: number, project?: string, revision?: number,
      minMetricsTime?: Date, propertyFilters?: function, includeLatestBuilds?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: definitionId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: revision
          type:
            - number
          description: ''
          optional: true
        - id: minMetricsTime
          type:
            - Date
          description: ''
          optional: true
        - id: propertyFilters
          type:
            - function
          description: ''
          optional: true
        - id: includeLatestBuilds
          type:
            - boolean
          description: |+

          optional: true
      content: >-
        function getDefinition(definitionId: number, project?: string,
        revision?: number, minMetricsTime?: Date, propertyFilters?: function,
        includeLatestBuilds?: boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getDefinitionMetrics
    name: >-
      getDefinitionMetrics(project: string, definitionId: number,
      minMetricsTime?: Date)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: ''
        - id: minMetricsTime
          type:
            - Date
          description: |+

          optional: true
      content: >-
        function getDefinitionMetrics(project: string, definitionId: number,
        minMetricsTime?: Date)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getDefinitionProperties
    name: >-
      getDefinitionProperties(project: string, definitionId: number, filter?:
      function)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: The definition id.
        - id: filter
          type:
            - function
          description: |
            Filter to specific properties. Defaults to all properties.
          optional: true
      content: >-
        function getDefinitionProperties(project: string, definitionId: number,
        filter?: function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getDefinitionRevisions
    name: 'getDefinitionRevisions(project: string, definitionId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: |+

      content: 'function getDefinitionRevisions(project: string, definitionId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getDefinitions
    name: >-
      getDefinitions(project?: string, name?: string, repositoryId?: string,
      repositoryType?: string, queryOrder?: function, top?: number,
      continuationToken?: string, minMetricsTime?: Date, definitionIds?:
      function, path?: string, builtAfter?: Date, notBuiltAfter?: Date,
      includeAllProperties?: boolean, includeLatestBuilds?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: name
          type:
            - string
          description: ''
          optional: true
        - id: repositoryId
          type:
            - string
          description: ''
          optional: true
        - id: repositoryType
          type:
            - string
          description: ''
          optional: true
        - id: queryOrder
          type:
            - function
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: continuationToken
          type:
            - string
          description: ''
          optional: true
        - id: minMetricsTime
          type:
            - Date
          description: ''
          optional: true
        - id: definitionIds
          type:
            - function
          description: ''
          optional: true
        - id: path
          type:
            - string
          description: ''
          optional: true
        - id: builtAfter
          type:
            - Date
          description: ''
          optional: true
        - id: notBuiltAfter
          type:
            - Date
          description: ''
          optional: true
        - id: includeAllProperties
          type:
            - boolean
          description: ''
          optional: true
        - id: includeLatestBuilds
          type:
            - boolean
          description: |+

          optional: true
      content: >-
        function getDefinitions(project?: string, name?: string, repositoryId?:
        string, repositoryType?: string, queryOrder?: function, top?: number,
        continuationToken?: string, minMetricsTime?: Date, definitionIds?:
        function, path?: string, builtAfter?: Date, notBuiltAfter?: Date,
        includeAllProperties?: boolean, includeLatestBuilds?: boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getDefinitionTags
    name: >-
      getDefinitionTags(project: string, definitionId: number, revision?:
      number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: ''
        - id: revision
          type:
            - number
          description: |+

          optional: true
      content: >-
        function getDefinitionTags(project: string, definitionId: number,
        revision?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getFolders
    name: 'getFolders(project: string, path?: string, queryOrder?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: path
          type:
            - string
          description: ''
          optional: true
        - id: queryOrder
          type:
            - function
          description: |+

          optional: true
      content: >-
        function getFolders(project: string, path?: string, queryOrder?:
        function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getProjectMetrics
    name: >-
      getProjectMetrics(project: string, metricAggregationType?: string,
      minMetricsTime?: Date)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: metricAggregationType
          type:
            - string
          description: ''
          optional: true
        - id: minMetricsTime
          type:
            - Date
          description: |+

          optional: true
      content: >-
        function getProjectMetrics(project: string, metricAggregationType?:
        string, minMetricsTime?: Date)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getResourceUsage
    name: getResourceUsage()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getResourceUsage()
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getTags
    name: 'getTags(project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: 'function getTags(project: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getTemplate
    name: 'getTemplate(project: string, templateId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: templateId
          type:
            - string
          description: |
            Id of the requested template.
      content: 'function getTemplate(project: string, templateId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getTemplates
    name: 'getTemplates(project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: 'function getTemplates(project: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.getWorkItemsBetweenBuilds
    name: >-
      getWorkItemsBetweenBuilds(project: string, fromBuildId: number, toBuildId:
      number, top?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: fromBuildId
          type:
            - number
          description: ''
        - id: toBuildId
          type:
            - number
          description: ''
        - id: top
          type:
            - number
          description: |
            The maximum number of workitems to return
          optional: true
      content: >-
        function getWorkItemsBetweenBuilds(project: string, fromBuildId: number,
        toBuildId: number, top?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.queueBuild
    name: >-
      queueBuild(build: Build, project?: string, ignoreWarnings?: boolean,
      checkInTicket?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: build
          type:
            - Build
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: ignoreWarnings
          type:
            - boolean
          description: ''
          optional: true
        - id: checkInTicket
          type:
            - string
          description: |+

          optional: true
      content: >-
        function queueBuild(build: Build, project?: string, ignoreWarnings?:
        boolean, checkInTicket?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.saveTemplate
    name: >-
      saveTemplate(template: BuildDefinitionTemplate, project: string,
      templateId: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: template
          type:
            - BuildDefinitionTemplate
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: templateId
          type:
            - string
          description: |+

      content: >-
        function saveTemplate(template: BuildDefinitionTemplate, project:
        string, templateId: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.updateBuild
    name: 'updateBuild(build: Build, buildId: number, project?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: build
          type:
            - Build
          description: ''
        - id: buildId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      content: 'function updateBuild(build: Build, buildId: number, project?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.updateBuildProperties
    name: >-
      updateBuildProperties(customHeaders: any, document: JsonPatchDocument,
      project: string, buildId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: customHeaders
          type:
            - any
          description: ''
        - id: document
          type:
            - JsonPatchDocument
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: |
            The build id.
      content: >-
        function updateBuildProperties(customHeaders: any, document:
        JsonPatchDocument, project: string, buildId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.updateBuilds
    name: 'updateBuilds(builds: function, project?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: builds
          type:
            - function
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      content: 'function updateBuilds(builds: function, project?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.updateBuildSettings
    name: 'updateBuildSettings(settings: BuildSettings)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: settings
          type:
            - BuildSettings
          description: |+

      content: 'function updateBuildSettings(settings: BuildSettings)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.updateDefinition
    name: >-
      updateDefinition(definition: BuildDefinition, definitionId: number,
      project?: string, secretsSourceDefinitionId?: number,
      secretsSourceDefinitionRevision?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: definition
          type:
            - BuildDefinition
          description: ''
        - id: definitionId
          type:
            - number
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: secretsSourceDefinitionId
          type:
            - number
          description: ''
          optional: true
        - id: secretsSourceDefinitionRevision
          type:
            - number
          description: |+

          optional: true
      content: >-
        function updateDefinition(definition: BuildDefinition, definitionId:
        number, project?: string, secretsSourceDefinitionId?: number,
        secretsSourceDefinitionRevision?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.updateDefinitionProperties
    name: >-
      updateDefinitionProperties(customHeaders: any, document:
      JsonPatchDocument, project: string, definitionId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: customHeaders
          type:
            - any
          description: ''
        - id: document
          type:
            - JsonPatchDocument
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: |
            The definition id.
      content: >-
        function updateDefinitionProperties(customHeaders: any, document:
        JsonPatchDocument, project: string, definitionId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.BuildApi.updateFolder
    name: 'updateFolder(folder: Folder, project: string, path: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: folder
          type:
            - Folder
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: path
          type:
            - string
          description: |+

      content: 'function updateFolder(folder: Folder, project: string, path: string)'
      return:
        type:
          - Promise
    type: method
