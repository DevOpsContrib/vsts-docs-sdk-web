### YamlMime:UniversalReference
items:
  - uid: vso-node-api.CoreApi
    name: CoreApi
    fullName: CoreApi
    children:
      - vso-node-api.CoreApi.constructor
      - vso-node-api.CoreApi.createConnectedService
      - vso-node-api.CoreApi.createIdentityMru
      - vso-node-api.CoreApi.createOrUpdateProxy
      - vso-node-api.CoreApi.createTeam
      - vso-node-api.CoreApi.deleteIdentityMru
      - vso-node-api.CoreApi.deleteProxy
      - vso-node-api.CoreApi.deleteTeam
      - vso-node-api.CoreApi.getConnectedServiceDetails
      - vso-node-api.CoreApi.getConnectedServices
      - vso-node-api.CoreApi.getIdentityMru
      - vso-node-api.CoreApi.getProcessById
      - vso-node-api.CoreApi.getProcesses
      - vso-node-api.CoreApi.getProject
      - vso-node-api.CoreApi.getProjectCollection
      - vso-node-api.CoreApi.getProjectCollections
      - vso-node-api.CoreApi.getProjectHistory
      - vso-node-api.CoreApi.getProjects
      - vso-node-api.CoreApi.getProxies
      - vso-node-api.CoreApi.getTeam
      - vso-node-api.CoreApi.getTeamMembers
      - vso-node-api.CoreApi.getTeams
      - vso-node-api.CoreApi.queueCreateProject
      - vso-node-api.CoreApi.queueDeleteProject
      - vso-node-api.CoreApi.updateIdentityMru
      - vso-node-api.CoreApi.updateProject
      - vso-node-api.CoreApi.updateTeam
    langs:
      - typeScript
    type: Class
    summary: ''
  - uid: vso-node-api.CoreApi.constructor
    name: 'CoreApi(baseUrl: string, handlers: function, options?: IRequestOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: baseUrl
          type:
            - string
          description: ''
        - id: handlers
          type:
            - function
          description: ''
        - id: options
          type:
            - IRequestOptions
          description: ''
          optional: true
      content: >-
        new CoreApi(baseUrl: string, handlers: function, options?:
        IRequestOptions)
      return:
        type:
          - vso-node-api.CoreApi
    type: constructor
  - uid: vso-node-api.CoreApi.createConnectedService
    name: >-
      createConnectedService(connectedServiceCreationData:
      WebApiConnectedServiceDetails, projectId: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: connectedServiceCreationData
          type:
            - WebApiConnectedServiceDetails
          description: ''
        - id: projectId
          type:
            - string
          description: |+

      content: >-
        function createConnectedService(connectedServiceCreationData:
        WebApiConnectedServiceDetails, projectId: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.createIdentityMru
    name: 'createIdentityMru(mruData: IdentityData, mruName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: mruData
          type:
            - IdentityData
          description: ''
        - id: mruName
          type:
            - string
          description: |+

      content: 'function createIdentityMru(mruData: IdentityData, mruName: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.createOrUpdateProxy
    name: 'createOrUpdateProxy(proxy: Proxy)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: proxy
          type:
            - Proxy
          description: |+

      content: 'function createOrUpdateProxy(proxy: Proxy)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.createTeam
    name: 'createTeam(team: WebApiTeam, projectId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: team
          type:
            - WebApiTeam
          description: The team data used to create the team.
        - id: projectId
          type:
            - string
          description: >
            The name or id (GUID) of the team project in which to create the
            team.
      content: 'function createTeam(team: WebApiTeam, projectId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.deleteIdentityMru
    name: 'deleteIdentityMru(mruData: IdentityData, mruName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: mruData
          type:
            - IdentityData
          description: ''
        - id: mruName
          type:
            - string
          description: |+

      content: 'function deleteIdentityMru(mruData: IdentityData, mruName: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.deleteProxy
    name: 'deleteProxy(proxyUrl: string, site?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: proxyUrl
          type:
            - string
          description: ''
        - id: site
          type:
            - string
          description: |+

          optional: true
      content: 'function deleteProxy(proxyUrl: string, site?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.deleteTeam
    name: 'deleteTeam(projectId: string, teamId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: >-
            The name or id (GUID) of the team project containing the team to
            delete.
        - id: teamId
          type:
            - string
          description: |
            The name of id of the team to delete.
      content: 'function deleteTeam(projectId: string, teamId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getConnectedServiceDetails
    name: 'getConnectedServiceDetails(projectId: string, name: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: ''
        - id: name
          type:
            - string
          description: |+

      content: 'function getConnectedServiceDetails(projectId: string, name: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getConnectedServices
    name: 'getConnectedServices(projectId: string, kind?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: ''
        - id: kind
          type:
            - function
          description: |+

          optional: true
      content: 'function getConnectedServices(projectId: string, kind?: function)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getIdentityMru
    name: 'getIdentityMru(mruName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: mruName
          type:
            - string
          description: |+

      content: 'function getIdentityMru(mruName: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getProcessById
    name: 'getProcessById(processId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: processId
          type:
            - string
          description: |+

      content: 'function getProcessById(processId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getProcesses
    name: getProcesses()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getProcesses()
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getProject
    name: >-
      getProject(projectId: string, includeCapabilities?: boolean,
      includeHistory?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: ''
        - id: includeCapabilities
          type:
            - boolean
          description: >-
            Include capabilities (such as source control) in the team project
            result (default: false).
          optional: true
        - id: includeHistory
          type:
            - boolean
          description: |
            Search within renamed projects (that had such name in the past).
          optional: true
      content: >-
        function getProject(projectId: string, includeCapabilities?: boolean,
        includeHistory?: boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getProjectCollection
    name: 'getProjectCollection(collectionId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: collectionId
          type:
            - string
          description: |+

      content: 'function getProjectCollection(collectionId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getProjectCollections
    name: 'getProjectCollections(top?: number, skip?: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: |+

          optional: true
      content: 'function getProjectCollections(top?: number, skip?: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getProjectHistory
    name: 'getProjectHistory(minRevision?: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: minRevision
          type:
            - number
          description: |+

          optional: true
      content: 'function getProjectHistory(minRevision?: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getProjects
    name: 'getProjects(stateFilter?: any, top?: number, skip?: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: stateFilter
          type:
            - any
          description: >-
            Filter on team projects in a specific team project state (default:
            WellFormed).
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: |+

          optional: true
      content: 'function getProjects(stateFilter?: any, top?: number, skip?: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getProxies
    name: 'getProxies(proxyUrl?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: proxyUrl
          type:
            - string
          description: |+

          optional: true
      content: 'function getProxies(proxyUrl?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getTeam
    name: 'getTeam(projectId: string, teamId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: ''
        - id: teamId
          type:
            - string
          description: |+

      content: 'function getTeam(projectId: string, teamId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getTeamMembers
    name: >-
      getTeamMembers(projectId: string, teamId: string, top?: number, skip?:
      number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: ''
        - id: teamId
          type:
            - string
          description: ''
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: |+

          optional: true
      content: >-
        function getTeamMembers(projectId: string, teamId: string, top?: number,
        skip?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.getTeams
    name: 'getTeams(projectId: string, top?: number, skip?: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: ''
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: skip
          type:
            - number
          description: |+

          optional: true
      content: 'function getTeams(projectId: string, top?: number, skip?: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.queueCreateProject
    name: 'queueCreateProject(projectToCreate: TeamProject)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectToCreate
          type:
            - TeamProject
          description: |
            The project to create.
      content: 'function queueCreateProject(projectToCreate: TeamProject)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.queueDeleteProject
    name: 'queueDeleteProject(projectId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectId
          type:
            - string
          description: |
            The project id of the project to delete.
      content: 'function queueDeleteProject(projectId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.updateIdentityMru
    name: 'updateIdentityMru(mruData: IdentityData, mruName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: mruData
          type:
            - IdentityData
          description: ''
        - id: mruName
          type:
            - string
          description: |+

      content: 'function updateIdentityMru(mruData: IdentityData, mruName: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.updateProject
    name: 'updateProject(projectUpdate: TeamProject, projectId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: projectUpdate
          type:
            - TeamProject
          description: The updates for the project.
        - id: projectId
          type:
            - string
          description: |
            The project id of the project to update.
      content: 'function updateProject(projectUpdate: TeamProject, projectId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.CoreApi.updateTeam
    name: 'updateTeam(teamData: WebApiTeam, projectId: string, teamId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamData
          type:
            - WebApiTeam
          description: ''
        - id: projectId
          type:
            - string
          description: >-
            The name or id (GUID) of the team project containing the team to
            update.
        - id: teamId
          type:
            - string
          description: |
            The name of id of the team to update.
      content: >-
        function updateTeam(teamData: WebApiTeam, projectId: string, teamId:
        string)
      return:
        type:
          - Promise
    type: method
