### YamlMime:UniversalReference
items:
  - uid: vso-node-api.ProfileApi
    name: ProfileApi
    fullName: ProfileApi
    children:
      - vso-node-api.ProfileApi.createProfile
      - vso-node-api.ProfileApi.deleteProfileAttribute
      - vso-node-api.ProfileApi.getAvatar
      - vso-node-api.ProfileApi.getAvatarPreview
      - vso-node-api.ProfileApi.getGeoRegion
      - vso-node-api.ProfileApi.getProfile
      - vso-node-api.ProfileApi.getProfileAttribute
      - vso-node-api.ProfileApi.getProfileAttributes
      - vso-node-api.ProfileApi.getRegions
      - vso-node-api.ProfileApi.getSupportedLcids
      - vso-node-api.ProfileApi.getUserDefaults
      - vso-node-api.ProfileApi.constructor
      - vso-node-api.ProfileApi.refreshUserDefaults
      - vso-node-api.ProfileApi.resetAvatar
      - vso-node-api.ProfileApi.setAvatar
      - vso-node-api.ProfileApi.setProfileAttribute
      - vso-node-api.ProfileApi.setProfileAttributes
      - vso-node-api.ProfileApi.updateProfile
    langs:
      - typeScript
    type: Class
    summary: ''
  - uid: vso-node-api.ProfileApi.createProfile
    name: >-
      createProfile(createProfileContext: CreateProfileContext, autoCreate?:
      boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: createProfileContext
          type:
            - CreateProfileContext
          description: Context for profile creation
        - id: autoCreate
          type:
            - boolean
          description: |
            Create profile automatically
          optional: true
      content: >-
        function createProfile(createProfileContext: CreateProfileContext,
        autoCreate?: boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.deleteProfileAttribute
    name: 'deleteProfileAttribute(id: string, descriptor: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: id
          type:
            - string
          description: ''
        - id: descriptor
          type:
            - string
          description: |+

      content: 'function deleteProfileAttribute(id: string, descriptor: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.getAvatar
    name: 'getAvatar(id: string, size?: string, format?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: id
          type:
            - string
          description: ''
        - id: size
          type:
            - string
          description: ''
          optional: true
        - id: format
          type:
            - string
          description: |+

          optional: true
      content: 'function getAvatar(id: string, size?: string, format?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.getAvatarPreview
    name: >-
      getAvatarPreview(container: any, id: string, size?: string, format?:
      string, displayName?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: container
          type:
            - any
          description: ''
        - id: id
          type:
            - string
          description: ''
        - id: size
          type:
            - string
          description: ''
          optional: true
        - id: format
          type:
            - string
          description: ''
          optional: true
        - id: displayName
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getAvatarPreview(container: any, id: string, size?: string,
        format?: string, displayName?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.getGeoRegion
    name: 'getGeoRegion(ipaddress: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: ipaddress
          type:
            - string
          description: >
            IPv4 address to be used for reverse lookup, null if using
            RemoteIPAddress in request context
      content: 'function getGeoRegion(ipaddress: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.getProfile
    name: >-
      getProfile(id: string, details?: boolean, withAttributes?: boolean,
      partition?: string, coreAttributes?: string, forceRefresh?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: id
          type:
            - string
          description: ''
        - id: details
          type:
            - boolean
          description: ''
          optional: true
        - id: withAttributes
          type:
            - boolean
          description: ''
          optional: true
        - id: partition
          type:
            - string
          description: ''
          optional: true
        - id: coreAttributes
          type:
            - string
          description: ''
          optional: true
        - id: forceRefresh
          type:
            - boolean
          description: |+

          optional: true
      content: >-
        function getProfile(id: string, details?: boolean, withAttributes?:
        boolean, partition?: string, coreAttributes?: string, forceRefresh?:
        boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.getProfileAttribute
    name: 'getProfileAttribute(id: string, descriptor: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: id
          type:
            - string
          description: ''
        - id: descriptor
          type:
            - string
          description: |+

      content: 'function getProfileAttribute(id: string, descriptor: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.getProfileAttributes
    name: >-
      getProfileAttributes(id: string, partition: string, modifiedSince?:
      string, modifiedAfterRevision?: string, withCoreAttributes?: boolean,
      coreAttributes?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: id
          type:
            - string
          description: ''
        - id: partition
          type:
            - string
          description: ''
        - id: modifiedSince
          type:
            - string
          description: ''
          optional: true
        - id: modifiedAfterRevision
          type:
            - string
          description: ''
          optional: true
        - id: withCoreAttributes
          type:
            - boolean
          description: ''
          optional: true
        - id: coreAttributes
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getProfileAttributes(id: string, partition: string,
        modifiedSince?: string, modifiedAfterRevision?: string,
        withCoreAttributes?: boolean, coreAttributes?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.getRegions
    name: getRegions()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getRegions()
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.getSupportedLcids
    name: getSupportedLcids()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSupportedLcids()
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.getUserDefaults
    name: 'getUserDefaults(includeAvatar?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: includeAvatar
          type:
            - boolean
          description: |+

          optional: true
      content: 'function getUserDefaults(includeAvatar?: boolean)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.constructor
    name: 'ProfileApi(baseUrl: string, handlers: function, options?: IRequestOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: baseUrl
          type:
            - string
          description: ''
        - id: handlers
          type:
            - function
          description: ''
        - id: options
          type:
            - IRequestOptions
          description: ''
          optional: true
      content: >-
        new ProfileApi(baseUrl: string, handlers: function, options?:
        IRequestOptions)
      return:
        type:
          - vso-node-api.ProfileApi
    type: constructor
  - uid: vso-node-api.ProfileApi.refreshUserDefaults
    name: 'refreshUserDefaults(id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: id
          type:
            - string
          description: |+

      content: 'function refreshUserDefaults(id: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.resetAvatar
    name: 'resetAvatar(id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: id
          type:
            - string
          description: |+

      content: 'function resetAvatar(id: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.setAvatar
    name: 'setAvatar(container: any, id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: container
          type:
            - any
          description: ''
        - id: id
          type:
            - string
          description: |+

      content: 'function setAvatar(container: any, id: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.setProfileAttribute
    name: 'setProfileAttribute(container: any, id: string, descriptor: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: container
          type:
            - any
          description: ''
        - id: id
          type:
            - string
          description: ''
        - id: descriptor
          type:
            - string
          description: |+

      content: >-
        function setProfileAttribute(container: any, id: string, descriptor:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.setProfileAttributes
    name: >-
      setProfileAttributes(attributesCollection: VssJsonCollectionWrapperV, id:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: attributesCollection
          type:
            - VssJsonCollectionWrapperV
          description: ''
        - id: id
          type:
            - string
          description: |+

      content: >-
        function setProfileAttributes(attributesCollection:
        VssJsonCollectionWrapperV, id: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ProfileApi.updateProfile
    name: 'updateProfile(profile: Profile, id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: profile
          type:
            - Profile
          description: Update profile
        - id: id
          type:
            - string
          description: |
            Profile ID
      content: 'function updateProfile(profile: Profile, id: string)'
      return:
        type:
          - Promise
    type: method
