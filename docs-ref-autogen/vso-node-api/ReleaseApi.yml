### YamlMime:UniversalReference
items:
  - uid: vso-node-api.ReleaseApi
    name: ReleaseApi
    fullName: ReleaseApi
    children:
      - vso-node-api.ReleaseApi.addDefinitionTag
      - vso-node-api.ReleaseApi.addDefinitionTags
      - vso-node-api.ReleaseApi.addReleaseTag
      - vso-node-api.ReleaseApi.addReleaseTags
      - vso-node-api.ReleaseApi.createDefinitionEnvironmentTemplate
      - vso-node-api.ReleaseApi.createFavorites
      - vso-node-api.ReleaseApi.createFolder
      - vso-node-api.ReleaseApi.createRelease
      - vso-node-api.ReleaseApi.createReleaseDefinition
      - vso-node-api.ReleaseApi.deleteDefinitionEnvironmentTemplate
      - vso-node-api.ReleaseApi.deleteDefinitionTag
      - vso-node-api.ReleaseApi.deleteFavorites
      - vso-node-api.ReleaseApi.deleteFolder
      - vso-node-api.ReleaseApi.deleteRelease
      - vso-node-api.ReleaseApi.deleteReleaseDefinition
      - vso-node-api.ReleaseApi.deleteReleaseTag
      - vso-node-api.ReleaseApi.getAgentArtifactDefinitions
      - vso-node-api.ReleaseApi.getApproval
      - vso-node-api.ReleaseApi.getApprovalHistory
      - vso-node-api.ReleaseApi.getApprovals
      - vso-node-api.ReleaseApi.getArtifactTypeDefinitions
      - vso-node-api.ReleaseApi.getArtifactVersions
      - vso-node-api.ReleaseApi.getArtifactVersionsForSources
      - vso-node-api.ReleaseApi.getDefinitionEnvironments
      - vso-node-api.ReleaseApi.getDefinitionEnvironmentTemplate
      - vso-node-api.ReleaseApi.getDefinitionRevision
      - vso-node-api.ReleaseApi.getDefinitionTags
      - vso-node-api.ReleaseApi.getDeployments
      - vso-node-api.ReleaseApi.getDeploymentsForMultipleEnvironments
      - vso-node-api.ReleaseApi.getFavorites
      - vso-node-api.ReleaseApi.getFolders
      - vso-node-api.ReleaseApi.getInputValues
      - vso-node-api.ReleaseApi.getIssues
      - vso-node-api.ReleaseApi.getLog
      - vso-node-api.ReleaseApi.getLogs
      - vso-node-api.ReleaseApi.getManualIntervention
      - vso-node-api.ReleaseApi.getManualInterventions
      - vso-node-api.ReleaseApi.getMetrics
      - vso-node-api.ReleaseApi.getRelease
      - vso-node-api.ReleaseApi.getReleaseChanges
      - vso-node-api.ReleaseApi.getReleaseDefinition
      - vso-node-api.ReleaseApi.getReleaseDefinitionHistory
      - vso-node-api.ReleaseApi.getReleaseDefinitionRevision
      - vso-node-api.ReleaseApi.getReleaseDefinitions
      - vso-node-api.ReleaseApi.getReleaseDefinitionsForArtifactSource
      - vso-node-api.ReleaseApi.getReleaseDefinitionSummary
      - vso-node-api.ReleaseApi.getReleaseEnvironment
      - vso-node-api.ReleaseApi.getReleaseHistory
      - vso-node-api.ReleaseApi.getReleaseProjects
      - vso-node-api.ReleaseApi.getReleaseRevision
      - vso-node-api.ReleaseApi.getReleases
      - vso-node-api.ReleaseApi.getReleaseSettings
      - vso-node-api.ReleaseApi.getReleaseTags
      - vso-node-api.ReleaseApi.getReleaseWorkItemsRefs
      - vso-node-api.ReleaseApi.getSourceBranches
      - vso-node-api.ReleaseApi.getSummaryMailSections
      - vso-node-api.ReleaseApi.getTags
      - vso-node-api.ReleaseApi.getTaskLog
      - vso-node-api.ReleaseApi.getTasks
      - vso-node-api.ReleaseApi.getTasksForTaskGroup
      - vso-node-api.ReleaseApi.listDefinitionEnvironmentTemplates
      - vso-node-api.ReleaseApi.constructor
      - vso-node-api.ReleaseApi.sendSummaryMail
      - vso-node-api.ReleaseApi.setupContinuousDeployment
      - vso-node-api.ReleaseApi.undeleteRelease
      - vso-node-api.ReleaseApi.updateFolder
      - vso-node-api.ReleaseApi.updateManualIntervention
      - vso-node-api.ReleaseApi.updateRelease
      - vso-node-api.ReleaseApi.updateReleaseApproval
      - vso-node-api.ReleaseApi.updateReleaseDefinition
      - vso-node-api.ReleaseApi.updateReleaseEnvironment
      - vso-node-api.ReleaseApi.updateReleaseResource
      - vso-node-api.ReleaseApi.updateReleaseSettings
    langs:
      - typeScript
    type: Class
    summary: ''
  - uid: vso-node-api.ReleaseApi.addDefinitionTag
    name: >-
      addDefinitionTag(project: string, releaseDefinitionId: number, tag:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseDefinitionId
          type:
            - number
          description: ''
        - id: tag
          type:
            - string
          description: |+

      content: >-
        function addDefinitionTag(project: string, releaseDefinitionId: number,
        tag: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.addDefinitionTags
    name: >-
      addDefinitionTags(tags: function, project: string, releaseDefinitionId:
      number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: tags
          type:
            - function
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseDefinitionId
          type:
            - number
          description: |+

      content: >-
        function addDefinitionTags(tags: function, project: string,
        releaseDefinitionId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.addReleaseTag
    name: 'addReleaseTag(project: string, releaseId: number, tag: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: tag
          type:
            - string
          description: |+

      content: 'function addReleaseTag(project: string, releaseId: number, tag: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.addReleaseTags
    name: 'addReleaseTags(tags: function, project: string, releaseId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: tags
          type:
            - function
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: |+

      content: >-
        function addReleaseTags(tags: function, project: string, releaseId:
        number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.createDefinitionEnvironmentTemplate
    name: >-
      createDefinitionEnvironmentTemplate(template:
      ReleaseDefinitionEnvironmentTemplate, project: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: template
          type:
            - ReleaseDefinitionEnvironmentTemplate
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: >-
        function createDefinitionEnvironmentTemplate(template:
        ReleaseDefinitionEnvironmentTemplate, project: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.createFavorites
    name: >-
      createFavorites(favoriteItems: function, project: string, scope: string,
      identityId?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: favoriteItems
          type:
            - function
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: scope
          type:
            - string
          description: ''
        - id: identityId
          type:
            - string
          description: |+

          optional: true
      content: >-
        function createFavorites(favoriteItems: function, project: string,
        scope: string, identityId?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.createFolder
    name: 'createFolder(folder: Folder, project: string, path: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: folder
          type:
            - Folder
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: path
          type:
            - string
          description: |+

      content: 'function createFolder(folder: Folder, project: string, path: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.createRelease
    name: 'createRelease(releaseStartMetadata: ReleaseStartMetadata, project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: releaseStartMetadata
          type:
            - ReleaseStartMetadata
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: >-
        function createRelease(releaseStartMetadata: ReleaseStartMetadata,
        project: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.createReleaseDefinition
    name: >-
      createReleaseDefinition(releaseDefinition: ReleaseDefinition, project:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: releaseDefinition
          type:
            - ReleaseDefinition
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: >-
        function createReleaseDefinition(releaseDefinition: ReleaseDefinition,
        project: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.deleteDefinitionEnvironmentTemplate
    name: 'deleteDefinitionEnvironmentTemplate(project: string, templateId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: templateId
          type:
            - string
          description: |+

      content: >-
        function deleteDefinitionEnvironmentTemplate(project: string,
        templateId: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.deleteDefinitionTag
    name: >-
      deleteDefinitionTag(project: string, releaseDefinitionId: number, tag:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseDefinitionId
          type:
            - number
          description: ''
        - id: tag
          type:
            - string
          description: |+

      content: >-
        function deleteDefinitionTag(project: string, releaseDefinitionId:
        number, tag: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.deleteFavorites
    name: >-
      deleteFavorites(project: string, scope: string, identityId?: string,
      favoriteItemIds?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: scope
          type:
            - string
          description: ''
        - id: identityId
          type:
            - string
          description: ''
          optional: true
        - id: favoriteItemIds
          type:
            - string
          description: |+

          optional: true
      content: >-
        function deleteFavorites(project: string, scope: string, identityId?:
        string, favoriteItemIds?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.deleteFolder
    name: 'deleteFolder(project: string, path: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: path
          type:
            - string
          description: |+

      content: 'function deleteFolder(project: string, path: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.deleteRelease
    name: 'deleteRelease(project: string, releaseId: number, comment?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: comment
          type:
            - string
          description: |+

          optional: true
      content: >-
        function deleteRelease(project: string, releaseId: number, comment?:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.deleteReleaseDefinition
    name: 'deleteReleaseDefinition(project: string, definitionId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: |+

      content: 'function deleteReleaseDefinition(project: string, definitionId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.deleteReleaseTag
    name: 'deleteReleaseTag(project: string, releaseId: number, tag: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: tag
          type:
            - string
          description: |+

      content: >-
        function deleteReleaseTag(project: string, releaseId: number, tag:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getAgentArtifactDefinitions
    name: 'getAgentArtifactDefinitions(project: string, releaseId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: |+

      content: 'function getAgentArtifactDefinitions(project: string, releaseId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getApproval
    name: 'getApproval(project: string, approvalId: number, includeHistory?: boolean)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: approvalId
          type:
            - number
          description: ''
        - id: includeHistory
          type:
            - boolean
          description: |+

          optional: true
      content: >-
        function getApproval(project: string, approvalId: number,
        includeHistory?: boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getApprovalHistory
    name: 'getApprovalHistory(project: string, approvalStepId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: approvalStepId
          type:
            - number
          description: |+

      content: 'function getApprovalHistory(project: string, approvalStepId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getApprovals
    name: >-
      getApprovals(project: string, assignedToFilter?: string, statusFilter?:
      function, releaseIdsFilter?: function, typeFilter?: function, top?:
      number, continuationToken?: number, queryOrder?: function,
      includeMyGroupApprovals?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: assignedToFilter
          type:
            - string
          description: ''
          optional: true
        - id: statusFilter
          type:
            - function
          description: ''
          optional: true
        - id: releaseIdsFilter
          type:
            - function
          description: ''
          optional: true
        - id: typeFilter
          type:
            - function
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: continuationToken
          type:
            - number
          description: ''
          optional: true
        - id: queryOrder
          type:
            - function
          description: ''
          optional: true
        - id: includeMyGroupApprovals
          type:
            - boolean
          description: |+

          optional: true
      content: >-
        function getApprovals(project: string, assignedToFilter?: string,
        statusFilter?: function, releaseIdsFilter?: function, typeFilter?:
        function, top?: number, continuationToken?: number, queryOrder?:
        function, includeMyGroupApprovals?: boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getArtifactTypeDefinitions
    name: 'getArtifactTypeDefinitions(project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: 'function getArtifactTypeDefinitions(project: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getArtifactVersions
    name: 'getArtifactVersions(project: string, releaseDefinitionId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseDefinitionId
          type:
            - number
          description: |+

      content: >-
        function getArtifactVersions(project: string, releaseDefinitionId:
        number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getArtifactVersionsForSources
    name: 'getArtifactVersionsForSources(artifacts: function, project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: artifacts
          type:
            - function
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: >-
        function getArtifactVersionsForSources(artifacts: function, project:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getDefinitionEnvironments
    name: 'getDefinitionEnvironments(project: string, taskGroupId?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: taskGroupId
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getDefinitionEnvironments(project: string, taskGroupId?:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getDefinitionEnvironmentTemplate
    name: 'getDefinitionEnvironmentTemplate(project: string, templateId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: templateId
          type:
            - string
          description: |+

      content: >-
        function getDefinitionEnvironmentTemplate(project: string, templateId:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getDefinitionRevision
    name: >-
      getDefinitionRevision(project: string, definitionId: number, revision:
      number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: ''
        - id: revision
          type:
            - number
          description: |+

      content: >-
        function getDefinitionRevision(project: string, definitionId: number,
        revision: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getDefinitionTags
    name: 'getDefinitionTags(project: string, releaseDefinitionId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseDefinitionId
          type:
            - number
          description: |+

      content: 'function getDefinitionTags(project: string, releaseDefinitionId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getDeployments
    name: >-
      getDeployments(project: string, definitionId?: number,
      definitionEnvironmentId?: number, createdBy?: string, minModifiedTime?:
      Date, maxModifiedTime?: Date, deploymentStatus?: function,
      operationStatus?: function, latestAttemptsOnly?: boolean, queryOrder?:
      function, top?: number, continuationToken?: number, createdFor?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: ''
          optional: true
        - id: definitionEnvironmentId
          type:
            - number
          description: ''
          optional: true
        - id: createdBy
          type:
            - string
          description: ''
          optional: true
        - id: minModifiedTime
          type:
            - Date
          description: ''
          optional: true
        - id: maxModifiedTime
          type:
            - Date
          description: ''
          optional: true
        - id: deploymentStatus
          type:
            - function
          description: ''
          optional: true
        - id: operationStatus
          type:
            - function
          description: ''
          optional: true
        - id: latestAttemptsOnly
          type:
            - boolean
          description: ''
          optional: true
        - id: queryOrder
          type:
            - function
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: continuationToken
          type:
            - number
          description: ''
          optional: true
        - id: createdFor
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getDeployments(project: string, definitionId?: number,
        definitionEnvironmentId?: number, createdBy?: string, minModifiedTime?:
        Date, maxModifiedTime?: Date, deploymentStatus?: function,
        operationStatus?: function, latestAttemptsOnly?: boolean, queryOrder?:
        function, top?: number, continuationToken?: number, createdFor?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getDeploymentsForMultipleEnvironments
    name: >-
      getDeploymentsForMultipleEnvironments(queryParameters:
      DeploymentQueryParameters, project: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: queryParameters
          type:
            - DeploymentQueryParameters
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: >-
        function getDeploymentsForMultipleEnvironments(queryParameters:
        DeploymentQueryParameters, project: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getFavorites
    name: 'getFavorites(project: string, scope: string, identityId?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: scope
          type:
            - string
          description: ''
        - id: identityId
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getFavorites(project: string, scope: string, identityId?:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getFolders
    name: 'getFolders(project: string, path?: string, queryOrder?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: path
          type:
            - string
          description: ''
          optional: true
        - id: queryOrder
          type:
            - function
          description: |+

          optional: true
      content: >-
        function getFolders(project: string, path?: string, queryOrder?:
        function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getInputValues
    name: 'getInputValues(query: InputValuesQuery, project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: query
          type:
            - InputValuesQuery
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: 'function getInputValues(query: InputValuesQuery, project: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getIssues
    name: 'getIssues(project: string, buildId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: buildId
          type:
            - number
          description: |+

      content: 'function getIssues(project: string, buildId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getLog
    name: >-
      getLog(project: string, releaseId: number, environmentId: number, taskId:
      number, attemptId?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: environmentId
          type:
            - number
          description: ''
        - id: taskId
          type:
            - number
          description: ''
        - id: attemptId
          type:
            - number
          description: |+

          optional: true
      content: >-
        function getLog(project: string, releaseId: number, environmentId:
        number, taskId: number, attemptId?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getLogs
    name: 'getLogs(project: string, releaseId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: |+

      content: 'function getLogs(project: string, releaseId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getManualIntervention
    name: >-
      getManualIntervention(project: string, releaseId: number,
      manualInterventionId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: manualInterventionId
          type:
            - number
          description: |+

      content: >-
        function getManualIntervention(project: string, releaseId: number,
        manualInterventionId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getManualInterventions
    name: 'getManualInterventions(project: string, releaseId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: |+

      content: 'function getManualInterventions(project: string, releaseId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getMetrics
    name: 'getMetrics(project: string, minMetricsTime?: Date)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: minMetricsTime
          type:
            - Date
          description: |+

          optional: true
      content: 'function getMetrics(project: string, minMetricsTime?: Date)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getRelease
    name: >-
      getRelease(project: string, releaseId: number, includeAllApprovals?:
      boolean, propertyFilters?: function)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: includeAllApprovals
          type:
            - boolean
          description: ''
          optional: true
        - id: propertyFilters
          type:
            - function
          description: |+

          optional: true
      content: >-
        function getRelease(project: string, releaseId: number,
        includeAllApprovals?: boolean, propertyFilters?: function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseChanges
    name: >-
      getReleaseChanges(project: string, releaseId: number, baseReleaseId?:
      number, top?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: baseReleaseId
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: |+

          optional: true
      content: >-
        function getReleaseChanges(project: string, releaseId: number,
        baseReleaseId?: number, top?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseDefinition
    name: >-
      getReleaseDefinition(project: string, definitionId: number,
      propertyFilters?: function)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: ''
        - id: propertyFilters
          type:
            - function
          description: |+

          optional: true
      content: >-
        function getReleaseDefinition(project: string, definitionId: number,
        propertyFilters?: function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseDefinitionHistory
    name: 'getReleaseDefinitionHistory(project: string, definitionId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: |+

      content: >-
        function getReleaseDefinitionHistory(project: string, definitionId:
        number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseDefinitionRevision
    name: >-
      getReleaseDefinitionRevision(project: string, definitionId: number,
      revision: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: ''
        - id: revision
          type:
            - number
          description: |+

      content: >-
        function getReleaseDefinitionRevision(project: string, definitionId:
        number, revision: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseDefinitions
    name: >-
      getReleaseDefinitions(project: string, searchText?: string, expand?:
      function, artifactType?: string, artifactSourceId?: string, top?: number,
      continuationToken?: string, queryOrder?: function, path?: string,
      isExactNameMatch?: boolean, tagFilter?: function, propertyFilters?:
      function)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: searchText
          type:
            - string
          description: ''
          optional: true
        - id: expand
          type:
            - function
          description: ''
          optional: true
        - id: artifactType
          type:
            - string
          description: ''
          optional: true
        - id: artifactSourceId
          type:
            - string
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: continuationToken
          type:
            - string
          description: ''
          optional: true
        - id: queryOrder
          type:
            - function
          description: ''
          optional: true
        - id: path
          type:
            - string
          description: ''
          optional: true
        - id: isExactNameMatch
          type:
            - boolean
          description: ''
          optional: true
        - id: tagFilter
          type:
            - function
          description: ''
          optional: true
        - id: propertyFilters
          type:
            - function
          description: |+

          optional: true
      content: >-
        function getReleaseDefinitions(project: string, searchText?: string,
        expand?: function, artifactType?: string, artifactSourceId?: string,
        top?: number, continuationToken?: string, queryOrder?: function, path?:
        string, isExactNameMatch?: boolean, tagFilter?: function,
        propertyFilters?: function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseDefinitionsForArtifactSource
    name: >-
      getReleaseDefinitionsForArtifactSource(project: string, artifactType:
      string, artifactSourceId: string, expand?: function)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: artifactType
          type:
            - string
          description: ''
        - id: artifactSourceId
          type:
            - string
          description: ''
        - id: expand
          type:
            - function
          description: |+

          optional: true
      content: >-
        function getReleaseDefinitionsForArtifactSource(project: string,
        artifactType: string, artifactSourceId: string, expand?: function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseDefinitionSummary
    name: >-
      getReleaseDefinitionSummary(project: string, definitionId: number,
      releaseCount: number, includeArtifact?: boolean,
      definitionEnvironmentIdsFilter?: function)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: ''
        - id: releaseCount
          type:
            - number
          description: ''
        - id: includeArtifact
          type:
            - boolean
          description: ''
          optional: true
        - id: definitionEnvironmentIdsFilter
          type:
            - function
          description: |+

          optional: true
      content: >-
        function getReleaseDefinitionSummary(project: string, definitionId:
        number, releaseCount: number, includeArtifact?: boolean,
        definitionEnvironmentIdsFilter?: function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseEnvironment
    name: >-
      getReleaseEnvironment(project: string, releaseId: number, environmentId:
      number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: environmentId
          type:
            - number
          description: |+

      content: >-
        function getReleaseEnvironment(project: string, releaseId: number,
        environmentId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseHistory
    name: 'getReleaseHistory(project: string, releaseId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: |+

      content: 'function getReleaseHistory(project: string, releaseId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseProjects
    name: 'getReleaseProjects(artifactType: string, artifactSourceId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: artifactType
          type:
            - string
          description: ''
        - id: artifactSourceId
          type:
            - string
          description: |+

      content: >-
        function getReleaseProjects(artifactType: string, artifactSourceId:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseRevision
    name: >-
      getReleaseRevision(project: string, releaseId: number,
      definitionSnapshotRevision: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: definitionSnapshotRevision
          type:
            - number
          description: |+

      content: >-
        function getReleaseRevision(project: string, releaseId: number,
        definitionSnapshotRevision: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleases
    name: >-
      getReleases(project?: string, definitionId?: number,
      definitionEnvironmentId?: number, searchText?: string, createdBy?: string,
      statusFilter?: function, environmentStatusFilter?: number,
      minCreatedTime?: Date, maxCreatedTime?: Date, queryOrder?: function, top?:
      number, continuationToken?: number, expand?: function, artifactTypeId?:
      string, sourceId?: string, artifactVersionId?: string,
      sourceBranchFilter?: string, isDeleted?: boolean, tagFilter?: function,
      propertyFilters?: function)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: definitionId
          type:
            - number
          description: ''
          optional: true
        - id: definitionEnvironmentId
          type:
            - number
          description: ''
          optional: true
        - id: searchText
          type:
            - string
          description: ''
          optional: true
        - id: createdBy
          type:
            - string
          description: ''
          optional: true
        - id: statusFilter
          type:
            - function
          description: ''
          optional: true
        - id: environmentStatusFilter
          type:
            - number
          description: ''
          optional: true
        - id: minCreatedTime
          type:
            - Date
          description: ''
          optional: true
        - id: maxCreatedTime
          type:
            - Date
          description: ''
          optional: true
        - id: queryOrder
          type:
            - function
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: ''
          optional: true
        - id: continuationToken
          type:
            - number
          description: ''
          optional: true
        - id: expand
          type:
            - function
          description: ''
          optional: true
        - id: artifactTypeId
          type:
            - string
          description: ''
          optional: true
        - id: sourceId
          type:
            - string
          description: ''
          optional: true
        - id: artifactVersionId
          type:
            - string
          description: ''
          optional: true
        - id: sourceBranchFilter
          type:
            - string
          description: ''
          optional: true
        - id: isDeleted
          type:
            - boolean
          description: ''
          optional: true
        - id: tagFilter
          type:
            - function
          description: ''
          optional: true
        - id: propertyFilters
          type:
            - function
          description: |+

          optional: true
      content: >-
        function getReleases(project?: string, definitionId?: number,
        definitionEnvironmentId?: number, searchText?: string, createdBy?:
        string, statusFilter?: function, environmentStatusFilter?: number,
        minCreatedTime?: Date, maxCreatedTime?: Date, queryOrder?: function,
        top?: number, continuationToken?: number, expand?: function,
        artifactTypeId?: string, sourceId?: string, artifactVersionId?: string,
        sourceBranchFilter?: string, isDeleted?: boolean, tagFilter?: function,
        propertyFilters?: function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseSettings
    name: 'getReleaseSettings(project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: 'function getReleaseSettings(project: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseTags
    name: 'getReleaseTags(project: string, releaseId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: |+

      content: 'function getReleaseTags(project: string, releaseId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getReleaseWorkItemsRefs
    name: >-
      getReleaseWorkItemsRefs(project: string, releaseId: number,
      baseReleaseId?: number, top?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: baseReleaseId
          type:
            - number
          description: ''
          optional: true
        - id: top
          type:
            - number
          description: |+

          optional: true
      content: >-
        function getReleaseWorkItemsRefs(project: string, releaseId: number,
        baseReleaseId?: number, top?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getSourceBranches
    name: 'getSourceBranches(project: string, definitionId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: definitionId
          type:
            - number
          description: |+

      content: 'function getSourceBranches(project: string, definitionId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getSummaryMailSections
    name: 'getSummaryMailSections(project: string, releaseId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: |+

      content: 'function getSummaryMailSections(project: string, releaseId: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getTags
    name: 'getTags(project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: 'function getTags(project: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getTaskLog
    name: >-
      getTaskLog(project: string, releaseId: number, environmentId: number,
      releaseDeployPhaseId: number, taskId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: environmentId
          type:
            - number
          description: ''
        - id: releaseDeployPhaseId
          type:
            - number
          description: ''
        - id: taskId
          type:
            - number
          description: |+

      content: >-
        function getTaskLog(project: string, releaseId: number, environmentId:
        number, releaseDeployPhaseId: number, taskId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getTasks
    name: >-
      getTasks(project: string, releaseId: number, environmentId: number,
      attemptId?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: environmentId
          type:
            - number
          description: ''
        - id: attemptId
          type:
            - number
          description: |+

          optional: true
      content: >-
        function getTasks(project: string, releaseId: number, environmentId:
        number, attemptId?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.getTasksForTaskGroup
    name: >-
      getTasksForTaskGroup(project: string, releaseId: number, environmentId:
      number, releaseDeployPhaseId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: environmentId
          type:
            - number
          description: ''
        - id: releaseDeployPhaseId
          type:
            - number
          description: |+

      content: >-
        function getTasksForTaskGroup(project: string, releaseId: number,
        environmentId: number, releaseDeployPhaseId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.listDefinitionEnvironmentTemplates
    name: 'listDefinitionEnvironmentTemplates(project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: 'function listDefinitionEnvironmentTemplates(project: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.constructor
    name: 'ReleaseApi(baseUrl: string, handlers: function, options?: IRequestOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: baseUrl
          type:
            - string
          description: ''
        - id: handlers
          type:
            - function
          description: ''
        - id: options
          type:
            - IRequestOptions
          description: ''
          optional: true
      content: >-
        new ReleaseApi(baseUrl: string, handlers: function, options?:
        IRequestOptions)
      return:
        type:
          - vso-node-api.ReleaseApi
    type: constructor
  - uid: vso-node-api.ReleaseApi.sendSummaryMail
    name: >-
      sendSummaryMail(mailMessage: MailMessage, project: string, releaseId:
      number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: mailMessage
          type:
            - MailMessage
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: |+

      content: >-
        function sendSummaryMail(mailMessage: MailMessage, project: string,
        releaseId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.setupContinuousDeployment
    name: >-
      setupContinuousDeployment(configData: ContinuousDeploymentSetupData,
      project: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: configData
          type:
            - ContinuousDeploymentSetupData
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: >-
        function setupContinuousDeployment(configData:
        ContinuousDeploymentSetupData, project: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.undeleteRelease
    name: 'undeleteRelease(project: string, releaseId: number, comment: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: comment
          type:
            - string
          description: |+

      content: >-
        function undeleteRelease(project: string, releaseId: number, comment:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.updateFolder
    name: 'updateFolder(folder: Folder, project: string, path: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: folder
          type:
            - Folder
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: path
          type:
            - string
          description: |+

      content: 'function updateFolder(folder: Folder, project: string, path: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.updateManualIntervention
    name: >-
      updateManualIntervention(manualInterventionUpdateMetadata:
      ManualInterventionUpdateMetadata, project: string, releaseId: number,
      manualInterventionId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: manualInterventionUpdateMetadata
          type:
            - ManualInterventionUpdateMetadata
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: manualInterventionId
          type:
            - number
          description: |+

      content: >-
        function updateManualIntervention(manualInterventionUpdateMetadata:
        ManualInterventionUpdateMetadata, project: string, releaseId: number,
        manualInterventionId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.updateRelease
    name: 'updateRelease(release: Release, project: string, releaseId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: release
          type:
            - Release
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: |+

      content: >-
        function updateRelease(release: Release, project: string, releaseId:
        number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.updateReleaseApproval
    name: >-
      updateReleaseApproval(approval: ReleaseApproval, project: string,
      approvalId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: approval
          type:
            - ReleaseApproval
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: approvalId
          type:
            - number
          description: |+

      content: >-
        function updateReleaseApproval(approval: ReleaseApproval, project:
        string, approvalId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.updateReleaseDefinition
    name: >-
      updateReleaseDefinition(releaseDefinition: ReleaseDefinition, project:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: releaseDefinition
          type:
            - ReleaseDefinition
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: >-
        function updateReleaseDefinition(releaseDefinition: ReleaseDefinition,
        project: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.updateReleaseEnvironment
    name: >-
      updateReleaseEnvironment(environmentUpdateData:
      ReleaseEnvironmentUpdateMetadata, project: string, releaseId: number,
      environmentId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: environmentUpdateData
          type:
            - ReleaseEnvironmentUpdateMetadata
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: ''
        - id: environmentId
          type:
            - number
          description: |+

      content: >-
        function updateReleaseEnvironment(environmentUpdateData:
        ReleaseEnvironmentUpdateMetadata, project: string, releaseId: number,
        environmentId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.updateReleaseResource
    name: >-
      updateReleaseResource(releaseUpdateMetadata: ReleaseUpdateMetadata,
      project: string, releaseId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: releaseUpdateMetadata
          type:
            - ReleaseUpdateMetadata
          description: ''
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: releaseId
          type:
            - number
          description: |+

      content: >-
        function updateReleaseResource(releaseUpdateMetadata:
        ReleaseUpdateMetadata, project: string, releaseId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.ReleaseApi.updateReleaseSettings
    name: 'updateReleaseSettings(releaseSettings: ReleaseSettings, project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: releaseSettings
          type:
            - ReleaseSettings
          description: ''
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: >-
        function updateReleaseSettings(releaseSettings: ReleaseSettings,
        project: string)
      return:
        type:
          - Promise
    type: method
