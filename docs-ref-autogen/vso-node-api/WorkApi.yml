### YamlMime:UniversalReference
items:
  - uid: vso-node-api.WorkApi
    name: WorkApi
    fullName: WorkApi
    children:
      - vso-node-api.WorkApi.createPlan
      - vso-node-api.WorkApi.deletePlan
      - vso-node-api.WorkApi.deleteTeamIteration
      - vso-node-api.WorkApi.getBacklogConfigurations
      - vso-node-api.WorkApi.getBoard
      - vso-node-api.WorkApi.getBoardCardRuleSettings
      - vso-node-api.WorkApi.getBoardCardSettings
      - vso-node-api.WorkApi.getBoardChart
      - vso-node-api.WorkApi.getBoardCharts
      - vso-node-api.WorkApi.getBoardColumns
      - vso-node-api.WorkApi.getBoardFilterSettings
      - vso-node-api.WorkApi.getBoardMappingParentItems
      - vso-node-api.WorkApi.getBoardRows
      - vso-node-api.WorkApi.getBoards
      - vso-node-api.WorkApi.getBoardUserSettings
      - vso-node-api.WorkApi.getCapacities
      - vso-node-api.WorkApi.getCapacity
      - vso-node-api.WorkApi.getColumnSuggestedValues
      - vso-node-api.WorkApi.getDeliveryTimelineData
      - vso-node-api.WorkApi.getPlan
      - vso-node-api.WorkApi.getPlans
      - vso-node-api.WorkApi.getProcessConfiguration
      - vso-node-api.WorkApi.getRowSuggestedValues
      - vso-node-api.WorkApi.getTeamDaysOff
      - vso-node-api.WorkApi.getTeamFieldValues
      - vso-node-api.WorkApi.getTeamIteration
      - vso-node-api.WorkApi.getTeamIterations
      - vso-node-api.WorkApi.getTeamSettings
      - vso-node-api.WorkApi.postTeamIteration
      - vso-node-api.WorkApi.replaceCapacities
      - vso-node-api.WorkApi.setBoardOptions
      - vso-node-api.WorkApi.updateBoardCardRuleSettings
      - vso-node-api.WorkApi.updateBoardCardSettings
      - vso-node-api.WorkApi.updateBoardChart
      - vso-node-api.WorkApi.updateBoardColumns
      - vso-node-api.WorkApi.updateBoardFilterSettings
      - vso-node-api.WorkApi.updateBoardRows
      - vso-node-api.WorkApi.updateBoardUserSettings
      - vso-node-api.WorkApi.updateCapacity
      - vso-node-api.WorkApi.updatePlan
      - vso-node-api.WorkApi.updateTeamDaysOff
      - vso-node-api.WorkApi.updateTeamFieldValues
      - vso-node-api.WorkApi.updateTeamSettings
      - vso-node-api.WorkApi.constructor
    langs:
      - typeScript
    type: Class
    summary: ''
  - uid: vso-node-api.WorkApi.createPlan
    name: 'createPlan(postedPlan: CreatePlan, project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: postedPlan
          type:
            - CreatePlan
          description: Plan definition
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: 'function createPlan(postedPlan: CreatePlan, project: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.deletePlan
    name: 'deletePlan(project: string, id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: id
          type:
            - string
          description: |
            Identifier of the plan
      content: 'function deletePlan(project: string, id: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.deleteTeamIteration
    name: 'deleteTeamIteration(teamContext: TeamContext, id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: id
          type:
            - string
          description: |+

      content: 'function deleteTeamIteration(teamContext: TeamContext, id: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getBacklogConfigurations
    name: 'getBacklogConfigurations(teamContext: TeamContext)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: |
            The team context for the operation
      content: 'function getBacklogConfigurations(teamContext: TeamContext)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getBoard
    name: 'getBoard(teamContext: TeamContext, id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: id
          type:
            - string
          description: >
            identifier for board, either board's backlog level name
            (Eg:"Stories") or Id
      content: 'function getBoard(teamContext: TeamContext, id: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getBoardCardRuleSettings
    name: 'getBoardCardRuleSettings(teamContext: TeamContext, board: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: |+

      content: >-
        function getBoardCardRuleSettings(teamContext: TeamContext, board:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getBoardCardSettings
    name: 'getBoardCardSettings(teamContext: TeamContext, board: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: |+

      content: 'function getBoardCardSettings(teamContext: TeamContext, board: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getBoardChart
    name: 'getBoardChart(teamContext: TeamContext, board: string, name: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: >-
            Identifier for board, either board's backlog level name
            (Eg:"Stories") or Id
        - id: name
          type:
            - string
          description: |
            The chart name
      content: >-
        function getBoardChart(teamContext: TeamContext, board: string, name:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getBoardCharts
    name: 'getBoardCharts(teamContext: TeamContext, board: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: >
            Identifier for board, either board's backlog level name
            (Eg:"Stories") or Id
      content: 'function getBoardCharts(teamContext: TeamContext, board: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getBoardColumns
    name: 'getBoardColumns(teamContext: TeamContext, board: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: |+

      content: 'function getBoardColumns(teamContext: TeamContext, board: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getBoardFilterSettings
    name: 'getBoardFilterSettings(teamContext: TeamContext, board: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: |+

      content: 'function getBoardFilterSettings(teamContext: TeamContext, board: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getBoardMappingParentItems
    name: >-
      getBoardMappingParentItems(teamContext: TeamContext,
      childBacklogContextCategoryRefName: string, workitemIds: function)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: childBacklogContextCategoryRefName
          type:
            - string
          description: ''
        - id: workitemIds
          type:
            - function
          description: |+

      content: >-
        function getBoardMappingParentItems(teamContext: TeamContext,
        childBacklogContextCategoryRefName: string, workitemIds: function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getBoardRows
    name: 'getBoardRows(teamContext: TeamContext, board: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: |+

      content: 'function getBoardRows(teamContext: TeamContext, board: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getBoards
    name: 'getBoards(teamContext: TeamContext)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: |
            The team context for the operation
      content: 'function getBoards(teamContext: TeamContext)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getBoardUserSettings
    name: 'getBoardUserSettings(teamContext: TeamContext, board: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: |+

      content: 'function getBoardUserSettings(teamContext: TeamContext, board: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getCapacities
    name: 'getCapacities(teamContext: TeamContext, iterationId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: iterationId
          type:
            - string
          description: |+

      content: 'function getCapacities(teamContext: TeamContext, iterationId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getCapacity
    name: >-
      getCapacity(teamContext: TeamContext, iterationId: string, teamMemberId:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: iterationId
          type:
            - string
          description: ''
        - id: teamMemberId
          type:
            - string
          description: |+

      content: >-
        function getCapacity(teamContext: TeamContext, iterationId: string,
        teamMemberId: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getColumnSuggestedValues
    name: 'getColumnSuggestedValues(project?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      content: 'function getColumnSuggestedValues(project?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getDeliveryTimelineData
    name: >-
      getDeliveryTimelineData(project: string, id: string, revision?: number,
      startDate?: Date, endDate?: Date)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: id
          type:
            - string
          description: Identifier for delivery view
        - id: revision
          type:
            - number
          description: >-
            Revision of the plan for which you want data. If the current plan is
            a different revision you will get an ViewRevisionMismatchException
            exception. If you do not supply a revision you will get data for the
            latest revision.
          optional: true
        - id: startDate
          type:
            - Date
          description: The start date of timeline
          optional: true
        - id: endDate
          type:
            - Date
          description: |
            The end date of timeline
          optional: true
      content: >-
        function getDeliveryTimelineData(project: string, id: string, revision?:
        number, startDate?: Date, endDate?: Date)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getPlan
    name: 'getPlan(project: string, id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: id
          type:
            - string
          description: |
            Identifier of the plan
      content: 'function getPlan(project: string, id: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getPlans
    name: 'getPlans(project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: 'function getPlans(project: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getProcessConfiguration
    name: 'getProcessConfiguration(project: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      content: 'function getProcessConfiguration(project: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getRowSuggestedValues
    name: 'getRowSuggestedValues(project?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      content: 'function getRowSuggestedValues(project?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getTeamDaysOff
    name: 'getTeamDaysOff(teamContext: TeamContext, iterationId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: iterationId
          type:
            - string
          description: |+

      content: 'function getTeamDaysOff(teamContext: TeamContext, iterationId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getTeamFieldValues
    name: 'getTeamFieldValues(teamContext: TeamContext)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: |
            The team context for the operation
      content: 'function getTeamFieldValues(teamContext: TeamContext)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getTeamIteration
    name: 'getTeamIteration(teamContext: TeamContext, id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: id
          type:
            - string
          description: |+

      content: 'function getTeamIteration(teamContext: TeamContext, id: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getTeamIterations
    name: 'getTeamIterations(teamContext: TeamContext, timeframe?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: timeframe
          type:
            - string
          description: |+

          optional: true
      content: 'function getTeamIterations(teamContext: TeamContext, timeframe?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.getTeamSettings
    name: 'getTeamSettings(teamContext: TeamContext)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamContext
          type:
            - TeamContext
          description: |
            The team context for the operation
      content: 'function getTeamSettings(teamContext: TeamContext)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.postTeamIteration
    name: >-
      postTeamIteration(iteration: TeamSettingsIteration, teamContext:
      TeamContext)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: iteration
          type:
            - TeamSettingsIteration
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: |
            The team context for the operation
      content: >-
        function postTeamIteration(iteration: TeamSettingsIteration,
        teamContext: TeamContext)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.replaceCapacities
    name: >-
      replaceCapacities(capacities: function, teamContext: TeamContext,
      iterationId: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: capacities
          type:
            - function
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: iterationId
          type:
            - string
          description: |+

      content: >-
        function replaceCapacities(capacities: function, teamContext:
        TeamContext, iterationId: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.setBoardOptions
    name: 'setBoardOptions(options: function, teamContext: TeamContext, id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: options
          type:
            - function
          description: options to updated
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: id
          type:
            - string
          description: >
            identifier for board, either category plural name (Eg:"Stories") or
            guid
      content: >-
        function setBoardOptions(options: function, teamContext: TeamContext,
        id: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.updateBoardCardRuleSettings
    name: >-
      updateBoardCardRuleSettings(boardCardRuleSettings: BoardCardRuleSettings,
      teamContext: TeamContext, board: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: boardCardRuleSettings
          type:
            - BoardCardRuleSettings
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: |+

      content: >-
        function updateBoardCardRuleSettings(boardCardRuleSettings:
        BoardCardRuleSettings, teamContext: TeamContext, board: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.updateBoardCardSettings
    name: >-
      updateBoardCardSettings(boardCardSettingsToSave: BoardCardSettings,
      teamContext: TeamContext, board: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: boardCardSettingsToSave
          type:
            - BoardCardSettings
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: |+

      content: >-
        function updateBoardCardSettings(boardCardSettingsToSave:
        BoardCardSettings, teamContext: TeamContext, board: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.updateBoardChart
    name: >-
      updateBoardChart(chart: BoardChart, teamContext: TeamContext, board:
      string, name: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: chart
          type:
            - BoardChart
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: >-
            Identifier for board, either board's backlog level name
            (Eg:"Stories") or Id
        - id: name
          type:
            - string
          description: |
            The chart name
      content: >-
        function updateBoardChart(chart: BoardChart, teamContext: TeamContext,
        board: string, name: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.updateBoardColumns
    name: >-
      updateBoardColumns(boardColumns: function, teamContext: TeamContext,
      board: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: boardColumns
          type:
            - function
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: |+

      content: >-
        function updateBoardColumns(boardColumns: function, teamContext:
        TeamContext, board: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.updateBoardFilterSettings
    name: >-
      updateBoardFilterSettings(filterSettings: BoardFilterSettings,
      teamContext: TeamContext, board: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: filterSettings
          type:
            - BoardFilterSettings
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: |+

      content: >-
        function updateBoardFilterSettings(filterSettings: BoardFilterSettings,
        teamContext: TeamContext, board: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.updateBoardRows
    name: >-
      updateBoardRows(boardRows: function, teamContext: TeamContext, board:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: boardRows
          type:
            - function
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: |+

      content: >-
        function updateBoardRows(boardRows: function, teamContext: TeamContext,
        board: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.updateBoardUserSettings
    name: >-
      updateBoardUserSettings(boardUserSettings: function, teamContext:
      TeamContext, board: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: boardUserSettings
          type:
            - function
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: board
          type:
            - string
          description: |+

      content: >-
        function updateBoardUserSettings(boardUserSettings: function,
        teamContext: TeamContext, board: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.updateCapacity
    name: >-
      updateCapacity(patch: CapacityPatch, teamContext: TeamContext,
      iterationId: string, teamMemberId: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: patch
          type:
            - CapacityPatch
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: iterationId
          type:
            - string
          description: ''
        - id: teamMemberId
          type:
            - string
          description: |+

      content: >-
        function updateCapacity(patch: CapacityPatch, teamContext: TeamContext,
        iterationId: string, teamMemberId: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.updatePlan
    name: 'updatePlan(updatedPlan: UpdatePlan, project: string, id: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: updatedPlan
          type:
            - UpdatePlan
          description: Plan definition to be updated
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: id
          type:
            - string
          description: |
            Identifier of the plan
      content: >-
        function updatePlan(updatedPlan: UpdatePlan, project: string, id:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.updateTeamDaysOff
    name: >-
      updateTeamDaysOff(daysOffPatch: TeamSettingsDaysOffPatch, teamContext:
      TeamContext, iterationId: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: daysOffPatch
          type:
            - TeamSettingsDaysOffPatch
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: The team context for the operation
        - id: iterationId
          type:
            - string
          description: |+

      content: >-
        function updateTeamDaysOff(daysOffPatch: TeamSettingsDaysOffPatch,
        teamContext: TeamContext, iterationId: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.updateTeamFieldValues
    name: >-
      updateTeamFieldValues(patch: TeamFieldValuesPatch, teamContext:
      TeamContext)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: patch
          type:
            - TeamFieldValuesPatch
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: |
            The team context for the operation
      content: >-
        function updateTeamFieldValues(patch: TeamFieldValuesPatch, teamContext:
        TeamContext)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.updateTeamSettings
    name: >-
      updateTeamSettings(teamSettingsPatch: TeamSettingsPatch, teamContext:
      TeamContext)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: teamSettingsPatch
          type:
            - TeamSettingsPatch
          description: ''
        - id: teamContext
          type:
            - TeamContext
          description: |
            The team context for the operation
      content: >-
        function updateTeamSettings(teamSettingsPatch: TeamSettingsPatch,
        teamContext: TeamContext)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.WorkApi.constructor
    name: 'WorkApi(baseUrl: string, handlers: function, options?: IRequestOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: baseUrl
          type:
            - string
          description: ''
        - id: handlers
          type:
            - function
          description: ''
        - id: options
          type:
            - IRequestOptions
          description: ''
          optional: true
      content: >-
        new WorkApi(baseUrl: string, handlers: function, options?:
        IRequestOptions)
      return:
        type:
          - vso-node-api.WorkApi
    type: constructor
