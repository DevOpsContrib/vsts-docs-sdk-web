### YamlMime:UniversalReference
items:
  - uid: vso-node-api.FeatureManagementApi
    name: FeatureManagementApi
    fullName: FeatureManagementApi
    children:
      - vso-node-api.FeatureManagementApi.constructor
      - vso-node-api.FeatureManagementApi.getFeature
      - vso-node-api.FeatureManagementApi.getFeatures
      - vso-node-api.FeatureManagementApi.getFeatureState
      - vso-node-api.FeatureManagementApi.getFeatureStateForScope
      - vso-node-api.FeatureManagementApi.queryFeatureStates
      - vso-node-api.FeatureManagementApi.queryFeatureStatesForDefaultScope
      - vso-node-api.FeatureManagementApi.queryFeatureStatesForNamedScope
      - vso-node-api.FeatureManagementApi.setFeatureState
      - vso-node-api.FeatureManagementApi.setFeatureStateForScope
    langs:
      - typeScript
    type: Class
    summary: ''
  - uid: vso-node-api.FeatureManagementApi.constructor
    name: >-
      FeatureManagementApi(baseUrl: string, handlers: function, options?:
      IRequestOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: baseUrl
          type:
            - string
          description: ''
        - id: handlers
          type:
            - function
          description: ''
        - id: options
          type:
            - IRequestOptions
          description: ''
          optional: true
      content: >-
        new FeatureManagementApi(baseUrl: string, handlers: function, options?:
        IRequestOptions)
      return:
        type:
          - vso-node-api.FeatureManagementApi
    type: constructor
  - uid: vso-node-api.FeatureManagementApi.getFeature
    name: 'getFeature(featureId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: featureId
          type:
            - string
          description: |
            The contribution id of the feature
      content: 'function getFeature(featureId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.FeatureManagementApi.getFeatures
    name: 'getFeatures(targetContributionId?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: targetContributionId
          type:
            - string
          description: >
            Optional target contribution. If null/empty, return all features. If
            specified include the features that target the specified
            contribution.
          optional: true
      content: 'function getFeatures(targetContributionId?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.FeatureManagementApi.getFeatureState
    name: 'getFeatureState(featureId: string, userScope: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: featureId
          type:
            - string
          description: Contribution id of the feature
        - id: userScope
          type:
            - string
          description: >
            User-Scope at which to get the value. Should be "me" for the current
            user or "host" for all users.
      content: 'function getFeatureState(featureId: string, userScope: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.FeatureManagementApi.getFeatureStateForScope
    name: >-
      getFeatureStateForScope(featureId: string, userScope: string, scopeName:
      string, scopeValue: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: featureId
          type:
            - string
          description: Contribution id of the feature
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to get the value. Should be "me" for the current
            user or "host" for all users.
        - id: scopeName
          type:
            - string
          description: >-
            Scope at which to get the feature setting for (e.g. "project" or
            "team")
        - id: scopeValue
          type:
            - string
          description: |
            Value of the scope (e.g. the project or team id)
      content: >-
        function getFeatureStateForScope(featureId: string, userScope: string,
        scopeName: string, scopeValue: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.FeatureManagementApi.queryFeatureStates
    name: 'queryFeatureStates(query: ContributedFeatureStateQuery)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: query
          type:
            - ContributedFeatureStateQuery
          description: |
            Features to query along with current scope values
      content: 'function queryFeatureStates(query: ContributedFeatureStateQuery)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.FeatureManagementApi.queryFeatureStatesForDefaultScope
    name: >-
      queryFeatureStatesForDefaultScope(query: ContributedFeatureStateQuery,
      userScope: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: query
          type:
            - ContributedFeatureStateQuery
          description: Query describing the features to query.
        - id: userScope
          type:
            - string
          description: |+

      content: >-
        function queryFeatureStatesForDefaultScope(query:
        ContributedFeatureStateQuery, userScope: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.FeatureManagementApi.queryFeatureStatesForNamedScope
    name: >-
      queryFeatureStatesForNamedScope(query: ContributedFeatureStateQuery,
      userScope: string, scopeName: string, scopeValue: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: query
          type:
            - ContributedFeatureStateQuery
          description: Query describing the features to query.
        - id: userScope
          type:
            - string
          description: ''
        - id: scopeName
          type:
            - string
          description: ''
        - id: scopeValue
          type:
            - string
          description: |+

      content: >-
        function queryFeatureStatesForNamedScope(query:
        ContributedFeatureStateQuery, userScope: string, scopeName: string,
        scopeValue: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.FeatureManagementApi.setFeatureState
    name: >-
      setFeatureState(feature: ContributedFeatureState, featureId: string,
      userScope: string, reason?: string, reasonCode?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: feature
          type:
            - ContributedFeatureState
          description: Posted feature state object. Should specify the effective value.
        - id: featureId
          type:
            - string
          description: Contribution id of the feature
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to set the value. Should be "me" for the current
            user or "host" for all users.
        - id: reason
          type:
            - string
          description: Reason for changing the state
          optional: true
        - id: reasonCode
          type:
            - string
          description: |
            Short reason code
          optional: true
      content: >-
        function setFeatureState(feature: ContributedFeatureState, featureId:
        string, userScope: string, reason?: string, reasonCode?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.FeatureManagementApi.setFeatureStateForScope
    name: >-
      setFeatureStateForScope(feature: ContributedFeatureState, featureId:
      string, userScope: string, scopeName: string, scopeValue: string, reason?:
      string, reasonCode?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: feature
          type:
            - ContributedFeatureState
          description: Posted feature state object. Should specify the effective value.
        - id: featureId
          type:
            - string
          description: Contribution id of the feature
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to set the value. Should be "me" for the current
            user or "host" for all users.
        - id: scopeName
          type:
            - string
          description: >-
            Scope at which to get the feature setting for (e.g. "project" or
            "team")
        - id: scopeValue
          type:
            - string
          description: Value of the scope (e.g. the project or team id)
        - id: reason
          type:
            - string
          description: Reason for changing the state
          optional: true
        - id: reasonCode
          type:
            - string
          description: |
            Short reason code
          optional: true
      content: >-
        function setFeatureStateForScope(feature: ContributedFeatureState,
        featureId: string, userScope: string, scopeName: string, scopeValue:
        string, reason?: string, reasonCode?: string)
      return:
        type:
          - Promise
    type: method
