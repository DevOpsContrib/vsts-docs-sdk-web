### YamlMime:UniversalReference
items:
  - uid: vso-node-api.GalleryApi
    name: GalleryApi
    fullName: GalleryApi
    children:
      - vso-node-api.GalleryApi.associateAzurePublisher
      - vso-node-api.GalleryApi.createCategory
      - vso-node-api.GalleryApi.createExtension
      - vso-node-api.GalleryApi.createExtensionJson
      - vso-node-api.GalleryApi.createExtensionWithPublisher
      - vso-node-api.GalleryApi.createExtensionWithPublisherJson
      - vso-node-api.GalleryApi.createPublisher
      - vso-node-api.GalleryApi.createQuestion
      - vso-node-api.GalleryApi.createResponse
      - vso-node-api.GalleryApi.createReview
      - vso-node-api.GalleryApi.deleteExtension
      - vso-node-api.GalleryApi.deleteExtensionById
      - vso-node-api.GalleryApi.deletePublisher
      - vso-node-api.GalleryApi.deleteQuestion
      - vso-node-api.GalleryApi.deleteResponse
      - vso-node-api.GalleryApi.deleteReview
      - vso-node-api.GalleryApi.extensionValidator
      - vso-node-api.GalleryApi.constructor
      - vso-node-api.GalleryApi.generateKey
      - vso-node-api.GalleryApi.getAcquisitionOptions
      - vso-node-api.GalleryApi.getAsset
      - vso-node-api.GalleryApi.getAssetAuthenticated
      - vso-node-api.GalleryApi.getAssetByName
      - vso-node-api.GalleryApi.getAssetWithToken
      - vso-node-api.GalleryApi.getCategories
      - vso-node-api.GalleryApi.getCategoryDetails
      - vso-node-api.GalleryApi.getCategoryTree
      - vso-node-api.GalleryApi.getCertificate
      - vso-node-api.GalleryApi.getExtension
      - vso-node-api.GalleryApi.getExtensionById
      - vso-node-api.GalleryApi.getExtensionDailyStats
      - vso-node-api.GalleryApi.getExtensionDailyStatsAnonymous
      - vso-node-api.GalleryApi.getExtensionEvents
      - vso-node-api.GalleryApi.getExtensionReports
      - vso-node-api.GalleryApi.getGalleryUserSettings
      - vso-node-api.GalleryApi.getPackage
      - vso-node-api.GalleryApi.getPublisher
      - vso-node-api.GalleryApi.getQuestions
      - vso-node-api.GalleryApi.getReviews
      - vso-node-api.GalleryApi.getReviewsSummary
      - vso-node-api.GalleryApi.getRootCategories
      - vso-node-api.GalleryApi.getSigningKey
      - vso-node-api.GalleryApi.incrementExtensionDailyStat
      - vso-node-api.GalleryApi.publishExtensionEvents
      - vso-node-api.GalleryApi.queryAssociatedAzurePublisher
      - vso-node-api.GalleryApi.queryExtensions
      - vso-node-api.GalleryApi.queryPublishers
      - vso-node-api.GalleryApi.reportQuestion
      - vso-node-api.GalleryApi.requestAcquisition
      - vso-node-api.GalleryApi.setGalleryUserSettings
      - vso-node-api.GalleryApi.shareExtension
      - vso-node-api.GalleryApi.shareExtensionById
      - vso-node-api.GalleryApi.unshareExtension
      - vso-node-api.GalleryApi.unshareExtensionById
      - vso-node-api.GalleryApi.updateExtension
      - vso-node-api.GalleryApi.updateExtensionById
      - vso-node-api.GalleryApi.updateExtensionByIdJson
      - vso-node-api.GalleryApi.updateExtensionJson
      - vso-node-api.GalleryApi.updateExtensionProperties
      - vso-node-api.GalleryApi.updateExtensionStatistics
      - vso-node-api.GalleryApi.updatePublisher
      - vso-node-api.GalleryApi.updateQuestion
      - vso-node-api.GalleryApi.updateResponse
      - vso-node-api.GalleryApi.updateReview
    langs:
      - typeScript
    type: Class
    summary: ''
  - uid: vso-node-api.GalleryApi.associateAzurePublisher
    name: 'associateAzurePublisher(publisherName: string, azurePublisherId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: azurePublisherId
          type:
            - string
          description: |+

      content: >-
        function associateAzurePublisher(publisherName: string,
        azurePublisherId: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.createCategory
    name: 'createCategory(category: ExtensionCategory)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: category
          type:
            - ExtensionCategory
          description: |+

      content: 'function createCategory(category: ExtensionCategory)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.createExtension
    name: 'createExtension(customHeaders: any, contentStream: ReadableStream)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: customHeaders
          type:
            - any
          description: ''
        - id: contentStream
          type:
            - ReadableStream
          description: |
            Content to upload
      content: >-
        function createExtension(customHeaders: any, contentStream:
        ReadableStream)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.createExtensionJson
    name: 'createExtensionJson(extensionPackage: ExtensionPackage)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionPackage
          type:
            - ExtensionPackage
          description: |+

      content: 'function createExtensionJson(extensionPackage: ExtensionPackage)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.createExtensionWithPublisher
    name: >-
      createExtensionWithPublisher(customHeaders: any, contentStream:
      ReadableStream, publisherName: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: customHeaders
          type:
            - any
          description: ''
        - id: contentStream
          type:
            - ReadableStream
          description: Content to upload
        - id: publisherName
          type:
            - string
          description: |+

      content: >-
        function createExtensionWithPublisher(customHeaders: any, contentStream:
        ReadableStream, publisherName: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.createExtensionWithPublisherJson
    name: >-
      createExtensionWithPublisherJson(extensionPackage: ExtensionPackage,
      publisherName: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionPackage
          type:
            - ExtensionPackage
          description: ''
        - id: publisherName
          type:
            - string
          description: |+

      content: >-
        function createExtensionWithPublisherJson(extensionPackage:
        ExtensionPackage, publisherName: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.createPublisher
    name: 'createPublisher(publisher: Publisher)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisher
          type:
            - Publisher
          description: |+

      content: 'function createPublisher(publisher: Publisher)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.createQuestion
    name: >-
      createQuestion(question: Question, publisherName: string, extensionName:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: question
          type:
            - Question
          description: Question to be created for the extension.
        - id: publisherName
          type:
            - string
          description: Name of the publisher who published the extension.
        - id: extensionName
          type:
            - string
          description: |
            Name of the extension.
      content: >-
        function createQuestion(question: Question, publisherName: string,
        extensionName: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.createResponse
    name: >-
      createResponse(response: Response, publisherName: string, extensionName:
      string, questionId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: response
          type:
            - Response
          description: Response to be created for the extension.
        - id: publisherName
          type:
            - string
          description: Name of the publisher who published the extension.
        - id: extensionName
          type:
            - string
          description: Name of the extension.
        - id: questionId
          type:
            - number
          description: >
            Identifier of the question for which response is to be created for
            the extension.
      content: >-
        function createResponse(response: Response, publisherName: string,
        extensionName: string, questionId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.createReview
    name: 'createReview(review: Review, pubName: string, extName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: review
          type:
            - Review
          description: Review to be created for the extension
        - id: pubName
          type:
            - string
          description: Name of the publisher who published the extension
        - id: extName
          type:
            - string
          description: |
            Name of the extension
      content: 'function createReview(review: Review, pubName: string, extName: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.deleteExtension
    name: >-
      deleteExtension(publisherName: string, extensionName: string, version?:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: |+

          optional: true
      content: >-
        function deleteExtension(publisherName: string, extensionName: string,
        version?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.deleteExtensionById
    name: 'deleteExtensionById(extensionId: string, version?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionId
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: |+

          optional: true
      content: 'function deleteExtensionById(extensionId: string, version?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.deletePublisher
    name: 'deletePublisher(publisherName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: |+

      content: 'function deletePublisher(publisherName: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.deleteQuestion
    name: >-
      deleteQuestion(publisherName: string, extensionName: string, questionId:
      number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: Name of the publisher who published the extension.
        - id: extensionName
          type:
            - string
          description: Name of the extension.
        - id: questionId
          type:
            - number
          description: |
            Identifier of the question to be deleted for the extension.
      content: >-
        function deleteQuestion(publisherName: string, extensionName: string,
        questionId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.deleteResponse
    name: >-
      deleteResponse(publisherName: string, extensionName: string, questionId:
      number, responseId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: Name of the publisher who published the extension.
        - id: extensionName
          type:
            - string
          description: Name of the extension.
        - id: questionId
          type:
            - number
          description: Identifies the question whose response is to be deleted.
        - id: responseId
          type:
            - number
          description: |
            Identifies the response to be deleted.
      content: >-
        function deleteResponse(publisherName: string, extensionName: string,
        questionId: number, responseId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.deleteReview
    name: 'deleteReview(pubName: string, extName: string, reviewId: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: pubName
          type:
            - string
          description: Name of the pubilsher who published the extension
        - id: extName
          type:
            - string
          description: Name of the extension
        - id: reviewId
          type:
            - number
          description: |
            Id of the review which needs to be updated
      content: >-
        function deleteReview(pubName: string, extName: string, reviewId:
        number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.extensionValidator
    name: 'extensionValidator(azureRestApiRequestModel: AzureRestApiRequestModel)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: azureRestApiRequestModel
          type:
            - AzureRestApiRequestModel
          description: |+

      content: >-
        function extensionValidator(azureRestApiRequestModel:
        AzureRestApiRequestModel)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.constructor
    name: 'GalleryApi(baseUrl: string, handlers: function, options?: IRequestOptions)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: baseUrl
          type:
            - string
          description: ''
        - id: handlers
          type:
            - function
          description: ''
        - id: options
          type:
            - IRequestOptions
          description: ''
          optional: true
      content: >-
        new GalleryApi(baseUrl: string, handlers: function, options?:
        IRequestOptions)
      return:
        type:
          - vso-node-api.GalleryApi
    type: constructor
  - uid: vso-node-api.GalleryApi.generateKey
    name: 'generateKey(keyType: string, expireCurrentSeconds?: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: keyType
          type:
            - string
          description: ''
        - id: expireCurrentSeconds
          type:
            - number
          description: |+

          optional: true
      content: 'function generateKey(keyType: string, expireCurrentSeconds?: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getAcquisitionOptions
    name: >-
      getAcquisitionOptions(itemId: string, installationTarget: string,
      testCommerce?: boolean, isFreeOrTrialInstall?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: itemId
          type:
            - string
          description: ''
        - id: installationTarget
          type:
            - string
          description: ''
        - id: testCommerce
          type:
            - boolean
          description: ''
          optional: true
        - id: isFreeOrTrialInstall
          type:
            - boolean
          description: |+

          optional: true
      content: >-
        function getAcquisitionOptions(itemId: string, installationTarget:
        string, testCommerce?: boolean, isFreeOrTrialInstall?: boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getAsset
    name: >-
      getAsset(extensionId: string, version: string, assetType: string,
      accountToken?: string, acceptDefault?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionId
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: ''
        - id: assetType
          type:
            - string
          description: ''
        - id: accountToken
          type:
            - string
          description: ''
          optional: true
        - id: acceptDefault
          type:
            - boolean
          description: |+

          optional: true
      content: >-
        function getAsset(extensionId: string, version: string, assetType:
        string, accountToken?: string, acceptDefault?: boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getAssetAuthenticated
    name: >-
      getAssetAuthenticated(publisherName: string, extensionName: string,
      version: string, assetType: string, accountToken?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: ''
        - id: assetType
          type:
            - string
          description: ''
        - id: accountToken
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getAssetAuthenticated(publisherName: string, extensionName:
        string, version: string, assetType: string, accountToken?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getAssetByName
    name: >-
      getAssetByName(publisherName: string, extensionName: string, version:
      string, assetType: string, accountToken?: string, acceptDefault?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: ''
        - id: assetType
          type:
            - string
          description: ''
        - id: accountToken
          type:
            - string
          description: ''
          optional: true
        - id: acceptDefault
          type:
            - boolean
          description: |+

          optional: true
      content: >-
        function getAssetByName(publisherName: string, extensionName: string,
        version: string, assetType: string, accountToken?: string,
        acceptDefault?: boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getAssetWithToken
    name: >-
      getAssetWithToken(publisherName: string, extensionName: string, version:
      string, assetType: string, assetToken?: string, accountToken?: string,
      acceptDefault?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: ''
        - id: assetType
          type:
            - string
          description: ''
        - id: assetToken
          type:
            - string
          description: ''
          optional: true
        - id: accountToken
          type:
            - string
          description: ''
          optional: true
        - id: acceptDefault
          type:
            - boolean
          description: |+

          optional: true
      content: >-
        function getAssetWithToken(publisherName: string, extensionName: string,
        version: string, assetType: string, assetToken?: string, accountToken?:
        string, acceptDefault?: boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getCategories
    name: 'getCategories(languages?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: languages
          type:
            - string
          description: |+

          optional: true
      content: 'function getCategories(languages?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getCategoryDetails
    name: >-
      getCategoryDetails(categoryName: string, languages?: string, product?:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: categoryName
          type:
            - string
          description: ''
        - id: languages
          type:
            - string
          description: ''
          optional: true
        - id: product
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getCategoryDetails(categoryName: string, languages?: string,
        product?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getCategoryTree
    name: >-
      getCategoryTree(product: string, categoryId: string, lcid?: number,
      source?: string, productVersion?: string, skus?: string, subSkus?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: product
          type:
            - string
          description: ''
        - id: categoryId
          type:
            - string
          description: ''
        - id: lcid
          type:
            - number
          description: ''
          optional: true
        - id: source
          type:
            - string
          description: ''
          optional: true
        - id: productVersion
          type:
            - string
          description: ''
          optional: true
        - id: skus
          type:
            - string
          description: ''
          optional: true
        - id: subSkus
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getCategoryTree(product: string, categoryId: string, lcid?:
        number, source?: string, productVersion?: string, skus?: string,
        subSkus?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getCertificate
    name: >-
      getCertificate(publisherName: string, extensionName: string, version?:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getCertificate(publisherName: string, extensionName: string,
        version?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getExtension
    name: >-
      getExtension(publisherName: string, extensionName: string, version?:
      string, flags?: function, accountToken?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: ''
          optional: true
        - id: flags
          type:
            - function
          description: ''
          optional: true
        - id: accountToken
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getExtension(publisherName: string, extensionName: string,
        version?: string, flags?: function, accountToken?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getExtensionById
    name: 'getExtensionById(extensionId: string, version?: string, flags?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionId
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: ''
          optional: true
        - id: flags
          type:
            - function
          description: |+

          optional: true
      content: >-
        function getExtensionById(extensionId: string, version?: string, flags?:
        function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getExtensionDailyStats
    name: >-
      getExtensionDailyStats(publisherName: string, extensionName: string,
      days?: number, aggregate?: GalleryInterfaces.ExtensionStatsAggregateType)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: ''
        - id: days
          type:
            - number
          description: ''
          optional: true
        - id: aggregate
          type:
            - GalleryInterfaces.ExtensionStatsAggregateType
          description: |+

          optional: true
      content: >-
        function getExtensionDailyStats(publisherName: string, extensionName:
        string, days?: number, aggregate?:
        GalleryInterfaces.ExtensionStatsAggregateType)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getExtensionDailyStatsAnonymous
    name: >-
      getExtensionDailyStatsAnonymous(publisherName: string, extensionName:
      string, version: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: Name of the publisher
        - id: extensionName
          type:
            - string
          description: Name of the extension
        - id: version
          type:
            - string
          description: |
            Version of the extension
      content: >-
        function getExtensionDailyStatsAnonymous(publisherName: string,
        extensionName: string, version: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getExtensionEvents
    name: >-
      getExtensionEvents(publisherName: string, extensionName: string, count?:
      number, afterDate?: Date, include?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: Name of the publisher
        - id: extensionName
          type:
            - string
          description: Name of the extension
        - id: count
          type:
            - number
          description: 'Count of events to fetch, applies to each event type.'
          optional: true
        - id: afterDate
          type:
            - Date
          description: Fetch events that occured on or after this value
          optional: true
        - id: include
          type:
            - string
          description: >
            Filter options. Supported values: includeInstall, includeUninstall.
            Default is to fetch all types of events
          optional: true
      content: >-
        function getExtensionEvents(publisherName: string, extensionName:
        string, count?: number, afterDate?: Date, include?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getExtensionReports
    name: >-
      getExtensionReports(publisherName: string, extensionName: string, days?:
      number, count?: number, afterDate?: Date)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: Name of the publisher who published the extension
        - id: extensionName
          type:
            - string
          description: Name of the extension
        - id: days
          type:
            - number
          description: Last n days report
          optional: true
        - id: count
          type:
            - number
          description: Number of events to be returned
          optional: true
        - id: afterDate
          type:
            - Date
          description: |
            Use if you want to fetch events newer than the specified date
          optional: true
      content: >-
        function getExtensionReports(publisherName: string, extensionName:
        string, days?: number, count?: number, afterDate?: Date)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getGalleryUserSettings
    name: 'getGalleryUserSettings(userScope: string, key?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: userScope
          type:
            - string
          description: >-
            User-Scope at which to get the value. Should be "me" for the current
            user or "host" for all users.
        - id: key
          type:
            - string
          description: |
            Optional key under which to filter all the entries
          optional: true
      content: 'function getGalleryUserSettings(userScope: string, key?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getPackage
    name: >-
      getPackage(publisherName: string, extensionName: string, version: string,
      accountToken?: string, acceptDefault?: boolean)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: ''
        - id: accountToken
          type:
            - string
          description: ''
          optional: true
        - id: acceptDefault
          type:
            - boolean
          description: |+

          optional: true
      content: >-
        function getPackage(publisherName: string, extensionName: string,
        version: string, accountToken?: string, acceptDefault?: boolean)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getPublisher
    name: 'getPublisher(publisherName: string, flags?: number)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: flags
          type:
            - number
          description: |+

          optional: true
      content: 'function getPublisher(publisherName: string, flags?: number)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getQuestions
    name: >-
      getQuestions(publisherName: string, extensionName: string, count?: number,
      page?: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: Name of the publisher who published the extension.
        - id: extensionName
          type:
            - string
          description: Name of the extension.
        - id: count
          type:
            - number
          description: Number of questions to retrieve (defaults to 10).
          optional: true
        - id: page
          type:
            - number
          description: |
            Page number from which set of questions are to be retrieved.
          optional: true
      content: >-
        function getQuestions(publisherName: string, extensionName: string,
        count?: number, page?: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getReviews
    name: >-
      getReviews(publisherName: string, extensionName: string, count?: number,
      filterOptions?: function, beforeDate?: Date, afterDate?: Date)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: Name of the publisher who published the extension
        - id: extensionName
          type:
            - string
          description: Name of the extension
        - id: count
          type:
            - number
          description: Number of reviews to retrieve (defaults to 5)
          optional: true
        - id: filterOptions
          type:
            - function
          description: 'FilterOptions to filter out empty reviews etcetera, defaults to none'
          optional: true
        - id: beforeDate
          type:
            - Date
          description: >-
            Use if you want to fetch reviews older than the specified date,
            defaults to null
          optional: true
        - id: afterDate
          type:
            - Date
          description: >
            Use if you want to fetch reviews newer than the specified date,
            defaults to null
          optional: true
      content: >-
        function getReviews(publisherName: string, extensionName: string,
        count?: number, filterOptions?: function, beforeDate?: Date, afterDate?:
        Date)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getReviewsSummary
    name: >-
      getReviewsSummary(pubName: string, extName: string, beforeDate?: Date,
      afterDate?: Date)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: pubName
          type:
            - string
          description: Name of the publisher who published the extension
        - id: extName
          type:
            - string
          description: Name of the extension
        - id: beforeDate
          type:
            - Date
          description: >-
            Use if you want to fetch summary of reviews older than the specified
            date, defaults to null
          optional: true
        - id: afterDate
          type:
            - Date
          description: >
            Use if you want to fetch summary of reviews newer than the specified
            date, defaults to null
          optional: true
      content: >-
        function getReviewsSummary(pubName: string, extName: string,
        beforeDate?: Date, afterDate?: Date)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getRootCategories
    name: >-
      getRootCategories(product: string, lcid?: number, source?: string,
      productVersion?: string, skus?: string, subSkus?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: product
          type:
            - string
          description: ''
        - id: lcid
          type:
            - number
          description: ''
          optional: true
        - id: source
          type:
            - string
          description: ''
          optional: true
        - id: productVersion
          type:
            - string
          description: ''
          optional: true
        - id: skus
          type:
            - string
          description: ''
          optional: true
        - id: subSkus
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getRootCategories(product: string, lcid?: number, source?:
        string, productVersion?: string, skus?: string, subSkus?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.getSigningKey
    name: 'getSigningKey(keyType: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: keyType
          type:
            - string
          description: |+

      content: 'function getSigningKey(keyType: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.incrementExtensionDailyStat
    name: >-
      incrementExtensionDailyStat(publisherName: string, extensionName: string,
      version: string, statType: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: ''
        - id: statType
          type:
            - string
          description: |+

      content: >-
        function incrementExtensionDailyStat(publisherName: string,
        extensionName: string, version: string, statType: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.publishExtensionEvents
    name: 'publishExtensionEvents(extensionEvents: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionEvents
          type:
            - function
          description: |+

      content: 'function publishExtensionEvents(extensionEvents: function)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.queryAssociatedAzurePublisher
    name: 'queryAssociatedAzurePublisher(publisherName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: |+

      content: 'function queryAssociatedAzurePublisher(publisherName: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.queryExtensions
    name: 'queryExtensions(extensionQuery: ExtensionQuery, accountToken?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionQuery
          type:
            - ExtensionQuery
          description: ''
        - id: accountToken
          type:
            - string
          description: |+

          optional: true
      content: >-
        function queryExtensions(extensionQuery: ExtensionQuery, accountToken?:
        string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.queryPublishers
    name: 'queryPublishers(publisherQuery: PublisherQuery)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherQuery
          type:
            - PublisherQuery
          description: |+

      content: 'function queryPublishers(publisherQuery: PublisherQuery)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.reportQuestion
    name: >-
      reportQuestion(concern: Concern, pubName: string, extName: string,
      questionId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: concern
          type:
            - Concern
          description: User reported concern with a question for the extension.
        - id: pubName
          type:
            - string
          description: Name of the publisher who published the extension.
        - id: extName
          type:
            - string
          description: Name of the extension.
        - id: questionId
          type:
            - number
          description: |
            Identifier of the question to be updated for the extension.
      content: >-
        function reportQuestion(concern: Concern, pubName: string, extName:
        string, questionId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.requestAcquisition
    name: 'requestAcquisition(acquisitionRequest: ExtensionAcquisitionRequest)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: acquisitionRequest
          type:
            - ExtensionAcquisitionRequest
          description: |+

      content: >-
        function requestAcquisition(acquisitionRequest:
        ExtensionAcquisitionRequest)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.setGalleryUserSettings
    name: 'setGalleryUserSettings(entries: function, userScope: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: entries
          type:
            - function
          description: A key-value pair of all settings that need to be set
        - id: userScope
          type:
            - string
          description: >
            User-Scope at which to get the value. Should be "me" for the current
            user or "host" for all users.
      content: 'function setGalleryUserSettings(entries: function, userScope: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.shareExtension
    name: >-
      shareExtension(publisherName: string, extensionName: string, accountName:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: |+

      content: >-
        function shareExtension(publisherName: string, extensionName: string,
        accountName: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.shareExtensionById
    name: 'shareExtensionById(extensionId: string, accountName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionId
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: |+

      content: 'function shareExtensionById(extensionId: string, accountName: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.unshareExtension
    name: >-
      unshareExtension(publisherName: string, extensionName: string,
      accountName: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: |+

      content: >-
        function unshareExtension(publisherName: string, extensionName: string,
        accountName: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.unshareExtensionById
    name: 'unshareExtensionById(extensionId: string, accountName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionId
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: |+

      content: 'function unshareExtensionById(extensionId: string, accountName: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.updateExtension
    name: >-
      updateExtension(customHeaders: any, contentStream: ReadableStream,
      publisherName: string, extensionName: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: customHeaders
          type:
            - any
          description: ''
        - id: contentStream
          type:
            - ReadableStream
          description: Content to upload
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: |+

      content: >-
        function updateExtension(customHeaders: any, contentStream:
        ReadableStream, publisherName: string, extensionName: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.updateExtensionById
    name: 'updateExtensionById(extensionId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionId
          type:
            - string
          description: |+

      content: 'function updateExtensionById(extensionId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.updateExtensionByIdJson
    name: >-
      updateExtensionByIdJson(extensionPackage: ExtensionPackage, extensionId:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionPackage
          type:
            - ExtensionPackage
          description: ''
        - id: extensionId
          type:
            - string
          description: |+

      content: >-
        function updateExtensionByIdJson(extensionPackage: ExtensionPackage,
        extensionId: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.updateExtensionJson
    name: >-
      updateExtensionJson(extensionPackage: ExtensionPackage, publisherName:
      string, extensionName: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionPackage
          type:
            - ExtensionPackage
          description: ''
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: |+

      content: >-
        function updateExtensionJson(extensionPackage: ExtensionPackage,
        publisherName: string, extensionName: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.updateExtensionProperties
    name: >-
      updateExtensionProperties(publisherName: string, extensionName: string,
      flags: function)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: ''
        - id: flags
          type:
            - function
          description: |+

      content: >-
        function updateExtensionProperties(publisherName: string, extensionName:
        string, flags: function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.updateExtensionStatistics
    name: >-
      updateExtensionStatistics(extensionStatisticsUpdate:
      ExtensionStatisticUpdate, publisherName: string, extensionName: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: extensionStatisticsUpdate
          type:
            - ExtensionStatisticUpdate
          description: ''
        - id: publisherName
          type:
            - string
          description: ''
        - id: extensionName
          type:
            - string
          description: |+

      content: >-
        function updateExtensionStatistics(extensionStatisticsUpdate:
        ExtensionStatisticUpdate, publisherName: string, extensionName: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.updatePublisher
    name: 'updatePublisher(publisher: Publisher, publisherName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisher
          type:
            - Publisher
          description: ''
        - id: publisherName
          type:
            - string
          description: |+

      content: 'function updatePublisher(publisher: Publisher, publisherName: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.updateQuestion
    name: >-
      updateQuestion(question: Question, publisherName: string, extensionName:
      string, questionId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: question
          type:
            - Question
          description: Updated question to be set for the extension.
        - id: publisherName
          type:
            - string
          description: Name of the publisher who published the extension.
        - id: extensionName
          type:
            - string
          description: Name of the extension.
        - id: questionId
          type:
            - number
          description: |
            Identifier of the question to be updated for the extension.
      content: >-
        function updateQuestion(question: Question, publisherName: string,
        extensionName: string, questionId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.updateResponse
    name: >-
      updateResponse(response: Response, publisherName: string, extensionName:
      string, questionId: number, responseId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: response
          type:
            - Response
          description: Updated response to be set for the extension.
        - id: publisherName
          type:
            - string
          description: Name of the publisher who published the extension.
        - id: extensionName
          type:
            - string
          description: Name of the extension.
        - id: questionId
          type:
            - number
          description: >-
            Identifier of the question for which response is to be updated for
            the extension.
        - id: responseId
          type:
            - number
          description: |
            Identifier of the response which has to be updated.
      content: >-
        function updateResponse(response: Response, publisherName: string,
        extensionName: string, questionId: number, responseId: number)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.GalleryApi.updateReview
    name: >-
      updateReview(reviewPatch: ReviewPatch, pubName: string, extName: string,
      reviewId: number)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: reviewPatch
          type:
            - ReviewPatch
          description: >-
            ReviewPatch object which contains the changes to be applied to the
            review
        - id: pubName
          type:
            - string
          description: Name of the pubilsher who published the extension
        - id: extName
          type:
            - string
          description: Name of the extension
        - id: reviewId
          type:
            - number
          description: |
            Id of the review which needs to be updated
      content: >-
        function updateReview(reviewPatch: ReviewPatch, pubName: string,
        extName: string, reviewId: number)
      return:
        type:
          - Promise
    type: method
