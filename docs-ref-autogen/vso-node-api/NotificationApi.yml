### YamlMime:UniversalReference
items:
  - uid: vso-node-api.NotificationApi
    name: NotificationApi
    fullName: NotificationApi
    children:
      - vso-node-api.NotificationApi.createSubscription
      - vso-node-api.NotificationApi.deleteSubscription
      - vso-node-api.NotificationApi.getEventType
      - vso-node-api.NotificationApi.getSubscription
      - vso-node-api.NotificationApi.getSubscriptionTemplates
      - vso-node-api.NotificationApi.listEventTypes
      - vso-node-api.NotificationApi.listSubscriptions
      - vso-node-api.NotificationApi.constructor
      - vso-node-api.NotificationApi.performBatchNotificationOperations
      - vso-node-api.NotificationApi.publishEvent
      - vso-node-api.NotificationApi.querySubscriptions
      - vso-node-api.NotificationApi.updateSubscription
      - vso-node-api.NotificationApi.updateSubscriptionUserSettings
    langs:
      - typeScript
    type: Class
    summary: ''
  - uid: vso-node-api.NotificationApi.createSubscription
    name: >-
      createSubscription(createParameters:
      NotificationSubscriptionCreateParameters)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: createParameters
          type:
            - NotificationSubscriptionCreateParameters
          description: |+

      content: >-
        function createSubscription(createParameters:
        NotificationSubscriptionCreateParameters)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.NotificationApi.deleteSubscription
    name: 'deleteSubscription(subscriptionId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: subscriptionId
          type:
            - string
          description: |+

      content: 'function deleteSubscription(subscriptionId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.NotificationApi.getEventType
    name: 'getEventType(eventType: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: eventType
          type:
            - string
          description: |+

      content: 'function getEventType(eventType: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.NotificationApi.getSubscription
    name: 'getSubscription(subscriptionId: string, queryFlags?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: subscriptionId
          type:
            - string
          description: ''
        - id: queryFlags
          type:
            - function
          description: |+

          optional: true
      content: 'function getSubscription(subscriptionId: string, queryFlags?: function)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.NotificationApi.getSubscriptionTemplates
    name: getSubscriptionTemplates()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSubscriptionTemplates()
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.NotificationApi.listEventTypes
    name: 'listEventTypes(publisherId?: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: publisherId
          type:
            - string
          description: |
            Limit to event types for this publisher
          optional: true
      content: 'function listEventTypes(publisherId?: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.NotificationApi.listSubscriptions
    name: 'listSubscriptions(subscriber?: string, queryFlags?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: subscriber
          type:
            - string
          description: ''
          optional: true
        - id: queryFlags
          type:
            - function
          description: |+

          optional: true
      content: 'function listSubscriptions(subscriber?: string, queryFlags?: function)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.NotificationApi.constructor
    name: >-
      NotificationApi(baseUrl: string, handlers: function, options?:
      IRequestOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: baseUrl
          type:
            - string
          description: ''
        - id: handlers
          type:
            - function
          description: ''
        - id: options
          type:
            - IRequestOptions
          description: ''
          optional: true
      content: >-
        new NotificationApi(baseUrl: string, handlers: function, options?:
        IRequestOptions)
      return:
        type:
          - vso-node-api.NotificationApi
    type: constructor
  - uid: vso-node-api.NotificationApi.performBatchNotificationOperations
    name: 'performBatchNotificationOperations(operation: BatchNotificationOperation)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: operation
          type:
            - BatchNotificationOperation
          description: |+

      content: >-
        function performBatchNotificationOperations(operation:
        BatchNotificationOperation)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.NotificationApi.publishEvent
    name: 'publishEvent(notificationEvent: VssNotificationEvent)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: notificationEvent
          type:
            - VssNotificationEvent
          description: |+

      content: 'function publishEvent(notificationEvent: VssNotificationEvent)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.NotificationApi.querySubscriptions
    name: 'querySubscriptions(subscriptionQuery: SubscriptionQuery)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: subscriptionQuery
          type:
            - SubscriptionQuery
          description: |+

      content: 'function querySubscriptions(subscriptionQuery: SubscriptionQuery)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.NotificationApi.updateSubscription
    name: >-
      updateSubscription(updateParameters:
      NotificationSubscriptionUpdateParameters, subscriptionId: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: updateParameters
          type:
            - NotificationSubscriptionUpdateParameters
          description: ''
        - id: subscriptionId
          type:
            - string
          description: |+

      content: >-
        function updateSubscription(updateParameters:
        NotificationSubscriptionUpdateParameters, subscriptionId: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.NotificationApi.updateSubscriptionUserSettings
    name: >-
      updateSubscriptionUserSettings(userSettings: SubscriptionUserSettings,
      subscriptionId: string, userId: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: userSettings
          type:
            - SubscriptionUserSettings
          description: ''
        - id: subscriptionId
          type:
            - string
          description: ''
        - id: userId
          type:
            - string
          description: |
            ID of the user or "me" to indicate the calling user
      content: >-
        function updateSubscriptionUserSettings(userSettings:
        SubscriptionUserSettings, subscriptionId: string, userId: string)
      return:
        type:
          - Promise
    type: method
