### YamlMime:UniversalReference
items:
  - uid: vso-node-api.IdentitiesApi
    name: IdentitiesApi
    fullName: IdentitiesApi
    children:
      - vso-node-api.IdentitiesApi.addMember
      - vso-node-api.IdentitiesApi.createGroups
      - vso-node-api.IdentitiesApi.createIdentity
      - vso-node-api.IdentitiesApi.createOrBindWithClaims
      - vso-node-api.IdentitiesApi.createScope
      - vso-node-api.IdentitiesApi.deleteGroup
      - vso-node-api.IdentitiesApi.deleteScope
      - vso-node-api.IdentitiesApi.getIdentityChanges
      - vso-node-api.IdentitiesApi.getIdentitySnapshot
      - vso-node-api.IdentitiesApi.getMaxSequenceId
      - vso-node-api.IdentitiesApi.getScopeById
      - vso-node-api.IdentitiesApi.getScopeByName
      - vso-node-api.IdentitiesApi.getSelf
      - vso-node-api.IdentitiesApi.getSignoutToken
      - vso-node-api.IdentitiesApi.getTenant
      - vso-node-api.IdentitiesApi.getUserIdentityIdsByDomainId
      - vso-node-api.IdentitiesApi.constructor
      - vso-node-api.IdentitiesApi.listGroups
      - vso-node-api.IdentitiesApi.readIdentities
      - vso-node-api.IdentitiesApi.readIdentitiesByScope
      - vso-node-api.IdentitiesApi.readIdentity
      - vso-node-api.IdentitiesApi.readIdentityBatch
      - vso-node-api.IdentitiesApi.readMember
      - vso-node-api.IdentitiesApi.readMemberOf
      - vso-node-api.IdentitiesApi.readMembers
      - vso-node-api.IdentitiesApi.readMembersOf
      - vso-node-api.IdentitiesApi.removeMember
      - vso-node-api.IdentitiesApi.renameScope
      - vso-node-api.IdentitiesApi.updateIdentities
      - vso-node-api.IdentitiesApi.updateIdentity
    langs:
      - typeScript
    type: Class
    summary: ''
  - uid: vso-node-api.IdentitiesApi.addMember
    name: 'addMember(containerId: string, memberId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: containerId
          type:
            - string
          description: ''
        - id: memberId
          type:
            - string
          description: |+

      content: 'function addMember(containerId: string, memberId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.createGroups
    name: 'createGroups(container: any)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: container
          type:
            - any
          description: |+

      content: 'function createGroups(container: any)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.createIdentity
    name: 'createIdentity(frameworkIdentityInfo: FrameworkIdentityInfo)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: frameworkIdentityInfo
          type:
            - FrameworkIdentityInfo
          description: |+

      content: 'function createIdentity(frameworkIdentityInfo: FrameworkIdentityInfo)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.createOrBindWithClaims
    name: 'createOrBindWithClaims(sourceIdentity: Identity)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: sourceIdentity
          type:
            - Identity
          description: |+

      content: 'function createOrBindWithClaims(sourceIdentity: Identity)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.createScope
    name: 'createScope(info: CreateScopeInfo, scopeId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: info
          type:
            - CreateScopeInfo
          description: ''
        - id: scopeId
          type:
            - string
          description: |+

      content: 'function createScope(info: CreateScopeInfo, scopeId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.deleteGroup
    name: 'deleteGroup(groupId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: groupId
          type:
            - string
          description: |+

      content: 'function deleteGroup(groupId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.deleteScope
    name: 'deleteScope(scopeId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: scopeId
          type:
            - string
          description: |+

      content: 'function deleteScope(scopeId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.getIdentityChanges
    name: >-
      getIdentityChanges(identitySequenceId: number, groupSequenceId: number,
      scopeId?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: identitySequenceId
          type:
            - number
          description: ''
        - id: groupSequenceId
          type:
            - number
          description: ''
        - id: scopeId
          type:
            - string
          description: |+

          optional: true
      content: >-
        function getIdentityChanges(identitySequenceId: number, groupSequenceId:
        number, scopeId?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.getIdentitySnapshot
    name: 'getIdentitySnapshot(scopeId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: scopeId
          type:
            - string
          description: |+

      content: 'function getIdentitySnapshot(scopeId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.getMaxSequenceId
    name: getMaxSequenceId()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getMaxSequenceId()
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.getScopeById
    name: 'getScopeById(scopeId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: scopeId
          type:
            - string
          description: |+

      content: 'function getScopeById(scopeId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.getScopeByName
    name: 'getScopeByName(scopeName: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: scopeName
          type:
            - string
          description: |+

      content: 'function getScopeByName(scopeName: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.getSelf
    name: getSelf()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSelf()
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.getSignoutToken
    name: getSignoutToken()
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters: []
      content: function getSignoutToken()
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.getTenant
    name: 'getTenant(tenantId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: tenantId
          type:
            - string
          description: |+

      content: 'function getTenant(tenantId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.getUserIdentityIdsByDomainId
    name: 'getUserIdentityIdsByDomainId(domainId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: domainId
          type:
            - string
          description: |+

      content: 'function getUserIdentityIdsByDomainId(domainId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.constructor
    name: >-
      IdentitiesApi(baseUrl: string, handlers: function, options?:
      IRequestOptions)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: baseUrl
          type:
            - string
          description: ''
        - id: handlers
          type:
            - function
          description: ''
        - id: options
          type:
            - IRequestOptions
          description: ''
          optional: true
      content: >-
        new IdentitiesApi(baseUrl: string, handlers: function, options?:
        IRequestOptions)
      return:
        type:
          - vso-node-api.IdentitiesApi
    type: constructor
  - uid: vso-node-api.IdentitiesApi.listGroups
    name: >-
      listGroups(scopeIds?: string, recurse?: boolean, deleted?: boolean,
      properties?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: scopeIds
          type:
            - string
          description: ''
          optional: true
        - id: recurse
          type:
            - boolean
          description: ''
          optional: true
        - id: deleted
          type:
            - boolean
          description: ''
          optional: true
        - id: properties
          type:
            - string
          description: |+

          optional: true
      content: >-
        function listGroups(scopeIds?: string, recurse?: boolean, deleted?:
        boolean, properties?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.readIdentities
    name: >-
      readIdentities(descriptors?: string, identityIds?: string, searchFilter?:
      string, filterValue?: string, queryMembership?: function, properties?:
      string, includeRestrictedVisibility?: boolean, options?: function)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: descriptors
          type:
            - string
          description: ''
          optional: true
        - id: identityIds
          type:
            - string
          description: ''
          optional: true
        - id: searchFilter
          type:
            - string
          description: ''
          optional: true
        - id: filterValue
          type:
            - string
          description: ''
          optional: true
        - id: queryMembership
          type:
            - function
          description: ''
          optional: true
        - id: properties
          type:
            - string
          description: ''
          optional: true
        - id: includeRestrictedVisibility
          type:
            - boolean
          description: ''
          optional: true
        - id: options
          type:
            - function
          description: |+

          optional: true
      content: >-
        function readIdentities(descriptors?: string, identityIds?: string,
        searchFilter?: string, filterValue?: string, queryMembership?: function,
        properties?: string, includeRestrictedVisibility?: boolean, options?:
        function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.readIdentitiesByScope
    name: >-
      readIdentitiesByScope(scopeId: string, queryMembership?: function,
      properties?: string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: scopeId
          type:
            - string
          description: ''
        - id: queryMembership
          type:
            - function
          description: ''
          optional: true
        - id: properties
          type:
            - string
          description: |+

          optional: true
      content: >-
        function readIdentitiesByScope(scopeId: string, queryMembership?:
        function, properties?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.readIdentity
    name: >-
      readIdentity(identityId: string, queryMembership?: function, properties?:
      string)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: identityId
          type:
            - string
          description: ''
        - id: queryMembership
          type:
            - function
          description: ''
          optional: true
        - id: properties
          type:
            - string
          description: |+

          optional: true
      content: >-
        function readIdentity(identityId: string, queryMembership?: function,
        properties?: string)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.readIdentityBatch
    name: 'readIdentityBatch(batchInfo: IdentityBatchInfo)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: batchInfo
          type:
            - IdentityBatchInfo
          description: |+

      content: 'function readIdentityBatch(batchInfo: IdentityBatchInfo)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.readMember
    name: >-
      readMember(containerId: string, memberId: string, queryMembership?:
      function)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: containerId
          type:
            - string
          description: ''
        - id: memberId
          type:
            - string
          description: ''
        - id: queryMembership
          type:
            - function
          description: |+

          optional: true
      content: >-
        function readMember(containerId: string, memberId: string,
        queryMembership?: function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.readMemberOf
    name: >-
      readMemberOf(memberId: string, containerId: string, queryMembership?:
      function)
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: memberId
          type:
            - string
          description: ''
        - id: containerId
          type:
            - string
          description: ''
        - id: queryMembership
          type:
            - function
          description: |+

          optional: true
      content: >-
        function readMemberOf(memberId: string, containerId: string,
        queryMembership?: function)
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.readMembers
    name: 'readMembers(containerId: string, queryMembership?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: containerId
          type:
            - string
          description: ''
        - id: queryMembership
          type:
            - function
          description: |+

          optional: true
      content: 'function readMembers(containerId: string, queryMembership?: function)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.readMembersOf
    name: 'readMembersOf(memberId: string, queryMembership?: function)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: memberId
          type:
            - string
          description: ''
        - id: queryMembership
          type:
            - function
          description: |+

          optional: true
      content: 'function readMembersOf(memberId: string, queryMembership?: function)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.removeMember
    name: 'removeMember(containerId: string, memberId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: containerId
          type:
            - string
          description: ''
        - id: memberId
          type:
            - string
          description: |+

      content: 'function removeMember(containerId: string, memberId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.renameScope
    name: 'renameScope(renameScope: IdentityScope, scopeId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: renameScope
          type:
            - IdentityScope
          description: ''
        - id: scopeId
          type:
            - string
          description: |+

      content: 'function renameScope(renameScope: IdentityScope, scopeId: string)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.updateIdentities
    name: 'updateIdentities(identities: VssJsonCollectionWrapperV)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: identities
          type:
            - VssJsonCollectionWrapperV
          description: |+

      content: 'function updateIdentities(identities: VssJsonCollectionWrapperV)'
      return:
        type:
          - Promise
    type: method
  - uid: vso-node-api.IdentitiesApi.updateIdentity
    name: 'updateIdentity(identity: Identity, identityId: string)'
    children: []
    langs:
      - typeScript
    summary: ''
    syntax:
      parameters:
        - id: identity
          type:
            - Identity
          description: ''
        - id: identityId
          type:
            - string
          description: |+

      content: 'function updateIdentity(identity: Identity, identityId: string)'
      return:
        type:
          - Promise
    type: method
